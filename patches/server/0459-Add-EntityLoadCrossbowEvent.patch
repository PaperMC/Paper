From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: JRoy <joshroy126@gmail.com>
Date: Wed, 7 Oct 2020 12:04:01 -0400
Subject: [PATCH] Add EntityLoadCrossbowEvent


diff --git a/src/main/java/net/minecraft/world/item/CrossbowItem.java b/src/main/java/net/minecraft/world/item/CrossbowItem.java
index 6e38d4592dcff69e52fbd0f3bae75da9619fd550..6ba8b38425291cf2469dad8016dbae5a2bbdb751 100644
--- a/src/main/java/net/minecraft/world/item/CrossbowItem.java
+++ b/src/main/java/net/minecraft/world/item/CrossbowItem.java
@@ -89,7 +89,14 @@ public class CrossbowItem extends ProjectileWeaponItem {
     public void releaseUsing(ItemStack stack, Level world, LivingEntity user, int remainingUseTicks) {
         int i = this.getUseDuration(stack, user) - remainingUseTicks;
         float f = getPowerForTime(i, stack, user);
-        if (f >= 1.0F && !isCharged(stack) && tryLoadProjectiles(user, stack)) {
+        // Paper start - Add EntityLoadCrossbowEvent
+        if (f >= 1.0F && !isCharged(stack)) {
+            final io.papermc.paper.event.entity.EntityLoadCrossbowEvent event = new io.papermc.paper.event.entity.EntityLoadCrossbowEvent(user.getBukkitLivingEntity(), stack.asBukkitMirror(), org.bukkit.craftbukkit.CraftEquipmentSlot.getHand(user.getUsedItemHand()));
+            if (!event.callEvent() || !tryLoadProjectiles(user, stack, event.shouldConsumeItem()) || !event.shouldConsumeItem()) {
+                if (user instanceof ServerPlayer player) player.containerMenu.sendAllDataToRemote();
+                return;
+            }
+            // Paper end - Add EntityLoadCrossbowEvent
             CrossbowItem.ChargingSounds chargingSounds = this.getChargingSounds(stack);
             chargingSounds.end()
                 .ifPresent(
@@ -107,8 +114,14 @@ public class CrossbowItem extends ProjectileWeaponItem {
         }
     }
 
-    private static boolean tryLoadProjectiles(LivingEntity shooter, ItemStack crossbow) {
-        List<ItemStack> list = draw(crossbow, shooter.getProjectile(crossbow), shooter);
+    @io.papermc.paper.annotation.DoNotUse // Paper - Add EntityLoadCrossbowEvent
+    private static boolean tryLoadProjectiles(LivingEntity shooter, ItemStack crossbow)  {
+        // Paper start - Add EntityLoadCrossbowEvent
+        return CrossbowItem.tryLoadProjectiles(shooter, crossbow, true);
+    }
+    private static boolean tryLoadProjectiles(LivingEntity shooter, ItemStack crossbow, boolean consume) {
+        List<ItemStack> list = draw(crossbow, shooter.getProjectile(crossbow), shooter, consume ? ProjectileDrawingItemConsumption.IMMEDIATELY : ProjectileDrawingItemConsumption.NEVER);
+        // Paper end - Add EntityLoadCrossbowEvent
         if (!list.isEmpty()) {
             crossbow.set(DataComponents.CHARGED_PROJECTILES, ChargedProjectiles.of(list));
             return true;
diff --git a/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java b/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
index 8154773fd74d76e83a65e518e6f6959f1012033c..52555846a873f5006c58f7e1e08f5190854c30ba 100644
--- a/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
+++ b/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
@@ -158,6 +158,9 @@ public abstract class ProjectileWeaponItem extends Item {
         // being tangible, allowing for it to be picked up once shot.
         // Callers that do *not* consume later are responsible for marking the shot projectile as intangible.
         MAYBE_LATER,
+
+        // Will not reduce the passed projectile stack and prepare all returned items to be intangible.
+        NEVER,
     }
     protected static List<ItemStack> draw(ItemStack stack, ItemStack projectileStack, LivingEntity shooter, final ProjectileDrawingItemConsumption consumption) {
     // Paper end - improve bow shoot event - delayed consumption to allow for consumption cancellation
@@ -200,7 +203,7 @@ public abstract class ProjectileWeaponItem extends Item {
         int i;
         label28:
         {
-            if (!multishot && !shooter.hasInfiniteMaterials()) {
+            if (!multishot && !shooter.hasInfiniteMaterials() && consumption != ProjectileDrawingItemConsumption.NEVER) { // Paper - add EntityLoadCrossbowEvent
                 Level world = shooter.level();
 
                 if (world instanceof ServerLevel) {
