From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: masmc05 <masmc05@gmail.com>
Date: Sun, 11 Aug 2024 03:01:52 +0300
Subject: [PATCH] Item serialization as json


diff --git a/src/main/java/net/minecraft/world/item/component/CustomData.java b/src/main/java/net/minecraft/world/item/component/CustomData.java
index 6b7245cf05ea4b6ce05462eb3164bce7f5d76a03..ac1914438307e8a7cc3a3b6352e88a0638f8a33b 100644
--- a/src/main/java/net/minecraft/world/item/component/CustomData.java
+++ b/src/main/java/net/minecraft/world/item/component/CustomData.java
@@ -28,7 +28,17 @@ import org.slf4j.Logger;
 public final class CustomData {
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final CustomData EMPTY = new CustomData(new CompoundTag());
-    public static final Codec<CustomData> CODEC = Codec.withAlternative(CompoundTag.CODEC, TagParser.AS_CODEC)
+    // Paper start - Item serialization as json
+    public static ThreadLocal<Boolean> SERIALIZE_CUSTOM_AS_SNBT = ThreadLocal.withInitial(() -> false);
+    public static final Codec<CustomData> CODEC = Codec.either(CompoundTag.CODEC, TagParser.AS_CODEC)
+        .xmap(com.mojang.datafixers.util.Either::unwrap, data -> { // Both will be used for deserialization, but we decide which one to use for serialization
+            if (!SERIALIZE_CUSTOM_AS_SNBT.get()) {
+                return com.mojang.datafixers.util.Either.left(data); // First codec
+            } else {
+                return com.mojang.datafixers.util.Either.right(data); // Second codec
+            }
+        })
+        // Paper end - Item serialization as json
         .xmap(CustomData::new, component -> component.tag);
     public static final Codec<CustomData> CODEC_WITH_ID = CODEC.validate(
         component -> component.getUnsafe().contains("id", 8) ? DataResult.success(component) : DataResult.error(() -> "Missing id for entity in: " + component)
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 317af98f8bd166a5a534f74e6ba177be9afb6a8f..264ff92c35ca68464e580da65a1324fb14ece159 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -164,6 +164,36 @@ public final class CraftItemFactory implements ItemFactory {
         }
     }
 
+    // Paper start - Item serialization to json
+    @Override
+    public ItemStack createItemStack(com.google.gson.JsonObject data) throws IllegalArgumentException {
+        Preconditions.checkNotNull(data, "null cannot be deserialized");
+
+        final int dataVersion = data.get("DataVersion").getAsInt();
+        final int currentVersion = org.bukkit.craftbukkit.util.CraftMagicNumbers.INSTANCE.getDataVersion();
+        data = ca.spottedleaf.dataconverter.minecraft.MCDataConverter.convertJson(ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.ITEM_STACK, data, false, dataVersion, currentVersion);
+        com.mojang.serialization.DynamicOps<com.google.gson.JsonElement> ops = MinecraftServer.getServer().registryAccess().createSerializationContext(com.mojang.serialization.JsonOps.INSTANCE);
+        return CraftItemStack.asCraftMirror(net.minecraft.world.item.ItemStack.CODEC.parse(ops, data).getOrThrow(IllegalArgumentException::new));
+    }
+
+    public static com.google.gson.JsonObject serializeAsJson(net.minecraft.world.item.ItemStack handle) {
+        Preconditions.checkNotNull(handle, "Cannot serialize empty ItemStack");
+        Preconditions.checkArgument(!handle.isEmpty(), "Cannot serialize empty ItemStack");
+
+        net.minecraft.core.RegistryAccess.Frozen reg = net.minecraft.server.MinecraftServer.getServer().registryAccess();
+        com.mojang.serialization.DynamicOps<com.google.gson.JsonElement> ops = reg.createSerializationContext(com.mojang.serialization.JsonOps.INSTANCE);
+        com.google.gson.JsonObject item;
+        net.minecraft.world.item.component.CustomData.SERIALIZE_CUSTOM_AS_SNBT.set(true);
+        try {
+            item = net.minecraft.world.item.ItemStack.CODEC.encodeStart(ops, handle).getOrThrow().getAsJsonObject();
+        } finally {
+            net.minecraft.world.item.component.CustomData.SERIALIZE_CUSTOM_AS_SNBT.set(false);
+        }
+        item.addProperty("DataVersion", org.bukkit.craftbukkit.util.CraftMagicNumbers.INSTANCE.getDataVersion());
+        return item;
+    }
+    // Paper end - Item serialization to json
+
     @Override
     public Material getSpawnEgg(EntityType type) {
         if (type == EntityType.UNKNOWN) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index 40fb5b5e00f6bc82e67d318b8b3d1e7606973f52..e5f9f85962d26e93c3e90f50fbd4e87f23c1d2c0 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -341,6 +341,13 @@ public final class CraftItemStack extends ItemStack {
         return (item != null && item.isEnchanted()) ? item.get(DataComponents.ENCHANTMENTS) : null;
     }
 
+    // Paper start - Item serialization to json
+    @Override
+    public com.google.gson.JsonObject serializeAsJson() {
+        return CraftItemFactory.serializeAsJson(this.handle);
+    }
+    // Paper end - Item serialization to json
+
     @Override
     public CraftItemStack clone() {
         return new org.bukkit.craftbukkit.inventory.CraftItemStack(this.handle != null ? this.handle.copy() : null); // Paper
