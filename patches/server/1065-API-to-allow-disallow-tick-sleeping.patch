From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Abel <abelvanhulst@gmail.com>
Date: Tue, 12 Nov 2024 22:25:20 +0100
Subject: [PATCH] API to allow/disallow tick sleeping


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 64b56abf8900d0424100da460fc68ac964394793..5540994697d987898557d49e28dc1dc9f4a5e8db 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -3,9 +3,6 @@ package net.minecraft.server;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
-import co.aikar.timings.Timings;
-import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
-import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -332,6 +329,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public volatile Thread shutdownThread; // Paper
     public volatile boolean abnormalExit = false; // Paper
     public static final long SERVER_INIT = System.nanoTime(); // Paper - Lag compensation
+    private List<String> pluginsBlockingSleep = new ArrayList<>(); // Paper - API to allow/disallow tick sleeping
 
     public static <S extends MinecraftServer> S spin(Function<Thread, S> serverFactory) {
         AtomicReference<S> atomicreference = new AtomicReference();
@@ -1624,7 +1622,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         int j = this.pauseWhileEmptySeconds() * 20;
 
         if (j > 0) {
-            if (this.playerList.getPlayerCount() == 0 && !this.tickRateManager.isSprinting()) {
+            removeDisabledPluginsBlockingSleep(); // Paper - API to allow/disallow tick sleeping
+            if (this.playerList.getPlayerCount() == 0 && !this.tickRateManager.isSprinting() && pluginsBlockingSleep.isEmpty()) { // Paper - API to allow/disallow tick sleeping
                 ++this.emptyTicks;
             } else {
                 this.emptyTicks = 0;
@@ -3186,4 +3185,18 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
     // Paper end - Add tick times API and /mspt command
+
+    // Paper start - API to allow/disallow tick sleeping
+    public void addPluginAllowingSleep(String pluginName, boolean value) {
+        if (!value) pluginsBlockingSleep.add(pluginName);
+        else pluginsBlockingSleep.remove(pluginName);
+    }
+    private void removeDisabledPluginsBlockingSleep() {
+        if (pluginsBlockingSleep.isEmpty()) return;
+        pluginsBlockingSleep.removeIf(plugin -> (
+            io.papermc.paper.plugin.manager.PaperPluginManagerImpl.getInstance().isPluginEnabled(plugin)
+        ));
+    }
+    // Paper end - API to allow/disallow tick sleeping
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index dfddcfb1fe1679adaecf75375757dca720e76ce1..5586c9cbdaeec81dffbf27f0cae46f19cdf75624 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -258,6 +258,7 @@ import org.bukkit.scoreboard.Criteria;
 import org.bukkit.structure.StructureManager;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
 import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
@@ -3246,4 +3247,12 @@ public final class CraftServer implements Server {
         return this.potionBrewer;
     }
     // Paper end
+
+    // Paper start - API to allow/disallow tick sleeping
+    @Override
+    public void allowPausing(final @NotNull org.bukkit.plugin.java.JavaPlugin plugin, final boolean value) {
+        console.addPluginAllowingSleep(plugin.getName(), value);
+    }
+    // Paper end - API to allow/disallow tick sleeping
+
 }
