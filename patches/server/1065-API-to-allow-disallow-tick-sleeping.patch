From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Abel <abelvanhulst@gmail.com>
Date: Tue, 12 Nov 2024 22:25:20 +0100
Subject: [PATCH] API to allow/disallow tick sleeping


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 64b56abf8900d0424100da460fc68ac964394793..e7f94f28efa2df5f4d85ac293bd56f411e8fc623 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -307,6 +307,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private static final AtomicReference<RuntimeException> fatalException = new AtomicReference();
     private final SuppressedExceptionCollector suppressedExceptions;
     private final DiscontinuousFrame tickFrame;
+    private boolean allowPausing = true; // Paper - API to allow/disallow tick sleeping
 
     // CraftBukkit start
     public final WorldLoader.DataLoadContext worldLoader;
@@ -1632,7 +1633,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             if (this.emptyTicks >= j) {
                 this.server.spark.tickStart(); // Paper - spark
-                if (this.emptyTicks == j) {
+                if (this.emptyTicks == j && allowPausing) { // Paper - API to allow/disallow tick sleeping
                     MinecraftServer.LOGGER.info("Server empty for {} seconds, pausing", this.pauseWhileEmptySeconds());
                     this.autoSave();
                 }
@@ -3186,4 +3187,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
     // Paper end - Add tick times API and /mspt command
+
+    // Paper start - API to allow/disallow tick sleeping
+    public void allowPausing(boolean value) {
+        allowPausing = value;
+    }
+    // Paper end - API to allow/disallow tick sleeping
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index dfddcfb1fe1679adaecf75375757dca720e76ce1..e3322be7098c3ee9ccc76836c33a88991912b6a1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -25,6 +25,7 @@ import java.net.InetAddress;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Date;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
@@ -258,6 +259,7 @@ import org.bukkit.scoreboard.Criteria;
 import org.bukkit.structure.StructureManager;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
 import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
@@ -313,6 +315,7 @@ public final class CraftServer implements Server {
     private final io.papermc.paper.logging.SysoutCatcher sysoutCatcher = new io.papermc.paper.logging.SysoutCatcher(); // Paper
     private final io.papermc.paper.potion.PaperPotionBrewer potionBrewer; // Paper - Custom Potion Mixes
     public final io.papermc.paper.SparksFly spark; // Paper - spark
+    private List<org.bukkit.plugin.java.JavaPlugin> pluginsBlockingSleep = new ArrayList<>(); // Paper - API to allow/disallow tick sleeping
 
     // Paper start - Folia region threading API
     private final io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler regionizedScheduler = new io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler();
@@ -3246,4 +3249,14 @@ public final class CraftServer implements Server {
         return this.potionBrewer;
     }
     // Paper end
+
+    // Paper start - API to allow/disallow tick sleeping
+    @Override
+    public void allowPausing(final org.bukkit.plugin.java.@NotNull JavaPlugin plugin, final boolean value) {
+        if (!value) pluginsBlockingSleep.add(plugin);
+        else pluginsBlockingSleep.remove(plugin);
+        console.allowPausing(pluginsBlockingSleep.isEmpty());
+    }
+    // Paper end - API to allow/disallow tick sleeping
+
 }
