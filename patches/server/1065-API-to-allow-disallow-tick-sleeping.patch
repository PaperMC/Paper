From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Abel <abelvanhulst@gmail.com>
Date: Tue, 12 Nov 2024 22:25:20 +0100
Subject: [PATCH] API to allow/disallow tick sleeping


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 64b56abf8900d0424100da460fc68ac964394793..735b5d8c35e1f0b09910340c6af434fe6c67f099 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -307,6 +307,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private static final AtomicReference<RuntimeException> fatalException = new AtomicReference();
     private final SuppressedExceptionCollector suppressedExceptions;
     private final DiscontinuousFrame tickFrame;
+    private boolean allowPausing = true; // Paper - API to allow/disallow tick sleeping
 
     // CraftBukkit start
     public final WorldLoader.DataLoadContext worldLoader;
@@ -1623,7 +1624,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         long i = Util.getNanos();
         int j = this.pauseWhileEmptySeconds() * 20;
 
-        if (j > 0) {
+        if (j > 0 && allowPausing) { // Paper - API to allow/disallow tick sleeping
             if (this.playerList.getPlayerCount() == 0 && !this.tickRateManager.isSprinting()) {
                 ++this.emptyTicks;
             } else {
@@ -3186,4 +3187,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
     // Paper end - Add tick times API and /mspt command
+
+    // Paper start - API to allow/disallow tick sleeping
+    public void allowPausing(boolean value) {
+        allowPausing = value;
+    }
+    // Paper end - API to allow/disallow tick sleeping
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index dfddcfb1fe1679adaecf75375757dca720e76ce1..6f2a2e63932554da2296f7aa050b832a00051438 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -258,6 +258,7 @@ import org.bukkit.scoreboard.Criteria;
 import org.bukkit.structure.StructureManager;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
 import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
@@ -313,6 +314,7 @@ public final class CraftServer implements Server {
     private final io.papermc.paper.logging.SysoutCatcher sysoutCatcher = new io.papermc.paper.logging.SysoutCatcher(); // Paper
     private final io.papermc.paper.potion.PaperPotionBrewer potionBrewer; // Paper - Custom Potion Mixes
     public final io.papermc.paper.SparksFly spark; // Paper - spark
+    private List<org.bukkit.plugin.java.JavaPlugin> pluginsBlockingSleep = new ArrayList<>(); // Paper - API to allow/disallow tick sleeping
 
     // Paper start - Folia region threading API
     private final io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler regionizedScheduler = new io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler();
@@ -3246,4 +3248,14 @@ public final class CraftServer implements Server {
         return this.potionBrewer;
     }
     // Paper end
+
+    // Paper start - API to allow/disallow tick sleeping
+    @Override
+    public void allowPausing(final @NotNull org.bukkit.plugin.java.JavaPlugin plugin, final boolean value) {
+        if (!value) pluginsBlockingSleep.add(plugin);
+        else pluginsBlockingSleep.remove(plugin);
+        console.allowPausing(pluginsBlockingSleep.isEmpty());
+    }
+    // Paper end - API to allow/disallow tick sleeping
+
 }
