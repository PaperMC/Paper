From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Mon, 29 Apr 2024 08:11:45 -0400
Subject: [PATCH] fixup! Test changes


diff --git a/src/main/java/io/papermc/paper/datakey/ComponentAdapters.java b/src/main/java/io/papermc/paper/datakey/ComponentAdapters.java
index 4f3534f76cf6722c8a13076f26b11b1ff2a5aa28..b3bbd86e9aa7fa30ec5bfc25c195522fc7caf060 100644
--- a/src/main/java/io/papermc/paper/datakey/ComponentAdapters.java
+++ b/src/main/java/io/papermc/paper/datakey/ComponentAdapters.java
@@ -1,21 +1,39 @@
 package io.papermc.paper.datakey;
 
 import io.papermc.paper.adventure.PaperAdventure;
+import io.papermc.paper.datakey.types.PaperBundleContents;
 import io.papermc.paper.datakey.types.PaperChargedProjectiles;
+import io.papermc.paper.datakey.types.PaperCustomModelData;
+import io.papermc.paper.datakey.types.PaperDyedItemColor;
+import io.papermc.paper.datakey.types.PaperFoodProperties;
 import io.papermc.paper.datakey.types.PaperItemAttributeModifiers;
 import io.papermc.paper.datakey.types.PaperItemEnchantments;
 import io.papermc.paper.datakey.types.PaperItemLore;
+import io.papermc.paper.datakey.types.PaperMapDecorations;
+import io.papermc.paper.datakey.types.PaperMapID;
+import io.papermc.paper.datakey.types.PaperMapItemColor;
 import io.papermc.paper.datakey.types.PaperPotDecorations;
+import io.papermc.paper.datakey.types.PaperPotionContents;
+import io.papermc.paper.datakey.types.PaperSeededContainerLoot;
+import io.papermc.paper.datakey.types.PaperSuspiciousStewEffects;
 import io.papermc.paper.datakey.types.PaperUnbreakable;
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
+import net.kyori.adventure.key.Key;
 import net.minecraft.core.component.DataComponentType;
 import net.minecraft.core.component.DataComponents;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.Unit;
 import net.minecraft.world.item.Rarity;
+import net.minecraft.world.item.component.MapPostProcessing;
+import org.bukkit.DyeColor;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.util.Handleable;
 import org.bukkit.inventory.ItemRarity;
 import org.checkerframework.checker.nullness.qual.NonNull;
@@ -24,7 +42,7 @@ import org.checkerframework.framework.qual.DefaultQualifier;
 @DefaultQualifier(NonNull.class)
 public final class ComponentAdapters {
 
-    private static final Function<Unit, Void> UNIT_TO_API_CONVERTER = $ -> {
+    static final Function<Unit, Void> UNIT_TO_API_CONVERTER = $ -> {
         throw new UnsupportedOperationException("Cannot convert the Unit type to an API value");
     };
 
@@ -52,6 +70,39 @@ public final class ComponentAdapters {
         register(DataComponents.ENCHANTMENTS, PaperItemEnchantments::new);
         register(DataComponents.STORED_ENCHANTMENTS, PaperItemEnchantments::new);
         register(DataComponents.ATTRIBUTE_MODIFIERS, PaperItemAttributeModifiers::new);
+        register(DataComponents.FOOD, PaperFoodProperties::new);
+        register(DataComponents.MAP_POST_PROCESSING, nms -> MapPostProcessing.valueOf(nms.name()), api -> MapPostProcessing.valueOf(api.name()));
+        register(DataComponents.DYED_COLOR, PaperDyedItemColor::new);
+        register(DataComponents.BUNDLE_CONTENTS, PaperBundleContents::new);
+        register(DataComponents.MAP_COLOR, PaperMapItemColor::new);
+        register(DataComponents.CUSTOM_MODEL_DATA, PaperCustomModelData::new);
+        register(DataComponents.SUSPICIOUS_STEW_EFFECTS, PaperSuspiciousStewEffects::new);
+        register(DataComponents.POTION_CONTENTS, PaperPotionContents::new);
+        register(DataComponents.MAP_ID, PaperMapID::new);
+        register(DataComponents.MAP_DECORATIONS, PaperMapDecorations::new);
+        register(DataComponents.CONTAINER_LOOT, PaperSeededContainerLoot::new);
+        register(DataComponents.RECIPES, nms -> {
+            List<Key> api = new ArrayList<>(nms.size());
+            for (ResourceLocation location : nms) {
+                api.add(CraftNamespacedKey.fromMinecraft(location));
+            }
+
+            return Collections.unmodifiableList(api);
+        }, api -> {
+            List<ResourceLocation> nms = new ArrayList<>(api.size());
+            for (Key key : api) {
+                nms.add(new ResourceLocation(key.namespace(), key.value()));
+            }
+
+            return Collections.unmodifiableList(nms);
+        });
+        register(DataComponents.BASE_COLOR, nms -> DyeColor.getByWoolData((byte) nms.getId()), api -> net.minecraft.world.item.DyeColor.byId(api.getWoolData()));
+        // TODO: REMOVE THIS... we want to build the PR... so lets just make things UNTYPED!
+        for (Map.Entry<ResourceKey<DataComponentType<?>>, DataComponentType<?>> componentType : BuiltInRegistries.DATA_COMPONENT_TYPE.entrySet()) {
+            if (!ADAPTERS.containsKey(componentType.getKey())) {
+                registerUntyped((DataComponentType<Unit>) componentType.getValue());
+            }
+        }
     }
 
     public static void registerUntyped(final DataComponentType<Unit> type) {
diff --git a/src/test/java/io/papermc/paper/configuration/ConfigurationSectionTest.java b/src/test/java/io/papermc/paper/configuration/ConfigurationSectionTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..0aad5d896a6adb691a7efaee3baebed4da7c607e
--- /dev/null
+++ b/src/test/java/io/papermc/paper/configuration/ConfigurationSectionTest.java
@@ -0,0 +1,56 @@
+package io.papermc.paper.configuration;
+
+import static org.junit.jupiter.api.Assertions.*;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import org.bukkit.Material;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.util.Vector;
+import org.junit.jupiter.api.Test;
+
+public abstract class ConfigurationSectionTest {
+    public abstract ConfigurationSection getConfigurationSection();
+
+    @Test
+    public void testGetItemStack_String() {
+        ConfigurationSection section = getConfigurationSection();
+        String key = "exists";
+        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
+
+        section.set(key, value);
+
+        assertEquals(value, section.getItemStack(key));
+        assertNull(section.getString("doesntExist"));
+    }
+
+    @Test
+    public void testGetItemStack_String_ItemStack() {
+        ConfigurationSection section = getConfigurationSection();
+        String key = "exists";
+        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
+        ItemStack def = new ItemStack(Material.STONE, 1);
+
+        section.set(key, value);
+
+        assertEquals(value, section.getItemStack(key, def));
+        assertEquals(def, section.getItemStack("doesntExist", def));
+    }
+
+    @Test
+    public void testIsItemStack() {
+        ConfigurationSection section = getConfigurationSection();
+        String key = "exists";
+        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
+
+        section.set(key, value);
+
+        assertTrue(section.isItemStack(key));
+        assertFalse(section.isItemStack("doesntExist"));
+    }
+}
diff --git a/src/test/java/io/papermc/paper/configuration/MemorySectionTest.java b/src/test/java/io/papermc/paper/configuration/MemorySectionTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..def33c36f207a4c5306b5a895336aa70335c1678
--- /dev/null
+++ b/src/test/java/io/papermc/paper/configuration/MemorySectionTest.java
@@ -0,0 +1,11 @@
+package io.papermc.paper.configuration;
+
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.MemoryConfiguration;
+
+public class MemorySectionTest extends ConfigurationSectionTest {
+    @Override
+    public ConfigurationSection getConfigurationSection() {
+        return new MemoryConfiguration().createSection("section");
+    }
+}
diff --git a/src/test/java/org/bukkit/support/DummyServer.java b/src/test/java/org/bukkit/support/DummyServer.java
index a73c16bb7923957113e688fa6fe46cbd68837d3e..669b21bfde3262e1c58c41a014dc9cd59f24e77f 100644
--- a/src/test/java/org/bukkit/support/DummyServer.java
+++ b/src/test/java/org/bukkit/support/DummyServer.java
@@ -54,6 +54,24 @@ public final class DummyServer {
             final org.bukkit.plugin.PluginManager pluginManager = new  io.papermc.paper.plugin.manager.PaperPluginManagerImpl(instance, new org.bukkit.command.SimpleCommandMap(instance, new java.util.HashMap<>()), null); // Paper
             when(instance.getPluginManager()).thenReturn(pluginManager);
             when(instance.getTag(anyString(), any(org.bukkit.NamespacedKey.class), any())).thenAnswer(ignored -> new io.papermc.paper.util.EmptyTag());
+            when(instance.createProfile(any(), anyString())).thenAnswer(invocation -> {
+                java.util.UUID uuid = invocation.getArgument(0, java.util.UUID.class);
+                String name = invocation.getArgument(1, String.class);
+                return new com.destroystokyo.paper.profile.CraftPlayerProfile(uuid, name);
+            });
+            when(instance.createProfile(anyString())).thenAnswer(invocation -> {
+                String name = invocation.getArgument(0, String.class);
+                return new com.destroystokyo.paper.profile.CraftPlayerProfile(null, name);
+            });
+            when(instance.createProfileExact(any(), anyString())).thenAnswer(invocation -> {
+                java.util.UUID uuid = invocation.getArgument(0, java.util.UUID.class);
+                String name = invocation.getArgument(1, String.class);
+                return new com.destroystokyo.paper.profile.CraftPlayerProfile(uuid, name);
+            });
+            when(instance.createProfile(any(java.util.UUID.class))).thenAnswer(invocation -> {
+                java.util.UUID uuid = invocation.getArgument(0, java.util.UUID.class);
+                return new com.destroystokyo.paper.profile.CraftPlayerProfile(uuid, null);
+            });
             // paper end - testing additions
 
             // Paper start - add test for recipe conversion
