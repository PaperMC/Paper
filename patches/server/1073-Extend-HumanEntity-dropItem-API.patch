From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Strokkur24 <strokkur24@gmail.com>
Date: Sat, 30 Nov 2024 11:54:38 +0100
Subject: [PATCH] Extend HumanEntity#dropItem API


diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index e345cdbfab44a0f5da80d738798dbb4424b7ab5c..8b3c6e16c02b0e5b154be2a1e45ae2814c95b988 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -48,13 +48,13 @@ import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.CraftMerchantCustom;
 import org.bukkit.craftbukkit.inventory.CraftRecipe;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.entity.Firework;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.entity.Villager;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.inventory.EntityEquipment;
+import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
@@ -801,6 +801,84 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         // Paper end - Fix HumanEntity#drop not updating the client inv
     }
 
+    // Paper start - Extend HumanEntity#dropItem API
+    @Override
+    public @org.jetbrains.annotations.Nullable org.bukkit.entity.Item dropItem(final @org.jetbrains.annotations.NotNull ItemStack itemStack) {
+        return this.dropItem(itemStack, false, false);
+    }
+
+    @Override
+    public @org.jetbrains.annotations.Nullable org.bukkit.entity.Item dropItem(final @org.jetbrains.annotations.NotNull ItemStack itemStack, final boolean persistThrower) {
+        return this.dropItem(itemStack, persistThrower, false);
+    }
+
+    @Override
+    public @org.jetbrains.annotations.Nullable org.bukkit.entity.Item dropItem(final @org.jetbrains.annotations.NotNull ItemStack itemStack, final boolean persistThrower, final boolean throwRandomly) {
+        final int slot = this.inventory.first(itemStack);
+        if (slot == -1) {
+            return null;
+        }
+        
+        return this.dropItem(slot, persistThrower, throwRandomly);
+    }
+
+    @Override
+    public @org.jetbrains.annotations.Nullable org.bukkit.entity.Item dropItem(final int slot) {
+        return this.dropItem(slot, false, false);
+    }
+
+    @Override
+    public @org.jetbrains.annotations.Nullable org.bukkit.entity.Item dropItem(final int slot, final boolean persistThrower) {
+        return this.dropItem(slot, persistThrower, false);
+    }
+
+    @Override
+    public @org.jetbrains.annotations.Nullable org.bukkit.entity.Item dropItem(final int slot, final boolean persistThrower, final boolean throwRandomly) {
+        // Make sure the slot is in bounds
+        if (slot < 0 || this.inventory.getSize() <= slot) {
+            throw new IndexOutOfBoundsException("Slot " + slot + " out of range for inventory of size " + this.inventory.getSize());
+        }
+
+        final ItemStack stack = this.inventory.getItem(slot);
+        final org.bukkit.entity.Item itemEntity = dropItemRaw(stack, persistThrower, throwRandomly);
+
+        this.inventory.setItem(slot, null);
+        return itemEntity;
+    }
+
+    @Override
+    public @org.jetbrains.annotations.Nullable org.bukkit.entity.Item dropItem(final @org.jetbrains.annotations.NotNull org.bukkit.inventory.EquipmentSlot slot) {
+        return dropItem(slot, false, false);
+    }
+
+    @Override
+    public @org.jetbrains.annotations.Nullable org.bukkit.entity.Item dropItem(final @org.jetbrains.annotations.NotNull org.bukkit.inventory.EquipmentSlot slot, final boolean persistThrower) {
+        return dropItem(slot, persistThrower, false);
+    }
+
+    @Override
+    public @org.jetbrains.annotations.Nullable org.bukkit.entity.Item dropItem(final @org.jetbrains.annotations.NotNull EquipmentSlot slot, final boolean persistThrower, final boolean throwRandomly) {
+        final ItemStack stack = this.inventory.getItem(slot);
+        final org.bukkit.entity.Item itemEntity = dropItemRaw(stack, persistThrower, throwRandomly);
+
+        this.inventory.setItem(slot, null);
+        return itemEntity;
+    }
+
+    private org.bukkit.entity.Item dropItemRaw(final ItemStack is, final boolean persistThrower, final boolean throwRandomly) {
+        if (is == null || is.getType() == Material.AIR) {
+            return null;
+        }
+
+        final net.minecraft.world.entity.item.ItemEntity droppedEntity = this.getHandle().drop(CraftItemStack.asNMSCopy(is), throwRandomly, persistThrower);
+        if (droppedEntity == null) {
+            return null;
+        }
+
+        return (org.bukkit.entity.Item) droppedEntity.getBukkitEntity();
+    }
+    // Paper end
+
     @Override
     public float getExhaustion() {
         return this.getHandle().getFoodData().exhaustionLevel;
