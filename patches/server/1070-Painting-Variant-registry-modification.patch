From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kokiriglade <60290002+celerry@users.noreply.github.com>
Date: Sat, 23 Nov 2024 14:18:47 +0000
Subject: [PATCH] Painting Variant registry modification


diff --git a/src/main/java/io/papermc/paper/registry/PaperRegistries.java b/src/main/java/io/papermc/paper/registry/PaperRegistries.java
index ee1fce58c6e57dd93a30ee66e7488a92f9da2fe3..41dc3fedc12ab6a426e1838efbab9c760d2aabdf 100644
--- a/src/main/java/io/papermc/paper/registry/PaperRegistries.java
+++ b/src/main/java/io/papermc/paper/registry/PaperRegistries.java
@@ -5,6 +5,7 @@ import io.papermc.paper.datacomponent.DataComponentType;
 import io.papermc.paper.datacomponent.PaperComponentType;
 import io.papermc.paper.registry.data.PaperEnchantmentRegistryEntry;
 import io.papermc.paper.registry.data.PaperGameEventRegistryEntry;
+import io.papermc.paper.registry.data.PaperPaintingVariantRegistryEntry;
 import io.papermc.paper.registry.entry.RegistryEntry;
 import io.papermc.paper.registry.tag.TagKey;
 import java.util.Collections;
@@ -110,7 +111,7 @@ public final class PaperRegistries {
             writable(Registries.ENCHANTMENT, RegistryKey.ENCHANTMENT, Enchantment.class, CraftEnchantment::new, PaperEnchantmentRegistryEntry.PaperBuilder::new).withSerializationUpdater(FieldRename.ENCHANTMENT_RENAME).delayed(),
             entry(Registries.JUKEBOX_SONG, RegistryKey.JUKEBOX_SONG, JukeboxSong.class, CraftJukeboxSong::new).delayed(),
             entry(Registries.BANNER_PATTERN, RegistryKey.BANNER_PATTERN, PatternType.class, CraftPatternType::new).delayed(),
-            entry(Registries.PAINTING_VARIANT, RegistryKey.PAINTING_VARIANT, Art.class, CraftArt::new).delayed(),
+            writable(Registries.PAINTING_VARIANT, RegistryKey.PAINTING_VARIANT, Art.class, CraftArt::new, PaperPaintingVariantRegistryEntry.PaperBuilder::new).delayed(),
             entry(Registries.INSTRUMENT, RegistryKey.INSTRUMENT, MusicInstrument.class, CraftMusicInstrument::new).delayed(),
 
             // api-only
diff --git a/src/main/java/io/papermc/paper/registry/data/PaperPaintingVariantRegistryEntry.java b/src/main/java/io/papermc/paper/registry/data/PaperPaintingVariantRegistryEntry.java
new file mode 100644
index 0000000000000000000000000000000000000000..73223c818f4f7522a6eb622c7d15c2e222c012aa
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/data/PaperPaintingVariantRegistryEntry.java
@@ -0,0 +1,121 @@
+package io.papermc.paper.registry.data;
+
+import io.papermc.paper.adventure.PaperAdventure;
+import io.papermc.paper.registry.PaperRegistryBuilder;
+import io.papermc.paper.registry.TypedKey;
+import io.papermc.paper.registry.data.util.Checks;
+import io.papermc.paper.registry.data.util.Conversions;
+import net.kyori.adventure.key.Key;
+import net.minecraft.network.chat.Component;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.entity.decoration.PaintingVariant;
+import org.bukkit.Art;
+import org.jetbrains.annotations.Range;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+import java.util.Optional;
+import java.util.OptionalInt;
+
+import static io.papermc.paper.registry.data.util.Checks.asArgument;
+import static io.papermc.paper.registry.data.util.Checks.asArgumentRange;
+import static io.papermc.paper.registry.data.util.Checks.asConfigured;
+
+@NullMarked
+public class PaperPaintingVariantRegistryEntry implements PaintingVariantRegistryEntry {
+
+    protected OptionalInt width = OptionalInt.empty();
+    protected OptionalInt height = OptionalInt.empty();
+    protected @Nullable Component title;
+    protected @Nullable Component author;
+    protected @Nullable ResourceLocation assetId;
+
+    protected final Conversions conversions;
+
+    public PaperPaintingVariantRegistryEntry(
+        final Conversions conversions,
+        final TypedKey<Art> ignoredKey,
+        final @Nullable PaintingVariant nms
+    ) {
+        this.conversions = conversions;
+        if(nms == null) return;
+
+        this.width = OptionalInt.of(nms.width());
+        this.height = OptionalInt.of(nms.height());
+        this.title = nms.title().orElse(null);
+        this.author = nms.title().orElse(null);
+        this.assetId = nms.assetId();
+    }
+
+    @Override
+    public @Range(from = 1, to = 16) int width() {
+        return asConfigured(this.width, "width");
+    }
+
+    @Override
+    public @Range(from = 1, to = 16) int height() {
+        return asConfigured(this.height, "height");
+    }
+
+    @Override
+    public Optional<net.kyori.adventure.text.Component> title() {
+        return this.conversions.asAdventureOptional(this.title);
+    }
+
+    @Override
+    public Optional<net.kyori.adventure.text.Component> author() {
+        return this.conversions.asAdventureOptional(this.author);
+    }
+
+    @Override
+    public Key assetId() {
+        return PaperAdventure.asAdventure(asConfigured(this.assetId, "assetId"));
+    }
+
+    public static final class PaperBuilder extends PaperPaintingVariantRegistryEntry implements PaintingVariantRegistryEntry.Builder, PaperRegistryBuilder<PaintingVariant, Art> {
+
+        public PaperBuilder(final Conversions conversions, final TypedKey<Art> key, final @Nullable PaintingVariant nms) {
+            super(conversions, key, nms);
+        }
+
+        @Override
+        public Builder width(@Range(from = 0, to = 16) final int width) {
+            this.width = OptionalInt.of(asArgumentRange(width, "width", 1, 16));
+            return this;
+        }
+
+        @Override
+        public Builder height(@Range(from = 0, to = 16) final int height) {
+            this.height = OptionalInt.of(asArgumentRange(height, "height", 1, 16));
+            return this;
+        }
+
+        @Override
+        public Builder title(final net.kyori.adventure.text.@Nullable Component title) {
+            this.title = this.conversions.asVanilla(title);
+            return this;
+        }
+
+        @Override
+        public Builder author(final net.kyori.adventure.text.@Nullable Component author) {
+            this.author = this.conversions.asVanilla(author);
+            return this;
+        }
+
+        @Override
+        public Builder assetId(final Key assetId) {
+            this.assetId = PaperAdventure.asVanilla(asArgument(assetId, "assetId"));
+            return this;
+        }
+
+        @Override
+        public PaintingVariant build() {
+            return new PaintingVariant(
+                this.width(),
+                this.height(),
+                asConfigured(this.assetId, "assetId"),
+                Optional.ofNullable(this.title),
+                Optional.ofNullable(this.author)
+            );
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/data/util/Conversions.java b/src/main/java/io/papermc/paper/registry/data/util/Conversions.java
index eda5cc7d45ef59ccc1c9c7e027c1f044f1dcc86b..9dce7106a8b8dbb8a380c5a3b3e307f2b65810c5 100644
--- a/src/main/java/io/papermc/paper/registry/data/util/Conversions.java
+++ b/src/main/java/io/papermc/paper/registry/data/util/Conversions.java
@@ -8,6 +8,7 @@ import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.framework.qual.DefaultQualifier;
 import org.jetbrains.annotations.Contract;
+import java.util.Optional;
 
 @DefaultQualifier(NonNull.class)
 public class Conversions {
@@ -33,4 +34,8 @@ public class Conversions {
     public Component asAdventure(final net.minecraft.network.chat.@Nullable Component vanilla) {
         return vanilla == null ? Component.empty() : this.serializer.deserialize(vanilla);
     }
+
+    public Optional<Component> asAdventureOptional(final net.minecraft.network.chat.@Nullable Component vanilla) {
+        return vanilla == null ? Optional.empty() : Optional.of(this.serializer.deserialize(vanilla));
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftArt.java b/src/main/java/org/bukkit/craftbukkit/CraftArt.java
index 40af940193d0df66bbcdcf5f46132e304016a4d7..e8f202733493aacce9a5505643ddb6ca3fd049d3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftArt.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftArt.java
@@ -42,6 +42,9 @@ public class CraftArt implements Art, Handleable<PaintingVariant> {
 
     private final NamespacedKey key;
     private final PaintingVariant paintingVariant;
+    private final net.kyori.adventure.text.@org.jspecify.annotations.Nullable Component adventureTitle; // Paper - name and author components, assetId key
+    private final net.kyori.adventure.text.@org.jspecify.annotations.Nullable Component adventureAuthor; // Paper - name and author components, assetId key
+    private final net.kyori.adventure.key.@org.jspecify.annotations.NonNull Key adventureAssetId; // Paper - name and author components, assetId key
     private final String name;
     private final int ordinal;
 
@@ -58,6 +61,9 @@ public class CraftArt implements Art, Handleable<PaintingVariant> {
             this.name = key.toString();
         }
         this.ordinal = CraftArt.count++;
+        this.adventureTitle = paintingVariant.title().map(io.papermc.paper.adventure.PaperAdventure::asAdventure).orElse(null); // Paper - name and author components, assetId key
+        this.adventureAuthor = paintingVariant.author().map(io.papermc.paper.adventure.PaperAdventure::asAdventure).orElse(null); // Paper - name and author components, assetId key
+        this.adventureAssetId = io.papermc.paper.adventure.PaperAdventure.asAdventure(paintingVariant.assetId()); // Paper - name and author components, assetId key
     }
 
     @Override
@@ -75,6 +81,22 @@ public class CraftArt implements Art, Handleable<PaintingVariant> {
         return this.paintingVariant.height();
     }
 
+    // Paper start - name and author components, assetId key
+    @Override
+    public java.util.@org.jspecify.annotations.NonNull Optional<net.kyori.adventure.text.Component> title() {
+        return java.util.Optional.ofNullable(this.adventureTitle);
+    }
+
+    @Override
+    public java.util.@org.jspecify.annotations.NonNull Optional<net.kyori.adventure.text.Component> author() {
+        return java.util.Optional.ofNullable(this.adventureAuthor);
+    }
+
+    public net.kyori.adventure.key.@org.jspecify.annotations.NonNull Key assetId() {
+        return this.adventureAssetId;
+    }
+    // Paper end - name and author components, assetId key
+
     @Override
     public int getId() {
         return CraftRegistry.getMinecraftRegistry(Registries.PAINTING_VARIANT).getId(this.paintingVariant);
