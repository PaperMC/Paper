From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Mon, 29 Apr 2024 08:11:45 -0400
Subject: [PATCH] fixup! Test changes


diff --git a/src/test/java/io/papermc/paper/configuration/ConfigurationSectionTest.java b/src/test/java/io/papermc/paper/configuration/ConfigurationSectionTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..0aad5d896a6adb691a7efaee3baebed4da7c607e
--- /dev/null
+++ b/src/test/java/io/papermc/paper/configuration/ConfigurationSectionTest.java
@@ -0,0 +1,56 @@
+package io.papermc.paper.configuration;
+
+import static org.junit.jupiter.api.Assertions.*;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import org.bukkit.Material;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.util.Vector;
+import org.junit.jupiter.api.Test;
+
+public abstract class ConfigurationSectionTest {
+    public abstract ConfigurationSection getConfigurationSection();
+
+    @Test
+    public void testGetItemStack_String() {
+        ConfigurationSection section = getConfigurationSection();
+        String key = "exists";
+        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
+
+        section.set(key, value);
+
+        assertEquals(value, section.getItemStack(key));
+        assertNull(section.getString("doesntExist"));
+    }
+
+    @Test
+    public void testGetItemStack_String_ItemStack() {
+        ConfigurationSection section = getConfigurationSection();
+        String key = "exists";
+        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
+        ItemStack def = new ItemStack(Material.STONE, 1);
+
+        section.set(key, value);
+
+        assertEquals(value, section.getItemStack(key, def));
+        assertEquals(def, section.getItemStack("doesntExist", def));
+    }
+
+    @Test
+    public void testIsItemStack() {
+        ConfigurationSection section = getConfigurationSection();
+        String key = "exists";
+        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
+
+        section.set(key, value);
+
+        assertTrue(section.isItemStack(key));
+        assertFalse(section.isItemStack("doesntExist"));
+    }
+}
diff --git a/src/test/java/io/papermc/paper/configuration/MemorySectionTest.java b/src/test/java/io/papermc/paper/configuration/MemorySectionTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..def33c36f207a4c5306b5a895336aa70335c1678
--- /dev/null
+++ b/src/test/java/io/papermc/paper/configuration/MemorySectionTest.java
@@ -0,0 +1,11 @@
+package io.papermc.paper.configuration;
+
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.MemoryConfiguration;
+
+public class MemorySectionTest extends ConfigurationSectionTest {
+    @Override
+    public ConfigurationSection getConfigurationSection() {
+        return new MemoryConfiguration().createSection("section");
+    }
+}
diff --git a/src/test/java/org/bukkit/support/DummyServer.java b/src/test/java/org/bukkit/support/DummyServer.java
index 7a4681155f740a98ecafa0b992eae1fb5524551f..c94ce4a85716debf5ab5dd67471361425f22a8c2 100644
--- a/src/test/java/org/bukkit/support/DummyServer.java
+++ b/src/test/java/org/bukkit/support/DummyServer.java
@@ -57,8 +57,25 @@ public final class DummyServer {
             final org.bukkit.plugin.PluginManager pluginManager = new  io.papermc.paper.plugin.manager.PaperPluginManagerImpl(instance, new org.bukkit.command.SimpleCommandMap(instance), null);
             when(instance.getPluginManager()).thenReturn(pluginManager);
             when(instance.getTag(anyString(), any(org.bukkit.NamespacedKey.class), any())).thenAnswer(ignored -> new io.papermc.paper.util.EmptyTag());
+            when(instance.createProfile(any(), anyString())).thenAnswer(invocation -> {
+                java.util.UUID uuid = invocation.getArgument(0, java.util.UUID.class);
+                String name = invocation.getArgument(1, String.class);
+                return new com.destroystokyo.paper.profile.CraftPlayerProfile(uuid, name);
+            });
+            when(instance.createProfile(anyString())).thenAnswer(invocation -> {
+                String name = invocation.getArgument(0, String.class);
+                return new com.destroystokyo.paper.profile.CraftPlayerProfile(null, name);
+            });
+            when(instance.createProfileExact(any(), anyString())).thenAnswer(invocation -> {
+                java.util.UUID uuid = invocation.getArgument(0, java.util.UUID.class);
+                String name = invocation.getArgument(1, String.class);
+                return new com.destroystokyo.paper.profile.CraftPlayerProfile(uuid, name);
+            });
+            when(instance.createProfile(any(java.util.UUID.class))).thenAnswer(invocation -> {
+                java.util.UUID uuid = invocation.getArgument(0, java.util.UUID.class);
+                return new com.destroystokyo.paper.profile.CraftPlayerProfile(uuid, null);
+            });
             // paper end - testing additions
-
             Bukkit.setServer(instance);
         } catch (Throwable t) {
             throw new Error(t);
