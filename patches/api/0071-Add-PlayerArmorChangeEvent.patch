From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: pkt77 <parkerkt77@gmail.com>
Date: Fri, 10 Nov 2017 23:45:59 -0500
Subject: [PATCH] Add PlayerArmorChangeEvent


diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..b11c8f5abc6110e20538e2ebadd162666e039cc8
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
@@ -0,0 +1,96 @@
+package com.destroystokyo.paper.event.player;
+
+import java.util.Set;
+import io.papermc.paper.event.entity.EntityEquipmentChangeEvent;
+import org.bukkit.Material;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+
+import static org.bukkit.Material.*;
+
+/**
+ * Called when the player themselves change their armor items
+ * <p>
+ * Not currently called for environmental factors though it <strong>MAY BE IN THE FUTURE</strong>
+ */
+@NullMarked
+public class PlayerArmorChangeEvent extends EntityEquipmentChangeEvent {
+
+    private final SlotType slotType;
+
+    @ApiStatus.Internal
+    public PlayerArmorChangeEvent(final Player player, final EquipmentSlot equipmentSlot, final ItemStack oldItem, final ItemStack newItem) {
+        super(player, equipmentSlot, oldItem, newItem);
+        this.slotType = SlotType.valueOf(equipmentSlot.name());
+    }
+
+    @Override
+    public Player getEntity() {
+        return (Player) entity;
+    }
+
+    public Player getPlayer() {
+        return (Player) entity;
+    }
+
+    /**
+     * Gets the type of slot being altered.
+     *
+     * @return type of slot being altered
+     */
+    public SlotType getSlotType() {
+        return this.slotType;
+    }
+
+    public enum SlotType {
+        HEAD(NETHERITE_HELMET, DIAMOND_HELMET, GOLDEN_HELMET, IRON_HELMET, CHAINMAIL_HELMET, LEATHER_HELMET, CARVED_PUMPKIN, PLAYER_HEAD, SKELETON_SKULL, ZOMBIE_HEAD, CREEPER_HEAD, WITHER_SKELETON_SKULL, TURTLE_HELMET, DRAGON_HEAD, PIGLIN_HEAD),
+        CHEST(NETHERITE_CHESTPLATE, DIAMOND_CHESTPLATE, GOLDEN_CHESTPLATE, IRON_CHESTPLATE, CHAINMAIL_CHESTPLATE, LEATHER_CHESTPLATE, ELYTRA),
+        LEGS(NETHERITE_LEGGINGS, DIAMOND_LEGGINGS, GOLDEN_LEGGINGS, IRON_LEGGINGS, CHAINMAIL_LEGGINGS, LEATHER_LEGGINGS),
+        FEET(NETHERITE_BOOTS, DIAMOND_BOOTS, GOLDEN_BOOTS, IRON_BOOTS, CHAINMAIL_BOOTS, LEATHER_BOOTS);
+
+        private final Set<Material> types;
+
+        SlotType(final Material... types) {
+            this.types = Set.of(types);
+        }
+
+        /**
+         * Gets an immutable set of all allowed material types that can be placed in an
+         * armor slot.
+         *
+         * @return immutable set of material types
+         */
+        public Set<Material> getTypes() {
+            return this.types;
+        }
+
+        /**
+         * Gets the type of slot via the specified material
+         *
+         * @param material material to get slot by
+         * @return slot type the material will go in, or {@code null} if it won't
+         */
+        public static @Nullable SlotType getByMaterial(final Material material) {
+            for (final SlotType slotType : values()) {
+                if (slotType.getTypes().contains(material)) {
+                    return slotType;
+                }
+            }
+            return null;
+        }
+
+        /**
+         * Gets whether this material can be equipped to a slot
+         *
+         * @param material material to check
+         * @return whether this material can be equipped
+         */
+        public static boolean isEquipable(final Material material) {
+            return getByMaterial(material) != null;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityEquipmentChangeEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityEquipmentChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..f737c4bddd8f6bcfb5d4935fc68b55c36aabd9a8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/entity/EntityEquipmentChangeEvent.java
@@ -0,0 +1,72 @@
+package io.papermc.paper.event.entity;
+
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+
+/**
+ * Called when an entities' equipment changes.
+ */
+@NullMarked
+public class EntityEquipmentChangeEvent extends EntityEvent {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private final EquipmentSlot equipmentSlot;
+    private final ItemStack oldItem;
+    private final ItemStack newItem;
+
+    @ApiStatus.Internal
+    public EntityEquipmentChangeEvent(final LivingEntity entity, final EquipmentSlot equipmentSlot, final ItemStack oldItem, final ItemStack newItem) {
+        super(entity);
+        this.equipmentSlot = equipmentSlot;
+        this.oldItem = oldItem;
+        this.newItem = newItem;
+    }
+
+    @Override
+    public LivingEntity getEntity() {
+        return (LivingEntity) entity;
+    }
+
+    /**
+     * Gets the equipment slot of the item that is being replaced.
+     *
+     * @return the old item
+     */
+    public EquipmentSlot getEquipmentSlot() {
+        return equipmentSlot;
+    }
+
+    /**
+     * Gets the existing item that is being replaced.
+     *
+     * @return the old item
+     */
+    public ItemStack getOldItem() {
+        return oldItem;
+    }
+
+    /**
+     * Gets the new item that is replacing the old item.
+     *
+     * @return the new item
+     */
+    public ItemStack getNewItem() {
+        return newItem;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+}
