From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ammo <ammo@slne.dev>
Date: Thu, 5 Dec 2024 19:46:42 +0100
Subject: [PATCH] Add ServerChangeMaxPlayerSlotsEvent


diff --git a/src/main/java/io/papermc/paper/event/server/ServerChangeMaxPlayerSlotsEvent.java b/src/main/java/io/papermc/paper/event/server/ServerChangeMaxPlayerSlotsEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..081842250078e9037016afcf0c4faab9db9ada54
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/server/ServerChangeMaxPlayerSlotsEvent.java
@@ -0,0 +1,81 @@
+package io.papermc.paper.event.server;
+
+import com.google.common.base.Preconditions;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.server.ServerEvent;
+import org.jetbrains.annotations.Range;
+import org.jspecify.annotations.NullMarked;
+
+/**
+ * Called when the max player slots of the server are changed.
+ */
+@NullMarked
+public class ServerChangeMaxPlayerSlotsEvent extends ServerEvent implements Cancellable {
+
+    public static final HandlerList HANDLER_LIST = new HandlerList();
+    private boolean cancelled = false;
+
+    private final int oldMaxPlayers;
+    private int newMaxPlayers;
+
+    /**
+     * Create a new ServerChangeMaxPlayerSlotsEvent.
+     *
+     * @param oldMaxPlayers the old max player slots
+     * @param newMaxPlayers the new max player slots
+     */
+    public ServerChangeMaxPlayerSlotsEvent(int oldMaxPlayers, int newMaxPlayers) {
+        this.oldMaxPlayers = oldMaxPlayers;
+        this.newMaxPlayers = newMaxPlayers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    /**
+     * Get the old max player slots.
+     *
+     * @return the old max player slots
+     */
+    public int getOldMaxPlayers() {
+        return oldMaxPlayers;
+    }
+
+    /**
+     * Get the new max player slots.
+     *
+     * @return the new max player slots
+     */
+    public int getNewMaxPlayers() {
+        return newMaxPlayers;
+    }
+
+    /**
+     * Set the new max player slots.
+     *
+     * @param newMaxPlayers the new max player slots
+     * @throws IllegalArgumentException if newMaxPlayers is less than 0
+     */
+    public void setNewMaxPlayers(@Range(from = 0, to = Integer.MAX_VALUE) int newMaxPlayers) {
+        Preconditions.checkArgument(newMaxPlayers >= 0, "newMaxPlayers must be >= 0");
+
+        this.newMaxPlayers = newMaxPlayers;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+}
