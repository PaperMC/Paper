From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Trigary <trigary0@gmail.com>
Date: Tue, 14 Apr 2020 12:06:14 +0200
Subject: [PATCH] Player elytra boost API


diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index fb86055ba15b677b0d8969995713ec7f950cb30a..d03c0abada5389311d4d88c69bfb3ce8f981ac8a 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -3337,6 +3337,25 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     <T> @NotNull T getClientOption(com.destroystokyo.paper.@NotNull ClientOption<T> option);
     // Paper end - client option API
 
+    // Paper start - elytra boost API
+    /**
+     * Boost a Player that's {@link #isGliding()} using a {@link Firework}.
+     * If the creation of the entity is cancelled, no boosting is done.
+     * This method does not fire {@link com.destroystokyo.paper.event.player.PlayerElytraBoostEvent}.
+     *
+     * @param firework The {@link Material#FIREWORK_ROCKET} to boost the player with
+     * @return The {@link Firework} boosting the Player or null if the spawning of the entity was cancelled
+     * @throws IllegalArgumentException if {@link #isGliding()} is false
+     * or if the {@code firework} isn't a {@link Material#FIREWORK_ROCKET}
+     * @deprecated use {@link HumanEntity#fireworkBoost(ItemStack)} instead. Note that this method <b>does not</b>
+     * check if the player is gliding or not.
+     */
+    default @Nullable Firework boostElytra(final @NotNull ItemStack firework) {
+        com.google.common.base.Preconditions.checkState(this.isGliding(), "Player must be gliding");
+        return this.fireworkBoost(firework);
+    }
+    // Paper end - elytra boost API
+
     // Spigot start
     public class Spigot extends Entity.Spigot {
 
