From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: masmc05 <masmc05@gmail.com>
Date: Sun, 11 Aug 2024 03:01:52 +0300
Subject: [PATCH] Item serialization as json


diff --git a/src/main/java/io/papermc/paper/util/adapters/ItemStackAdapter.java b/src/main/java/io/papermc/paper/util/adapters/ItemStackAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..59a37114d4347a2bfec073380622f0e6dec88e01
--- /dev/null
+++ b/src/main/java/io/papermc/paper/util/adapters/ItemStackAdapter.java
@@ -0,0 +1,57 @@
+package io.papermc.paper.util.adapters;
+
+import com.google.gson.Gson;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.TypeAdapter;
+import com.google.gson.stream.JsonReader;
+import com.google.gson.stream.JsonWriter;
+import org.bukkit.inventory.ItemStack;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
+import java.io.IOException;
+
+/**
+ * A Gson TypeAdapter for ItemStacks.
+ */
+public final class ItemStackAdapter extends TypeAdapter<@Nullable ItemStack> {
+    private static final TypeAdapter<JsonElement> ELEMENT_ADAPTER = new Gson().getAdapter(JsonElement.class);
+    private static final ItemStackAdapter INSTANCE = new ItemStackAdapter();
+
+    /**
+     * Get the ItemStackAdapter instance.
+     * @return the ItemStackAdapter instance
+     */
+    public static @NonNull TypeAdapter<@Nullable ItemStack> itemStackAdapter() {
+        return INSTANCE;
+    }
+
+    private ItemStackAdapter() {
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void write(final @NonNull JsonWriter out, final @Nullable ItemStack value) throws IOException {
+        if (value == null || value.isEmpty()) {
+            out.nullValue();
+            return;
+        }
+        JsonObject jsonObject = value.serializeAsJson();
+        ELEMENT_ADAPTER.write(out, jsonObject);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public @NonNull ItemStack read(final @NonNull JsonReader in) throws IOException {
+        JsonElement element = ELEMENT_ADAPTER.read(in);
+        if (element.isJsonNull()) {
+            return ItemStack.empty();
+        } else {
+            return ItemStack.deserializeJson(element.getAsJsonObject());
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/inventory/ItemFactory.java b/src/main/java/org/bukkit/inventory/ItemFactory.java
index bd0e55562f1cabef3078573182e0cf9fbc844585..26eb6e69c73b7da8a622067484adce07511b68f6 100644
--- a/src/main/java/org/bukkit/inventory/ItemFactory.java
+++ b/src/main/java/org/bukkit/inventory/ItemFactory.java
@@ -149,6 +149,21 @@ public interface ItemFactory {
     @NotNull
     ItemStack createItemStack(@NotNull String input) throws IllegalArgumentException;
 
+    // Paper start - Item serialization to json
+    /**
+     * Creates an itemstack from a json object.
+     *
+     * This expects that the DataVersion was stored on the root of the Json Object, as saved from
+     * the {@link ItemStack#serializeAsJson()} API returned.
+     * @param data object representing an item in Json format
+     * @return ItemStack migrated to this version of Minecraft if needed.
+     * @throws IllegalArgumentException if the json object is not a valid item
+     * @see ItemStack#serializeAsJson()
+     * @see io.papermc.paper.util.adapters.ItemStackAdapter#itemStackAdapter()
+     */
+    @NotNull ItemStack createItemStack(@NotNull com.google.gson.JsonObject data) throws IllegalArgumentException;
+    // Paper end - Item serialization to json
+
     /**
      * Gets a {@link Material} representing the spawn egg for the provided
      * {@link EntityType}. <br>
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index b3abe3bde05d4a360e31e490bff8a859dc2bd4a6..9f37a3a25921d6002b00536d085a2c03aa8c8e80 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -472,6 +472,17 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         this.craftDelegate.removeEnchantments(); // Paper - delegate
     }
 
+    // Paper start - Item serialization to json
+    /**
+     * Creates a Map representation of this class.
+     * <p>
+     * This serialization may not be safe across version and is not recommended
+     *
+     * @return Map containing the current state of this class
+     * @see #serializeAsBytes() Compact and safe alternative
+     * @see #serializeAsJson() Human-readable and safe alternative
+     */
+    // Paper end - Item serialization to json
     @Override
     @NotNull
     @Utility
@@ -493,13 +504,19 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         return result;
     }
 
+    // Paper start - Item serialization to json
     /**
      * Required method for configuration serialization
+     * <p>
+     * This serialization may not be safe across version and is not recommended
      *
      * @param args map to deserialize
      * @return deserialized item stack
      * @see ConfigurationSerializable
+     * @see #deserializeBytes(byte[]) Compact and safe alternative
+     * @see #deserializeJson(com.google.gson.JsonObject) Human-readable and safe alternative
      */
+    // Paper end - Item serialization to json
     @NotNull
     public static ItemStack deserialize(@NotNull Map<String, Object> args) {
         int version = (args.containsKey("v")) ? ((Number) args.get("v")).intValue() : -1;
@@ -730,6 +747,35 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         return org.bukkit.Bukkit.getUnsafe().serializeItem(this);
     }
 
+    /**
+     * Deserializes this itemstack from a json object.
+     * This is a more human-readable format than {@link #deserializeBytes(byte[])}.
+     *
+     * This expects that the DataVersion was stored on the root of the JsonObject, as saved from
+     * the {@link #serializeAsJson()} API returned.
+     * @param object object representing an item in Json format
+     * @return ItemStack migrated to this version of Minecraft if needed.
+     * @throws IllegalArgumentException if the json object is not a valid item
+     * @see #serializeAsJson()
+     * @see io.papermc.paper.util.adapters.ItemStackAdapter#itemStackAdapter()
+     */
+    @NotNull
+    public static ItemStack deserializeJson(@NotNull com.google.gson.JsonObject object) throws IllegalArgumentException {
+        return org.bukkit.Bukkit.getItemFactory().createItemStack(object);
+    }
+
+    /**
+     * Serializes this itemstack to vanilla compatible json format. It is safe for data migrations as it will
+     * use the built in data converter instead of bukkits dangerous serialization system.
+     * @return json object representing this item.
+     * @see #deserializeJson(com.google.gson.JsonObject)
+     * @see io.papermc.paper.util.adapters.ItemStackAdapter#itemStackAdapter()
+     */
+    @NotNull
+    public com.google.gson.JsonObject serializeAsJson() {
+        return this.craftDelegate.serializeAsJson();
+    }
+
     /**
      * Gets the Display name as seen in the Client.
      * Currently the server only supports the English language. To override this,
