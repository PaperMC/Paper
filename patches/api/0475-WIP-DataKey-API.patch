From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Sun, 28 Apr 2024 19:53:06 -0400
Subject: [PATCH] WIP DataKey API


diff --git a/src/main/java/io/papermc/paper/datakey/DataComponentType.java b/src/main/java/io/papermc/paper/datakey/DataComponentType.java
new file mode 100644
index 0000000000000000000000000000000000000000..684400c5de46d79ef7506f7c8240e57b84252b94
--- /dev/null
+++ b/src/main/java/io/papermc/paper/datakey/DataComponentType.java
@@ -0,0 +1,17 @@
+package io.papermc.paper.datakey;
+
+import net.kyori.adventure.key.Key;
+import org.bukkit.Keyed;
+
+public interface DataComponentType extends Keyed {
+
+    Key key();
+
+    interface Valued<T> extends DataComponentType {
+
+    }
+
+    interface NonValued extends DataComponentType {
+
+    }
+}
diff --git a/src/main/java/io/papermc/paper/datakey/DataComponentTypes.java b/src/main/java/io/papermc/paper/datakey/DataComponentTypes.java
new file mode 100644
index 0000000000000000000000000000000000000000..978d4d3d28c3563d15f7566004103a898af19278
--- /dev/null
+++ b/src/main/java/io/papermc/paper/datakey/DataComponentTypes.java
@@ -0,0 +1,77 @@
+package io.papermc.paper.datakey;
+
+import io.papermc.paper.datakey.types.ItemLore;
+import io.papermc.paper.datakey.types.Unbreakable;
+import net.kyori.adventure.text.Component;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
+import org.bukkit.inventory.ItemRarity;
+
+public class DataComponentTypes {
+
+    public static final DataComponentType.Valued<Integer> MAX_STACK_SIZE = typed("max_stack_size");
+    public static final DataComponentType.Valued<Integer> MAX_DAMAGE = typed("max_damage");
+    public static final DataComponentType.Valued<Integer> DAMAGE = typed("damage");
+    public static final DataComponentType.Valued<Unbreakable> UNBREAKABLE = typed("unbreakable");
+    public static final DataComponentType.Valued<Component> CUSTOM_NAME = typed("custom_name");
+    public static final DataComponentType.Valued<Component> ITEM_NAME = typed("item_name");
+    public static final DataComponentType.Valued<ItemLore> LORE = typed("lore");
+    public static final DataComponentType.Valued<ItemRarity> RARITY = typed("rarity");
+    // enchantments
+    // can_place_on
+    // can_break
+    // attribute_modifiers
+    // custom_model_data
+    public static final DataComponentType.NonValued HIDE_ADDITIONAL_TOOLTIP = nonTyped("hide_additional_tooltip");
+    public static final DataComponentType.NonValued  HIDE_TOOLTIP = nonTyped("hide_tooltip");
+    public static final DataComponentType.Valued<Integer> REPAIR_COST = typed("repair_cost");
+    public static final DataComponentType.NonValued  CREATIVE_SLOT_LOCK = nonTyped("creative_slot_lock");
+    public static final DataComponentType.Valued<Boolean> ENCHANTMENT_GLINT_OVERRIDE = typed("enchantment_glint_override");
+    public static final DataComponentType.NonValued INTANGIBLE_PROJECTILE = nonTyped("intangible_projectile");
+    // food
+    public static final DataComponentType.NonValued FIRE_RESISTANT = nonTyped("fire_resistant");
+    // tool
+    // stored_enchantments
+    // dyed_color
+    // map_color
+    // map_id
+    // map_decorations
+    // map_post_processing
+    // charged_projectiles
+    // bundle_contents
+    // potion_contents
+    // suspicious_stew_effects
+    // writable_book_content
+    // written_book_content
+    // trim
+    // debug_stick_state
+    // entity_data
+    // bucket_entity_data
+    // block_entity_data
+    // instrument
+    public static final DataComponentType.Valued<Integer> OMINOUS_BOTTLE_AMPLIFIER = typed("ominous_bottle_amplifier");
+    // recipes
+    // lodestone_tracker
+    // firework_explosion
+    // fireworks
+    // profile
+    // note_block_sound
+    // banner_patterns
+    // base_color
+    // pot_decorations
+    // container
+    // block_state
+    // bees
+    // lock
+    // container_loot
+
+    @SuppressWarnings("unchecked")
+    private static DataComponentType.NonValued nonTyped(String name) {
+        return (DataComponentType.NonValued) Registry.DATA_COMPONENT_TYPE.get(NamespacedKey.minecraft(name));
+    }
+
+    @SuppressWarnings("unchecked")
+    private static <T> DataComponentType.Valued<T> typed(String name) {
+        return (DataComponentType.Valued<T>) Registry.DATA_COMPONENT_TYPE.get(NamespacedKey.minecraft(name));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/datakey/map/DataComponentMap.java b/src/main/java/io/papermc/paper/datakey/map/DataComponentMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..5ca7314eef78bb74b8da5c830d6eb63e14af3a02
--- /dev/null
+++ b/src/main/java/io/papermc/paper/datakey/map/DataComponentMap.java
@@ -0,0 +1,31 @@
+package io.papermc.paper.datakey.map;
+
+import io.papermc.paper.datakey.DataComponentType;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.Set;
+
+public interface DataComponentMap {
+
+    @Contract(value = "-> new", pure = true)
+    static @NotNull DataComponentMap empty() {
+        return DataComponentPatchMapBridge.Holder.bridge().empty();
+    }
+
+    @Contract(pure = true)
+    <T> @Nullable T get(DataComponentType.Valued<T> type);
+
+    @Contract(pure = true)
+    @Nullable Set<DataComponentType> keySet();
+
+    @Contract(pure = true)
+    boolean has(@NotNull DataComponentType type);
+
+    @Contract(value = "_, !null -> !null", pure = true)
+    default <T> @Nullable T getOrDefault(final DataComponentType.@Nullable Valued<? extends T> type, final @Nullable T fallback) {
+        final T object = this.get(type);
+        return object != null ? object : fallback;
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/datakey/map/DataComponentPatchMapBridge.java b/src/main/java/io/papermc/paper/datakey/map/DataComponentPatchMapBridge.java
new file mode 100644
index 0000000000000000000000000000000000000000..e0d825400f459a1aea44a7717286df7410bbbc0c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/datakey/map/DataComponentPatchMapBridge.java
@@ -0,0 +1,30 @@
+package io.papermc.paper.datakey.map;
+
+import java.util.Optional;
+import net.kyori.adventure.util.Services;
+import org.bukkit.Material;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Internal
+public interface DataComponentPatchMapBridge {
+
+    PatchedDataComponentMap of(DataComponentMap keyMap);
+
+    DataComponentMap empty();
+
+    DataComponentMap fromItem(Material material);
+
+    PatchedDataComponentMap fromItemMeta(Material material, ItemMeta itemMeta);
+
+    ItemMeta toItemMeta(Material material, PatchedDataComponentMap dataKeyMap);
+
+    @ApiStatus.Internal
+    final class Holder {
+        private static final Optional<DataComponentPatchMapBridge> BRIDGE = Services.service(DataComponentPatchMapBridge.class);
+
+        public static DataComponentPatchMapBridge bridge() {
+            return BRIDGE.orElseThrow();
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/datakey/map/PatchedDataComponentMap.java b/src/main/java/io/papermc/paper/datakey/map/PatchedDataComponentMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..adc0fc866fe04063c1f4a6c0bb98e416f14f8d06
--- /dev/null
+++ b/src/main/java/io/papermc/paper/datakey/map/PatchedDataComponentMap.java
@@ -0,0 +1,57 @@
+package io.papermc.paper.datakey.map;
+
+import io.papermc.paper.datakey.DataComponentType;
+import io.papermc.paper.datakey.patch.DataKeyMapPatch;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public interface PatchedDataComponentMap extends DataComponentMap {
+
+    static PatchedDataComponentMap empty() {
+        return DataComponentPatchMapBridge.Holder.bridge().of(DataComponentPatchMapBridge.Holder.bridge().empty());
+    }
+
+    static PatchedDataComponentMap of(DataComponentMap map) {
+        return DataComponentPatchMapBridge.Holder.bridge().of(map);
+    }
+
+    /**
+     * Sets this data component type to be present with a value in this map.
+     * <p>
+     * Note: supplying null will act similarly to {@link PatchedDataComponentMap#unset(DataComponentType)}
+     *
+     * @param type component type
+     * @param value set value
+     * @param <T> type
+     */
+    <T> void set(DataComponentType.Valued<T> type, @Nullable T value);
+
+    /**
+     * Sets this data component type to be present in this map.
+     *
+     * @param type type
+     */
+    void set(@NotNull DataComponentType.NonValued type);
+
+    /**
+     * Unsets the value from this map.
+     *
+     * @param type data component type
+     */
+    void unset(@NotNull DataComponentType type);
+
+    /**
+     * Resets the value of this component to be the default value as
+     * supplied in the base map of this patched map.
+     *
+     * @param type data component type to reset
+     */
+    void reset(@NotNull DataComponentType type);
+
+    @NotNull
+    DataKeyMapPatch asPatch();
+
+    void applyPatch(@NotNull DataKeyMapPatch patch);
+
+    PatchedDataComponentMap copy();
+}
diff --git a/src/main/java/io/papermc/paper/datakey/map/PatchedDataComponentMapHolder.java b/src/main/java/io/papermc/paper/datakey/map/PatchedDataComponentMapHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..57c8452de74e33cdd0f234c08b3b769a1c0c70a4
--- /dev/null
+++ b/src/main/java/io/papermc/paper/datakey/map/PatchedDataComponentMapHolder.java
@@ -0,0 +1,30 @@
+package io.papermc.paper.datakey.map;
+
+import io.papermc.paper.datakey.DataComponentType;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface PatchedDataComponentMapHolder {
+
+    @NotNull PatchedDataComponentMap components();
+
+    default <T> T getData(final DataComponentType.@NotNull Valued<T> dataKey) {
+        return this.components().get(dataKey);
+    }
+
+    default <T> void setData(final DataComponentType.@NotNull Valued<T> dataKey, final @Nullable T value) {
+        this.components().set(dataKey, value);
+    }
+
+    default void setData(final DataComponentType.@NotNull NonValued dataKey) {
+        this.components().set(dataKey);
+    }
+
+    default <T> void removeData(final @NotNull DataComponentType dataComponentType) {
+        this.components().unset(dataComponentType);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/datakey/patch/DataKeyMapPatch.java b/src/main/java/io/papermc/paper/datakey/patch/DataKeyMapPatch.java
new file mode 100644
index 0000000000000000000000000000000000000000..325a597b8d3e0c574b7bc80b7c9d0deeb3b28037
--- /dev/null
+++ b/src/main/java/io/papermc/paper/datakey/patch/DataKeyMapPatch.java
@@ -0,0 +1,5 @@
+package io.papermc.paper.datakey.patch;
+
+// TODO: Do we want this?
+public interface DataKeyMapPatch {
+}
diff --git a/src/main/java/io/papermc/paper/datakey/types/AbstractShownInTooltip.java b/src/main/java/io/papermc/paper/datakey/types/AbstractShownInTooltip.java
new file mode 100644
index 0000000000000000000000000000000000000000..7fe764cde13fcac1f3ceadd55bbb84a6692d866a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/datakey/types/AbstractShownInTooltip.java
@@ -0,0 +1,11 @@
+package io.papermc.paper.datakey.types;
+
+import org.jetbrains.annotations.Contract;
+
+public interface AbstractShownInTooltip<T> {
+    @Contract(pure = true)
+    boolean showInTooltip();
+
+    @Contract(value = "_ -> new", pure = true)
+    T showInTooltip(boolean showInTooltip);
+}
diff --git a/src/main/java/io/papermc/paper/datakey/types/ComponentTypesBridge.java b/src/main/java/io/papermc/paper/datakey/types/ComponentTypesBridge.java
new file mode 100644
index 0000000000000000000000000000000000000000..60a49ecb5788de79d3a130fd0ddd7c4c56855553
--- /dev/null
+++ b/src/main/java/io/papermc/paper/datakey/types/ComponentTypesBridge.java
@@ -0,0 +1,22 @@
+package io.papermc.paper.datakey.types;
+
+import java.util.Optional;
+import net.kyori.adventure.util.Services;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Internal
+public interface ComponentTypesBridge {
+
+    Unbreakable.Builder unbreakable();
+
+    ItemLore.Builder lore();
+
+    @ApiStatus.Internal
+    final class Holder {
+        private static final Optional<ComponentTypesBridge> BRIDGE = Services.service(ComponentTypesBridge.class);
+
+        public static ComponentTypesBridge bridge() {
+            return BRIDGE.orElseThrow();
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/datakey/types/ItemLore.java b/src/main/java/io/papermc/paper/datakey/types/ItemLore.java
new file mode 100644
index 0000000000000000000000000000000000000000..a395f5f3fbd9ffe4cb7fdfa4d60ace937b23bbb4
--- /dev/null
+++ b/src/main/java/io/papermc/paper/datakey/types/ItemLore.java
@@ -0,0 +1,40 @@
+package io.papermc.paper.datakey.types;
+
+import java.util.List;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.ComponentLike;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+@ApiStatus.NonExtendable
+public interface ItemLore {
+
+    @Contract(value = "-> new", pure = true)
+    static ItemLore.Builder lore() {
+        return ComponentTypesBridge.Holder.bridge().lore();
+    }
+
+    @Contract(value = "_ -> new", pure = true)
+    static ItemLore lore(final List<? extends ComponentLike> lore) {
+        return lore().lore(lore).build();
+    }
+
+    @Contract(pure = true)
+    @NotNull @Unmodifiable List<Component> lines();
+
+    @Contract(pure = true)
+    @NotNull @Unmodifiable List<Component> styledLines();
+
+    @ApiStatus.NonExtendable
+    interface Builder {
+
+        @Contract(value = "_ -> this", mutates = "this")
+        Builder lore(List<? extends ComponentLike> lore);
+
+        @Contract(pure = true, value = "-> new")
+        @NotNull ItemLore build();
+
+    }
+}
diff --git a/src/main/java/io/papermc/paper/datakey/types/Unbreakable.java b/src/main/java/io/papermc/paper/datakey/types/Unbreakable.java
new file mode 100644
index 0000000000000000000000000000000000000000..1f366f4ef4ba81ffef95619376de0b25694b3ac8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/datakey/types/Unbreakable.java
@@ -0,0 +1,30 @@
+package io.papermc.paper.datakey.types;
+
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.NonExtendable
+public interface Unbreakable extends AbstractShownInTooltip<Unbreakable> {
+
+    @Contract(value = "-> new", pure = true)
+    static Unbreakable.@NotNull Builder unbreakable() {
+        return ComponentTypesBridge.Holder.bridge().unbreakable();
+    }
+
+    @Contract(value = "_ -> new", pure = true)
+    static @NotNull Unbreakable unbreakable(final boolean showInTooltip) {
+        return unbreakable().showInTooltip(showInTooltip).build();
+    }
+
+    @ApiStatus.NonExtendable
+    interface Builder {
+
+        @Contract(value = "_ -> this", mutates = "this")
+        Builder showInTooltip(boolean showInTooltip);
+
+        @Contract(value = "-> new", pure = true)
+        @NotNull Unbreakable build();
+
+    }
+}
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 82d009c0bbe4b3026a535e02d6e0ed20c7bd525d..2e829272171761da93c8d44d3c04e23e3c25516a 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -128,7 +128,7 @@ import org.jetbrains.annotations.Nullable;
 @SuppressWarnings({"DeprecatedIsStillUsed", "deprecation"}) // Paper
 public enum Material implements Keyed, Translatable, net.kyori.adventure.translation.Translatable { // Paper
     //<editor-fold desc="Materials" defaultstate="collapsed">
-    AIR(9648, 0),
+    AIR(9648, 64), // Paper - air technically stacks to 64
     STONE(22948),
     GRANITE(21091),
     POLISHED_GRANITE(5477),
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index 542c0516e19b6177ff8007ca6f8955dc9082da95..982342c10bc4e9e228d5281ffd0828707fcd6534 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -317,6 +317,8 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
             return StreamSupport.stream(this.spliterator(), false);
         }
     };
+
+    Registry<io.papermc.paper.datakey.DataComponentType> DATA_COMPONENT_TYPE = Objects.requireNonNull(Bukkit.getRegistry(io.papermc.paper.datakey.DataComponentType.class), "No registry present for DataComponentType<?>. This is a bug.");
     // Paper end
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/ItemFactory.java b/src/main/java/org/bukkit/inventory/ItemFactory.java
index 98a970a6582dca22e719a31559c7becea4725cb2..84708afee2316108babbd64c9c66714646cc7546 100644
--- a/src/main/java/org/bukkit/inventory/ItemFactory.java
+++ b/src/main/java/org/bukkit/inventory/ItemFactory.java
@@ -162,6 +162,7 @@ public interface ItemFactory {
      */
     @ApiStatus.Internal
     @NotNull
+    @Deprecated // Paper - This seems to be flawed-- this is not good anymore
     Material updateMaterial(@NotNull final ItemMeta meta, @NotNull final Material material) throws IllegalArgumentException;
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 84a7bf0936d35bf42b5ed038d295d5c31740f472..c0c6f7dace959b5726fd7000024725c5e7229ccc 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -1,7 +1,6 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
-import com.google.common.collect.ImmutableMap;
 import java.util.LinkedHashMap;
 import java.util.List; // Paper
 import java.util.Map;
@@ -25,11 +24,11 @@ import org.jetbrains.annotations.Nullable;
  * use this class to encapsulate Materials for which {@link Material#isItem()}
  * returns false.</b>
  */
-public class ItemStack implements Cloneable, ConfigurationSerializable, Translatable, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowItem>, net.kyori.adventure.translation.Translatable { // Paper
+public class ItemStack implements Cloneable, ConfigurationSerializable, Translatable, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowItem>, net.kyori.adventure.translation.Translatable, io.papermc.paper.datakey.map.PatchedDataComponentMapHolder { // Paper
     private Material type = Material.AIR;
     private int amount = 0;
     private MaterialData data = null;
-    private ItemMeta meta;
+    private io.papermc.paper.datakey.map.PatchedDataComponentMap dataKeyMap; // Paper
 
     @Utility
     protected ItemStack() {}
@@ -86,6 +85,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         Preconditions.checkArgument(type != null, "Material cannot be null");
         this.type = type;
         this.amount = amount;
+        this.dataKeyMap = io.papermc.paper.datakey.map.DataComponentPatchMapBridge.Holder.bridge().of(io.papermc.paper.datakey.map.DataComponentPatchMapBridge.Holder.bridge().fromItem(type)); // Paper
         if (damage != 0) {
             setDurability(damage);
         }
@@ -148,10 +148,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
     @Deprecated // Paper
     public void setType(@NotNull Material type) {
         Preconditions.checkArgument(type != null, "Material cannot be null");
+        this.dataKeyMap = io.papermc.paper.datakey.map.DataComponentPatchMapBridge.Holder.bridge().fromItemMeta(type, Bukkit.getItemFactory().asMetaFor(this.getItemMeta(), type)); // Paper - update type first too, we need the old context to resolve the meta from the type
         this.type = type;
-        if (this.meta != null) {
-            this.meta = Bukkit.getItemFactory().asMetaFor(meta, type);
-        }
         if (type.isLegacy()) {
             createData((byte) 0);
         } else {
@@ -275,6 +273,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      */
     @Utility
     public int getMaxStackSize() {
+        ItemMeta meta = getItemMeta();
         if (meta != null && meta.hasMaxStackSize()) {
             return meta.getMaxStackSize();
         }
@@ -335,9 +334,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         try {
             ItemStack itemStack = (ItemStack) super.clone();
 
-            if (this.meta != null) {
-                itemStack.meta = this.meta.clone();
-            }
+            itemStack.dataKeyMap =  this.components().copy(); // Paper
 
             if (this.data != null) {
                 itemStack.data = this.data.clone();
@@ -357,7 +354,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         hash = hash * 31 + getType().hashCode();
         hash = hash * 31 + getAmount();
         hash = hash * 31 + (getDurability() & 0xffff);
-        hash = hash * 31 + (hasItemMeta() ? (meta == null ? getItemMeta().hashCode() : meta.hashCode()) : 0);
+        hash = hash * 31 + dataKeyMap.hashCode(); // Paper
 
         return hash;
     }
@@ -369,7 +366,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      * @return True if this has the given enchantment
      */
     public boolean containsEnchantment(@NotNull Enchantment ench) {
-        return meta == null ? false : meta.hasEnchant(ench);
+        return this.getItemMeta().hasEnchant(ench); // Paper
     }
 
     /**
@@ -379,7 +376,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      * @return Level of the enchantment, or 0
      */
     public int getEnchantmentLevel(@NotNull Enchantment ench) {
-        return meta == null ? 0 : meta.getEnchantLevel(ench);
+        return this.getItemMeta().getEnchantLevel(ench); // Paper
     }
 
     /**
@@ -389,7 +386,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      */
     @NotNull
     public Map<Enchantment, Integer> getEnchantments() {
-        return meta == null ? ImmutableMap.<Enchantment, Integer>of() : meta.getEnchants();
+        return this.getItemMeta().getEnchants(); // Paper
     }
 
     /**
@@ -465,10 +462,11 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      * @param level Level of the enchantment
      */
     public void addUnsafeEnchantment(@NotNull Enchantment ench, int level) {
-        ItemMeta itemMeta = (meta == null ? meta = Bukkit.getItemFactory().getItemMeta(type) : meta);
+        editMeta((itemMeta) -> { // Paper
         if (itemMeta != null) {
             itemMeta.addEnchant(ench, level, true);
         }
+        }); // Paper
     }
 
     /**
@@ -480,10 +478,10 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      */
     public int removeEnchantment(@NotNull Enchantment ench) {
         int level = getEnchantmentLevel(ench);
-        if (level == 0 || meta == null) {
+        if (level == 0) { // Paper
             return level;
         }
-        meta.removeEnchant(ench);
+        editMeta((itemMeta) -> itemMeta.removeEnchant(ench)); // Paper
         return level;
     }
 
@@ -491,11 +489,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      * Removes all enchantments on this ItemStack.
      */
     public void removeEnchantments() {
-        if (meta == null) {
-            return;
-        }
-
-        meta.removeEnchantments();
+        editMeta(ItemMeta::removeEnchantments); // Paper
     }
 
     @Override
@@ -647,7 +641,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      */
     @UndefinedNullability // Paper
     public ItemMeta getItemMeta() {
-        return this.meta == null ? Bukkit.getItemFactory().getItemMeta(this.type) : this.meta.clone();
+        return io.papermc.paper.datakey.map.DataComponentPatchMapBridge.Holder.bridge().toItemMeta(this.type, this.components());
     }
 
     /**
@@ -656,7 +650,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      * @return Returns true if some meta data has been set for this item
      */
     public boolean hasItemMeta() {
-        return !Bukkit.getItemFactory().equals(meta, null);
+        return true; // Paper - every item now has meta!
     }
 
     /**
@@ -677,22 +671,13 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      */
     private boolean setItemMeta0(@Nullable ItemMeta itemMeta, @NotNull Material material) {
         if (itemMeta == null) {
-            this.meta = null;
+            this.dataKeyMap = io.papermc.paper.datakey.map.PatchedDataComponentMap.of(io.papermc.paper.datakey.map.DataComponentPatchMapBridge.Holder.bridge().fromItem(material));
             return true;
         }
         if (!Bukkit.getItemFactory().isApplicable(itemMeta, material)) {
             return false;
         }
-        this.meta = Bukkit.getItemFactory().asMetaFor(itemMeta, material);
-
-        Material newType = Bukkit.getItemFactory().updateMaterial(meta, material);
-        if (this.type != newType) {
-            this.type = newType;
-        }
-
-        if (this.meta == itemMeta) {
-            this.meta = itemMeta.clone();
-        }
+        this.dataKeyMap = io.papermc.paper.datakey.map.DataComponentPatchMapBridge.Holder.bridge().fromItemMeta(material, itemMeta);
 
         return true;
     }
@@ -1073,4 +1058,11 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         return Bukkit.getUnsafe().computeTooltipLines(this, tooltipContext, player);
     }
     // Paper end - expose itemstack tooltip lines
+    // Paper start
+    @NotNull
+    @Override
+    public io.papermc.paper.datakey.map.PatchedDataComponentMap components() {
+        return this.dataKeyMap;
+    }
+    // Paper end
 }
