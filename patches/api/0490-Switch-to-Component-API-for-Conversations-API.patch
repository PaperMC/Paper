From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: njsharpe <nelsonj.sharpe@gmail.com>
Date: Tue, 17 Sep 2024 17:51:52 -0400
Subject: [PATCH] Switch to Component API for Conversations API


diff --git a/src/main/java/org/bukkit/conversations/Conversation.java b/src/main/java/org/bukkit/conversations/Conversation.java
index bf2407c838bc20197802687c150d513f4e86ed2b..ea3ea0f17c904e1f585c55ffc920af64b6c8a21d 100644
--- a/src/main/java/org/bukkit/conversations/Conversation.java
+++ b/src/main/java/org/bukkit/conversations/Conversation.java
@@ -219,7 +219,11 @@ public class Conversation {
 
             // Echo the user's input
             if (localEchoEnabled) {
-                context.getForWhom().sendRawMessage(prefix.getPrefix(context) + input);
+                // Paper Start - Switch to Component API
+                net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer serializer = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection();
+                net.kyori.adventure.text.Component message = net.kyori.adventure.text.Component.join(net.kyori.adventure.text.JoinConfiguration.noSeparators(), prefix.prefix(context), net.kyori.adventure.text.Component.text(input));
+                context.getForWhom().sendRawMessage(serializer.serialize(message));
+                // Paper End - Switch to Component API
             }
 
             // Test for conversation abandonment based on input
@@ -287,7 +291,11 @@ public class Conversation {
         if (currentPrompt == null) {
             abandon(new ConversationAbandonedEvent(this));
         } else {
-            context.getForWhom().sendRawMessage(prefix.getPrefix(context) + currentPrompt.getPromptText(context));
+            // Paper Start - Switch to Component API
+            net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer serializer = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection();
+            net.kyori.adventure.text.Component message = net.kyori.adventure.text.Component.join(net.kyori.adventure.text.JoinConfiguration.noSeparators(), prefix.prefix(context), currentPrompt.promptText(context));
+            context.getForWhom().sendRawMessage(serializer.serialize(message));
+            // Paper End - Switch to Component API
             if (!currentPrompt.blocksForInput(context)) {
                 currentPrompt = currentPrompt.acceptInput(context, null);
                 outputNextPrompt();
diff --git a/src/main/java/org/bukkit/conversations/ConversationFactory.java b/src/main/java/org/bukkit/conversations/ConversationFactory.java
index 58009e1e7a9cbbba1b0db43cd81eddc19c710687..8a38da62cbb0a6dd118800ee87742a522eb28e39 100644
--- a/src/main/java/org/bukkit/conversations/ConversationFactory.java
+++ b/src/main/java/org/bukkit/conversations/ConversationFactory.java
@@ -27,7 +27,7 @@ public class ConversationFactory {
     protected ConversationPrefix prefix;
     protected Prompt firstPrompt;
     protected Map<Object, Object> initialSessionData;
-    protected String playerOnlyMessage;
+    protected net.kyori.adventure.text.Component playerOnlyMessage; // Paper - Switch to Component API
     protected List<ConversationCanceller> cancellers;
     protected List<ConversationAbandonedListener> abandonedListeners;
 
@@ -159,19 +159,40 @@ public class ConversationFactory {
         return this;
     }
 
+    // Paper Start - Switch to Component API
     /**
      * Prevents this factory from creating a conversation for non-player
      * {@link Conversable} objects.
      *
+     * @deprecated for preferred use as {@link #thatExcludesNonPlayersWithMessage(net.kyori.adventure.text.Component)}
+     *
      * @param playerOnlyMessage The message to return to a non-play in lieu of
      *     starting a conversation.
      * @return This object.
      */
     @NotNull
+    @Deprecated
     public ConversationFactory thatExcludesNonPlayersWithMessage(@Nullable String playerOnlyMessage) {
+        net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer serializer = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection();
+        this.playerOnlyMessage = playerOnlyMessage == null ? null : serializer.deserialize(playerOnlyMessage);
+        return this;
+    }
+
+    /**
+     * Prevents this factory from creating a conversation for non-player
+     * {@link Conversable} objects.
+     *
+     * @param playerOnlyMessage The message to return to a non-play in lieu of
+     *     starting a conversation.
+     * @return This object.
+     */
+    @NotNull
+    @Deprecated
+    public ConversationFactory thatExcludesNonPlayersWithMessage(@Nullable net.kyori.adventure.text.Component playerOnlyMessage) {
         this.playerOnlyMessage = playerOnlyMessage;
         return this;
     }
+    // Paper End - Switch to Component API
 
     /**
      * Adds a {@link ConversationAbandonedListener} to all conversations
@@ -225,11 +246,20 @@ public class ConversationFactory {
 
     private class NotPlayerMessagePrompt extends MessagePrompt {
 
-        @Override
+        // Paper Start - Switch to Component API
         @NotNull
+        @Override
         public String getPromptText(@NotNull ConversationContext context) {
+            net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer serializer = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection();
+            return serializer.serialize(playerOnlyMessage);
+        }
+
+        @NotNull
+        @Override
+        public net.kyori.adventure.text.Component promptText(@NotNull ConversationContext context) {
             return playerOnlyMessage;
         }
+        // Paper End - Switch to Component API
 
         @Nullable
         @Override
diff --git a/src/main/java/org/bukkit/conversations/ConversationPrefix.java b/src/main/java/org/bukkit/conversations/ConversationPrefix.java
index 0c65f3365cab48109e2f6a1485fcf8ebcf4137a8..722028c39c83668df191c55ca372ec3bb4df8bb7 100644
--- a/src/main/java/org/bukkit/conversations/ConversationPrefix.java
+++ b/src/main/java/org/bukkit/conversations/ConversationPrefix.java
@@ -8,13 +8,26 @@ import org.jetbrains.annotations.NotNull;
  * the plugin name or conversation status as the conversation evolves.
  */
 public interface ConversationPrefix {
-
+    // Paper Start - Switch to Component API
     /**
      * Gets the prefix to use before each message to the player.
      *
+     * @deprecated for preferred use as {@link #prefix(ConversationContext)}
+     *
      * @param context Context information about the conversation.
      * @return The prefix text.
      */
     @NotNull
+    @Deprecated
     String getPrefix(@NotNull ConversationContext context);
+
+    /**
+     * Gets the prefix to use before each message to the player.
+     *
+     * @param context Context information about the conversation.
+     * @return The prefix component.
+     */
+    @NotNull
+    net.kyori.adventure.text.Component prefix(@NotNull ConversationContext context);
+    // Paper End - Switch to Component API
 }
diff --git a/src/main/java/org/bukkit/conversations/NullConversationPrefix.java b/src/main/java/org/bukkit/conversations/NullConversationPrefix.java
index 6ee8ebb1e56080ee91fcdaa49a5b8fcbef675be7..c06fff5bba2dcb179ccec2d1d011af97467bdec0 100644
--- a/src/main/java/org/bukkit/conversations/NullConversationPrefix.java
+++ b/src/main/java/org/bukkit/conversations/NullConversationPrefix.java
@@ -7,16 +7,32 @@ import org.jetbrains.annotations.NotNull;
  * displays nothing in front of conversation output.
  */
 public class NullConversationPrefix implements ConversationPrefix {
-
+    // Paper Start - Switch to Component API
     /**
      * Prepends each conversation message with an empty string.
      *
+     * @deprecated for preferred use as {@link #prefix(ConversationContext)}
+     *
      * @param context Context information about the conversation.
      * @return An empty string.
      */
-    @Override
     @NotNull
+    @Override
+    @Deprecated
     public String getPrefix(@NotNull ConversationContext context) {
         return "";
     }
+
+    /**
+     * Prepends each conversation message with an empty string.
+     *
+     * @param context Context information about the conversation.
+     * @return An empty text component.
+     */
+    @NotNull
+    @Override
+    public net.kyori.adventure.text.Component prefix(@NotNull ConversationContext context) {
+        return net.kyori.adventure.text.Component.text("");
+    }
+    // Paper End - Switch to Component API
 }
diff --git a/src/main/java/org/bukkit/conversations/NumericPrompt.java b/src/main/java/org/bukkit/conversations/NumericPrompt.java
index 67134fa384d8f2d45c7f9a4d1d9045c14ec803ee..5b4afd47776b4fda61b4c264ab8543639d162035 100644
--- a/src/main/java/org/bukkit/conversations/NumericPrompt.java
+++ b/src/main/java/org/bukkit/conversations/NumericPrompt.java
@@ -15,7 +15,7 @@ public abstract class NumericPrompt extends ValidatingPrompt {
 
     @Override
     protected boolean isInputValid(@NotNull ConversationContext context, @NotNull String input) {
-        return NumberUtils.isNumber(input) && isNumberValid(context, NumberUtils.createNumber(input));
+        return NumberUtils.isCreatable(input) && isNumberValid(context, NumberUtils.createNumber(input)); // Paper - Remove deprecated functionality
     }
 
     /**
@@ -51,16 +51,44 @@ public abstract class NumericPrompt extends ValidatingPrompt {
     @Nullable
     protected abstract Prompt acceptValidatedInput(@NotNull ConversationContext context, @NotNull Number input);
 
+    // Paper Start - Switch to Component API
     @Nullable
     @Override
+    @Deprecated
     protected String getFailedValidationText(@NotNull ConversationContext context, @NotNull String invalidInput) {
-        if (NumberUtils.isNumber(invalidInput)) {
+        if (NumberUtils.isCreatable(invalidInput)) { // Paper - Remove deprecated functionality
             return getFailedValidationText(context, NumberUtils.createNumber(invalidInput));
         } else {
             return getInputNotNumericText(context, invalidInput);
         }
     }
 
+    @Nullable
+    @Override
+    protected net.kyori.adventure.text.Component failedValidationText(@NotNull ConversationContext context, @NotNull String invalidInput) {
+        if (NumberUtils.isCreatable(invalidInput)) { // Paper - Remove deprecated functionality
+            return failedValidationText(context, NumberUtils.createNumber(invalidInput));
+        } else {
+            return inputNotNumericText(context, invalidInput);
+        }
+    }
+
+    /**
+     * Optionally override this method to display an additional message if the
+     * user enters an invalid number.
+     *
+     * @deprecated for preferred use as {@link #inputNotNumericText(ConversationContext, String)}
+     *
+     * @param context Context information about the conversation.
+     * @param invalidInput The invalid input provided by the user.
+     * @return A message explaining how to correct the input.
+     */
+    @Nullable
+    @Deprecated
+    protected String getInputNotNumericText(@NotNull ConversationContext context, @NotNull String invalidInput) { // Paper - Switch to Component API
+        return null;
+    }
+
     /**
      * Optionally override this method to display an additional message if the
      * user enters an invalid number.
@@ -70,7 +98,7 @@ public abstract class NumericPrompt extends ValidatingPrompt {
      * @return A message explaining how to correct the input.
      */
     @Nullable
-    protected String getInputNotNumericText(@NotNull ConversationContext context, @NotNull String invalidInput) {
+    protected net.kyori.adventure.text.Component inputNotNumericText(@NotNull ConversationContext context, @NotNull String invalidInput) {
         return null;
     }
 
@@ -78,12 +106,29 @@ public abstract class NumericPrompt extends ValidatingPrompt {
      * Optionally override this method to display an additional message if the
      * user enters an invalid numeric input.
      *
+     * @deprecated for preferred use as {@link #failedValidationText(ConversationContext, String)}
+     *
      * @param context Context information about the conversation.
      * @param invalidInput The invalid input provided by the user.
      * @return A message explaining how to correct the input.
      */
     @Nullable
+    @Deprecated
     protected String getFailedValidationText(@NotNull ConversationContext context, @NotNull Number invalidInput) {
         return null;
     }
+
+    /**
+     * Optionally override this method to display an additional message if the
+     * user enters an invalid numeric input.
+     *
+     * @param context Context information about the conversation.
+     * @param invalidInput The invalid input provided by the user.
+     * @return A message explaining how to correct the input.
+     */
+    @Nullable
+    protected net.kyori.adventure.text.Component failedValidationText(@NotNull ConversationContext context, @NotNull Number invalidInput) {
+        return null;
+    }
+    // Paper End - Switch to Component API
 }
diff --git a/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java b/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
index 5911944fe22d0f040a2b022e7aeb1acd4336763f..e4ccd6c1a6332f78603ce09bffb719fbe697ad44 100644
--- a/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
+++ b/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
@@ -1,6 +1,5 @@
 package org.bukkit.conversations;
 
-import org.bukkit.ChatColor;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
@@ -9,34 +8,54 @@ import org.jetbrains.annotations.NotNull;
  * that displays the plugin name in front of conversation output.
  */
 public class PluginNameConversationPrefix implements ConversationPrefix {
-
     protected String separator;
-    protected ChatColor prefixColor;
+    protected net.kyori.adventure.text.format.TextColor prefixColor;
     protected Plugin plugin;
 
-    private String cachedPrefix;
+    // Paper Start - Switch to Component API
+    private net.kyori.adventure.text.Component cachedPrefix;
 
     public PluginNameConversationPrefix(@NotNull Plugin plugin) {
-        this(plugin, " > ", ChatColor.LIGHT_PURPLE);
+        this(plugin, " > ", net.kyori.adventure.text.format.NamedTextColor.LIGHT_PURPLE);
     }
 
-    public PluginNameConversationPrefix(@NotNull Plugin plugin, @NotNull String separator, @NotNull ChatColor prefixColor) {
+    public PluginNameConversationPrefix(@NotNull Plugin plugin, @NotNull String separator, @NotNull net.kyori.adventure.text.format.TextColor prefixColor) {
         this.separator = separator;
         this.prefixColor = prefixColor;
         this.plugin = plugin;
 
-        cachedPrefix = prefixColor + plugin.getDescription().getName() + separator + ChatColor.WHITE;
+        cachedPrefix = net.kyori.adventure.text.Component.text()
+            .append(net.kyori.adventure.text.Component.text(plugin.getPluginMeta().getName() + separator, prefixColor))
+            .color(net.kyori.adventure.text.format.NamedTextColor.WHITE)
+            .build();
     }
 
     /**
      * Prepends each conversation message with the plugin name.
      *
+     * @deprecated for preferred use as {@link #prefix(ConversationContext)}
+     * 
      * @param context Context information about the conversation.
-     * @return An empty string.
+     * @return An empty text component.
      */
     @Override
     @NotNull
+    @Deprecated
     public String getPrefix(@NotNull ConversationContext context) {
+        net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer serializer = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection();
+        return serializer.serialize(cachedPrefix);
+    }
+
+    /**
+     * Prepends each conversation message with the plugin name.
+     *
+     * @param context Context information about the conversation.
+     * @return An empty text component.
+     */
+    @Override
+    @NotNull
+    public net.kyori.adventure.text.Component prefix(@NotNull ConversationContext context) {
         return cachedPrefix;
     }
+    // Paper End - Switch to Component API
 }
diff --git a/src/main/java/org/bukkit/conversations/Prompt.java b/src/main/java/org/bukkit/conversations/Prompt.java
index fcca208c0f31b41ab67323d0e77a8e3ecf9e78dd..f0e02c1fdb089e989b3f0be686022a2a5051b181 100644
--- a/src/main/java/org/bukkit/conversations/Prompt.java
+++ b/src/main/java/org/bukkit/conversations/Prompt.java
@@ -17,16 +17,31 @@ public interface Prompt extends Cloneable {
      */
     static final Prompt END_OF_CONVERSATION = null;
 
+    // Paper Start - Switch to Component API
     /**
      * Gets the text to display to the user when this prompt is first
      * presented.
      *
+     * @deprecated for preferred use as {@link #promptText(ConversationContext)}
+     *
      * @param context Context information about the conversation.
      * @return The text to display.
      */
     @NotNull
+    @Deprecated
     String getPromptText(@NotNull ConversationContext context);
 
+    /**
+     * Gets the text to display to the user when this prompt is first
+     * presented.
+     *
+     * @param context Context information about the conversation.
+     * @return The text component to display.
+     */
+    @NotNull
+    net.kyori.adventure.text.Component promptText(@NotNull ConversationContext context);
+    // Paper End - Switch to Component API
+
     /**
      * Checks to see if this prompt implementation should wait for user input
      * or immediately display the next prompt.
diff --git a/src/main/java/org/bukkit/conversations/ValidatingPrompt.java b/src/main/java/org/bukkit/conversations/ValidatingPrompt.java
index c57b6cb479fdaf135d8153605268b615b31325d7..055ae7abbaa5290642d123a643ada3507a8b442b 100644
--- a/src/main/java/org/bukkit/conversations/ValidatingPrompt.java
+++ b/src/main/java/org/bukkit/conversations/ValidatingPrompt.java
@@ -1,6 +1,5 @@
 package org.bukkit.conversations;
 
-import org.bukkit.ChatColor;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -29,10 +28,14 @@ public abstract class ValidatingPrompt implements Prompt {
         if (isInputValid(context, input)) {
             return acceptValidatedInput(context, input);
         } else {
-            String failPrompt = getFailedValidationText(context, input);
+            // Paper Start - Switch to Component API
+            net.kyori.adventure.text.Component failPrompt = failedValidationText(context, input);
             if (failPrompt != null) {
-                context.getForWhom().sendRawMessage(ChatColor.RED + failPrompt);
+                net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer serializer = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection();
+                failPrompt = failPrompt.color(net.kyori.adventure.text.format.NamedTextColor.RED);
+                context.getForWhom().sendRawMessage(serializer.serialize(failPrompt));
             }
+            // Paper End - Switch to Component API
             // Redisplay this prompt to the user to re-collect input
             return this;
         }
@@ -74,12 +77,28 @@ public abstract class ValidatingPrompt implements Prompt {
      * Optionally override this method to display an additional message if the
      * user enters an invalid input.
      *
+     * @deprecated for preferred use as {@link #failedValidationText(ConversationContext, String)}
+     *
      * @param context Context information about the conversation.
      * @param invalidInput The invalid input provided by the user.
      * @return A message explaining how to correct the input.
      */
     @Nullable
+    @Deprecated
     protected String getFailedValidationText(@NotNull ConversationContext context, @NotNull String invalidInput) {
         return null;
     }
+
+    /**
+     * Optionally override this method to display an additional message if the
+     * user enters an invalid input.
+     *
+     * @param context Context information about the conversation.
+     * @param invalidInput The invalid input provided by the user.
+     * @return A message explaining how to correct the input.
+     */
+    @Nullable
+    protected net.kyori.adventure.text.Component failedValidationText(@NotNull ConversationContext context, @NotNull String invalidInput) {
+        return null;
+    }
 }
