From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Thu, 20 Jun 2024 09:40:53 -0700
Subject: [PATCH] wip tags


diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/event/types/LifecycleEventTypeProvider.java b/src/main/java/io/papermc/paper/plugin/lifecycle/event/types/LifecycleEventTypeProvider.java
index 1588f6943a909bed053a952e650e043c44028c2d..ca4f7a7b59369f4c682d026d041a3d38884e430b 100644
--- a/src/main/java/io/papermc/paper/plugin/lifecycle/event/types/LifecycleEventTypeProvider.java
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/event/types/LifecycleEventTypeProvider.java
@@ -8,11 +8,15 @@ import org.jetbrains.annotations.ApiStatus;
 @ApiStatus.Internal
 interface LifecycleEventTypeProvider {
 
-    LifecycleEventTypeProvider PROVIDER = ServiceLoader.load(LifecycleEventTypeProvider.class)
-        .findFirst()
-        .orElseThrow();
+    static LifecycleEventTypeProvider provider() {
+        return ServiceLoader.load(LifecycleEventTypeProvider.class)
+            .findFirst()
+            .orElseThrow();
+    }
 
     <O extends LifecycleEventOwner, E extends LifecycleEvent> LifecycleEventType.Monitorable<O, E> monitor(String name, Class<? extends O> ownerType);
 
     <O extends LifecycleEventOwner, E extends LifecycleEvent> LifecycleEventType.Prioritizable<O, E> prioritized(String name, Class<? extends O> ownerType);
+
+    TagEventTypeProvider tagProvider();
 }
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/event/types/LifecycleEvents.java b/src/main/java/io/papermc/paper/plugin/lifecycle/event/types/LifecycleEvents.java
index 1fab48593c567fe05b085ac6e12dc22556cf0b92..0b852eba05114c9aae60b754210de71abe3367dc 100644
--- a/src/main/java/io/papermc/paper/plugin/lifecycle/event/types/LifecycleEvents.java
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/event/types/LifecycleEvents.java
@@ -6,6 +6,8 @@ import io.papermc.paper.plugin.lifecycle.event.LifecycleEvent;
 import io.papermc.paper.plugin.lifecycle.event.LifecycleEventManager;
 import io.papermc.paper.plugin.lifecycle.event.LifecycleEventOwner;
 import io.papermc.paper.plugin.lifecycle.event.registrar.ReloadableRegistrarEvent;
+import io.papermc.paper.tag.PostFlattenTagRegistrar;
+import io.papermc.paper.tag.PreFlattenTagRegistrar;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.ApiStatus;
 
@@ -24,35 +26,37 @@ public final class LifecycleEvents {
      */
     public static final LifecycleEventType.Prioritizable<LifecycleEventOwner, ReloadableRegistrarEvent<Commands>> COMMANDS = prioritized("commands", LifecycleEventOwner.class);
 
+    public static final TagEventTypeProvider TAGS = LifecycleEventTypeProvider.provider().tagProvider();
+
     //<editor-fold desc="helper methods" defaultstate="collapsed">
     @ApiStatus.Internal
-    private static <E extends LifecycleEvent> LifecycleEventType.Monitorable<Plugin, E> plugin(final String name) {
+    static <E extends LifecycleEvent> LifecycleEventType.Monitorable<Plugin, E> plugin(final String name) {
         return monitor(name, Plugin.class);
     }
 
     @ApiStatus.Internal
-    private static <E extends LifecycleEvent> LifecycleEventType.Prioritizable<Plugin, E> pluginPrioritized(final String name) {
+    static <E extends LifecycleEvent> LifecycleEventType.Prioritizable<Plugin, E> pluginPrioritized(final String name) {
         return prioritized(name, Plugin.class);
     }
 
     @ApiStatus.Internal
-    private static <E extends LifecycleEvent> LifecycleEventType.Monitorable<BootstrapContext, E> bootstrap(final String name) {
+    static <E extends LifecycleEvent> LifecycleEventType.Monitorable<BootstrapContext, E> bootstrap(final String name) {
         return monitor(name, BootstrapContext.class);
     }
 
     @ApiStatus.Internal
-    private static <E extends LifecycleEvent> LifecycleEventType.Prioritizable<BootstrapContext, E> bootstrapPrioritized(final String name) {
+    static <E extends LifecycleEvent> LifecycleEventType.Prioritizable<BootstrapContext, E> bootstrapPrioritized(final String name) {
         return prioritized(name, BootstrapContext.class);
     }
 
     @ApiStatus.Internal
-    private static <O extends LifecycleEventOwner, E extends LifecycleEvent, O2 extends O> LifecycleEventType.Monitorable<O, E> monitor(final String name, final Class<O2> ownerType) {
-        return LifecycleEventTypeProvider.PROVIDER.monitor(name, ownerType);
+    static <O extends LifecycleEventOwner, E extends LifecycleEvent, O2 extends O> LifecycleEventType.Monitorable<O, E> monitor(final String name, final Class<O2> ownerType) {
+        return LifecycleEventTypeProvider.provider().monitor(name, ownerType);
     }
 
     @ApiStatus.Internal
-    private static <O extends LifecycleEventOwner, E extends LifecycleEvent> LifecycleEventType.Prioritizable<O, E> prioritized(final String name, final Class<? extends O> ownerType) {
-        return LifecycleEventTypeProvider.PROVIDER.prioritized(name, ownerType);
+    static <O extends LifecycleEventOwner, E extends LifecycleEvent> LifecycleEventType.Prioritizable<O, E> prioritized(final String name, final Class<? extends O> ownerType) {
+        return LifecycleEventTypeProvider.provider().prioritized(name, ownerType);
     }
     //</editor-fold>
 
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/event/types/TagEventTypeProvider.java b/src/main/java/io/papermc/paper/plugin/lifecycle/event/types/TagEventTypeProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..96b1ce741f995b2edea8eeda5840d905f0f0f2d5
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/event/types/TagEventTypeProvider.java
@@ -0,0 +1,21 @@
+package io.papermc.paper.plugin.lifecycle.event.types;
+
+import io.papermc.paper.plugin.bootstrap.BootstrapContext;
+import io.papermc.paper.plugin.lifecycle.event.registrar.ReloadableRegistrarEvent;
+import io.papermc.paper.registry.RegistryKey;
+import io.papermc.paper.tag.PostFlattenTagRegistrar;
+import io.papermc.paper.tag.PreFlattenTagRegistrar;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface TagEventTypeProvider {
+
+    LifecycleEventType.Prioritizable<BootstrapContext, ReloadableRegistrarEvent<PreFlattenTagRegistrar>> preFlatten(RegistryKey<?> registryKey);
+
+    LifecycleEventType.Prioritizable<BootstrapContext, ReloadableRegistrarEvent<PostFlattenTagRegistrar>> postFlatten(RegistryKey<?> registryKey);
+
+    LifecycleEventType.Prioritizable<BootstrapContext, ReloadableRegistrarEvent<PreFlattenTagRegistrar>> commandFunctionsPreFlatten();
+
+    LifecycleEventType.Prioritizable<BootstrapContext, ReloadableRegistrarEvent<PostFlattenTagRegistrar>> commandFunctionsPostFlatten();
+}
diff --git a/src/main/java/io/papermc/paper/tag/PostFlattenTagRegistrar.java b/src/main/java/io/papermc/paper/tag/PostFlattenTagRegistrar.java
new file mode 100644
index 0000000000000000000000000000000000000000..16daac6e3a60c537b14034530d321c38bb29a060
--- /dev/null
+++ b/src/main/java/io/papermc/paper/tag/PostFlattenTagRegistrar.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.tag;
+
+import io.papermc.paper.plugin.lifecycle.event.registrar.Registrar;
+import java.util.Collection;
+import java.util.Map;
+import net.kyori.adventure.key.Key;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.Unmodifiable;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface PostFlattenTagRegistrar extends Registrar {
+
+    @Contract(value = "-> new", pure = true)
+    @Unmodifiable @NonNull Map<Key, Collection<Key>> getAllTags();
+
+    @Contract(pure = true)
+    boolean hasTag(@NonNull Key tagKey);
+
+    @Contract(value = "_ -> new", pure = true)
+    @Unmodifiable @NonNull Collection<Key> getTag(@NonNull Key tagKey);
+
+    @Contract(mutates = "this")
+    void addToTag(@NonNull Key tagKey, @NonNull Key first, @NonNull Key @NonNull ... rest);
+
+    @Contract(mutates = "this")
+    void addToTag(@NonNull Key tagKey, @NonNull Iterable<Key> entries);
+
+    @Contract(mutates = "this")
+    void setTag(@NonNull Key tagKey, @NonNull Collection<Key> entries);
+}
diff --git a/src/main/java/io/papermc/paper/tag/PreFlattenTagRegistrar.java b/src/main/java/io/papermc/paper/tag/PreFlattenTagRegistrar.java
new file mode 100644
index 0000000000000000000000000000000000000000..d294e2766879a08e91b39ff30bed3951e29ac6b7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/tag/PreFlattenTagRegistrar.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.tag;
+
+import io.papermc.paper.plugin.lifecycle.event.registrar.Registrar;
+import java.util.List;
+import java.util.Map;
+import net.kyori.adventure.key.Key;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.Unmodifiable;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface PreFlattenTagRegistrar extends Registrar {
+
+    @Contract(value = "-> new", pure = true)
+    @Unmodifiable @NonNull Map<Key, List<TagEntry>> getAllTags();
+
+    @Contract(pure = true)
+    boolean hasTag(@NonNull Key tagKey);
+
+    @Contract(value = "_ -> new", pure = true)
+    @Unmodifiable @NonNull List<TagEntry> getTag(@NonNull Key tagKey);
+
+    @Contract(mutates = "this")
+    void addToTag(@NonNull Key tagKey, @NonNull TagEntry first, @NonNull TagEntry @NonNull ... rest);
+
+    @Contract(mutates = "this")
+    void addToTag(@NonNull Key tagKey, @NonNull Iterable<TagEntry> entries);
+
+    @Contract(mutates = "this")
+    void setTag(@NonNull Key tagKey, @NonNull List<TagEntry> entries);
+}
diff --git a/src/main/java/io/papermc/paper/tag/TagEntry.java b/src/main/java/io/papermc/paper/tag/TagEntry.java
new file mode 100644
index 0000000000000000000000000000000000000000..26b664da5c1ae20cbdf2fd2d8a63d2341a07390e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/tag/TagEntry.java
@@ -0,0 +1,28 @@
+package io.papermc.paper.tag;
+
+import net.kyori.adventure.key.Key;
+import net.kyori.adventure.key.Keyed;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.Contract;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface TagEntry extends Keyed {
+
+    @Contract(value = "_, _ -> new", pure = true)
+    static @NonNull TagEntry valueEntry(final @NonNull Key entryKey, final boolean isRequired) {
+        return new TagEntryImpl(entryKey, false, isRequired);
+    }
+
+    @Contract(value = "_, _ -> new", pure = true)
+    static @NonNull TagEntry tagEntry(final @NonNull Key tagKey, final boolean isRequired) {
+        return new TagEntryImpl(tagKey, true, isRequired);
+    }
+
+    @Contract(pure = true)
+    boolean isTag();
+
+    @Contract(pure = true)
+    boolean isRequired();
+}
diff --git a/src/main/java/io/papermc/paper/tag/TagEntryImpl.java b/src/main/java/io/papermc/paper/tag/TagEntryImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..d0af34943398a2c6e15f413ac8550c55f0592073
--- /dev/null
+++ b/src/main/java/io/papermc/paper/tag/TagEntryImpl.java
@@ -0,0 +1,8 @@
+package io.papermc.paper.tag;
+
+import net.kyori.adventure.key.Key;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Internal
+record TagEntryImpl(Key key, boolean isTag, boolean isRequired) implements TagEntry {
+}
