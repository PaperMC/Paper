From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Thu, 27 May 2021 21:58:33 -0700
Subject: [PATCH] More PotionEffectType API


diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index 9a819b179ce3040e842be58a8ddceee2a14ffa59..132d375de164e6d8df61234def650154c67fc0df 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -319,6 +319,31 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      */
     @Deprecated(forRemoval = true)
     Registry<io.papermc.paper.world.structure.ConfiguredStructure> CONFIGURED_STRUCTURE = Objects.requireNonNull(io.papermc.paper.registry.RegistryAccess.registryAccess().getRegistry(io.papermc.paper.world.structure.ConfiguredStructure.class), "No registry present for ConfiguredStructure. This is a bug.");
+
+    /**
+     * Potion effect types.
+     *
+     * @see org.bukkit.potion.PotionEffectType
+     */
+    Registry<org.bukkit.potion.PotionEffectType> POTION_EFFECT_TYPE = new Registry<org.bukkit.potion.PotionEffectType>() {
+
+        @Nullable
+        @Override
+        public org.bukkit.potion.PotionEffectType get(@NotNull NamespacedKey key) {
+            return org.bukkit.potion.PotionEffectType.getByKey(key);
+        }
+
+        @NotNull
+        @Override
+        public Iterator<org.bukkit.potion.PotionEffectType> iterator() {
+            return java.util.Arrays.stream(org.bukkit.potion.PotionEffectType.values()).iterator();
+        }
+
+        @Override
+        public @NotNull Stream<org.bukkit.potion.PotionEffectType> stream() {
+            return StreamSupport.stream(this.spliterator(), false);
+        }
+    };
     // Paper end
     /**
      * Get the object by its key.
diff --git a/src/main/java/org/bukkit/potion/PotionEffectType.java b/src/main/java/org/bukkit/potion/PotionEffectType.java
index 42d893ce75a75fe46a4e52b17dc405f5b609ab86..10fa51d116b40450b51af9110d5637f3505ebf65 100644
--- a/src/main/java/org/bukkit/potion/PotionEffectType.java
+++ b/src/main/java/org/bukkit/potion/PotionEffectType.java
@@ -17,7 +17,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Represents a type of potion and its effect on an entity.
  */
-public abstract class PotionEffectType implements Keyed, Translatable {
+public abstract class PotionEffectType implements Keyed, Translatable, net.kyori.adventure.translation.Translatable { // Paper - implement Translatable
     private static final BiMap<Integer, PotionEffectType> ID_MAP = HashBiMap.create();
 
     /**
@@ -361,4 +361,57 @@ public abstract class PotionEffectType implements Keyed, Translatable {
     public static PotionEffectType[] values() {
         return Lists.newArrayList(Registry.EFFECT).toArray(new PotionEffectType[0]);
     }
+
+    // Paper start
+    /**
+     * Gets the effect attributes in an immutable map.
+     *
+     * @return the attribute map
+     */
+    public abstract @NotNull java.util.Map<org.bukkit.attribute.Attribute, org.bukkit.attribute.AttributeModifier> getEffectAttributes();
+
+    /**
+     * Gets the true modifier amount based on the effect amplifier.
+     *
+     * @param attribute the attribute
+     * @param effectAmplifier the effect amplifier (0 indexed)
+     * @return the modifier amount
+     * @throws IllegalArgumentException if the supplied attribute is not present in the map from {@link #getEffectAttributes()}
+     */
+    public abstract double getAttributeModifierAmount(@NotNull org.bukkit.attribute.Attribute attribute, int effectAmplifier);
+
+    /**
+     * Gets the category of this effect
+     *
+     * @return the category
+     */
+    public abstract @NotNull PotionEffectType.Category getEffectCategory();
+
+    /**
+     * Category of {@link PotionEffectType}s
+     */
+    public enum Category {
+
+        BENEFICIAL(net.kyori.adventure.text.format.NamedTextColor.BLUE),
+        HARMFUL(net.kyori.adventure.text.format.NamedTextColor.RED),
+        NEUTRAL(net.kyori.adventure.text.format.NamedTextColor.BLUE);
+
+        private final net.kyori.adventure.text.format.TextColor color;
+
+        Category(net.kyori.adventure.text.format.TextColor color) {
+            this.color = color;
+        }
+
+        /**
+         * Gets the text color used when displaying potions
+         * of this category.
+         *
+         * @return the text color
+         */
+        @NotNull
+        public net.kyori.adventure.text.format.TextColor getColor() {
+            return color;
+        }
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java b/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
index a613debb03f6440583f57dd1adb7bb1bebbd636b..718f216c9153a5f03b91ce1de9ee9574e867e32b 100644
--- a/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
+++ b/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
@@ -19,4 +19,41 @@ public abstract class PotionEffectTypeWrapper extends PotionEffectType {
     public PotionEffectType getType() {
         return this;
     }
+
+    @Override
+    public boolean isInstant() {
+        return getType().isInstant();
+    }
+
+    @NotNull
+    @Override
+    public org.bukkit.Color getColor() {
+        return getType().getColor();
+    }
+    // Paper start
+    @Override
+    public @NotNull org.bukkit.NamespacedKey getKey() {
+        return this.getType().getKey();
+    }
+
+    @Override
+    public @NotNull java.util.Map<org.bukkit.attribute.Attribute, org.bukkit.attribute.AttributeModifier> getEffectAttributes() {
+        return this.getType().getEffectAttributes();
+    }
+
+    @Override
+    public double getAttributeModifierAmount(@NotNull org.bukkit.attribute.Attribute attribute, int effectAmplifier) {
+        return this.getType().getAttributeModifierAmount(attribute, effectAmplifier);
+    }
+
+    @Override
+    public @NotNull PotionEffectType.Category getEffectCategory() {
+        return this.getType().getEffectCategory();
+    }
+
+    @Override
+    public @NotNull String translationKey() {
+        return this.getType().translationKey();
+    }
+    // Paper end
 }
