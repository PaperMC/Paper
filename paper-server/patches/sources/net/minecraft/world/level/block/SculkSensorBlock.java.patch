--- a/net/minecraft/world/level/block/SculkSensorBlock.java
+++ b/net/minecraft/world/level/block/SculkSensorBlock.java
@@ -102,6 +_,18 @@
             && level.getBlockEntity(pos) instanceof SculkSensorBlockEntity sculkSensorBlockEntity
             && level instanceof ServerLevel serverLevel
             && sculkSensorBlockEntity.getVibrationUser().canReceiveVibration(serverLevel, pos, GameEvent.STEP, GameEvent.Context.of(state))) {
+            // CraftBukkit start
+            org.bukkit.event.Cancellable cancellable;
+            if (entity instanceof net.minecraft.world.entity.player.Player player) {
+                cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent(player, org.bukkit.event.block.Action.PHYSICAL, pos, null, null, null);
+            } else {
+                cancellable = new org.bukkit.event.entity.EntityInteractEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(level, pos));
+                level.getCraftServer().getPluginManager().callEvent((org.bukkit.event.entity.EntityInteractEvent) cancellable);
+            }
+            if (cancellable.isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
             sculkSensorBlockEntity.getListener().forceScheduleVibration(serverLevel, GameEvent.STEP, GameEvent.Context.of(entity), entity.position());
         }
 
@@ -191,10 +_,17 @@
     }
 
     public static boolean canActivate(BlockState state) {
-        return getPhase(state) == SculkSensorPhase.INACTIVE;
+        return state.getBlock() instanceof SculkSensorBlock &&  getPhase(state) == SculkSensorPhase.INACTIVE; // Paper - Check for a valid type
     }
 
     public static void deactivate(Level level, BlockPos pos, BlockState state) {
+        // Paper start - Call BlockRedstoneEvent
+        int newCurrent = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(level, pos, state.getValue(POWER), 0).getNewCurrent();
+        if (newCurrent > 0) {
+            level.setBlock(pos, state.setValue(POWER, newCurrent), Block.UPDATE_ALL);
+            return;
+        }
+        // Paper end - Call BlockRedstoneEvent
         level.setBlock(pos, state.setValue(PHASE, SculkSensorPhase.COOLDOWN).setValue(POWER, 0), Block.UPDATE_ALL);
         level.scheduleTick(pos, state.getBlock(), 10);
         updateNeighbours(level, pos, state);
@@ -206,6 +_,12 @@
     }
 
     public void activate(@Nullable Entity entity, Level level, BlockPos pos, BlockState state, int power, int frequency) {
+        // Paper start - Call BlockRedstoneEvent
+        power = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(level, pos, state.getValue(POWER), power).getNewCurrent();
+        if (power == 0) {
+            return;
+        }
+        // Paper end - Call BlockRedstoneEvent
         level.setBlock(pos, state.setValue(PHASE, SculkSensorPhase.ACTIVE).setValue(POWER, power), Block.UPDATE_ALL);
         level.scheduleTick(pos, state.getBlock(), this.getActiveTicks());
         updateNeighbours(level, pos, state);
@@ -283,8 +_,16 @@
     @Override
     protected void spawnAfterBreak(BlockState state, ServerLevel level, BlockPos pos, ItemStack stack, boolean dropExperience) {
         super.spawnAfterBreak(state, level, pos, stack, dropExperience);
+        // CraftBukkit start - Delegate to getExpDrop
+    }
+
+    @Override
+    public int getExpDrop(BlockState state, ServerLevel level, BlockPos pos, ItemStack stack, boolean dropExperience) {
         if (dropExperience) {
-            this.tryDropExperience(level, pos, stack, ConstantInt.of(5));
+            return this.tryDropExperience(level, pos, stack, ConstantInt.of(5));
         }
+
+        return 0;
+        // CraftBukkit end
     }
 }
