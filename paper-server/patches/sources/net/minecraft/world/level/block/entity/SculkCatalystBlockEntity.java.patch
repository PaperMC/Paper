--- a/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
@@ -35,8 +_,18 @@
         this.catalystListener = new SculkCatalystBlockEntity.CatalystListener(blockState, new BlockPositionSource(pos));
     }
 
+    // Paper start - Fix NPE in SculkBloomEvent world access
+    @Override
+    public void setLevel(Level level) {
+        super.setLevel(level);
+        this.catalystListener.sculkSpreader.level = level;
+    }
+    // Paper end - Fix NPE in SculkBloomEvent world access
+
     public static void serverTick(Level level, BlockPos pos, BlockState state, SculkCatalystBlockEntity sculkCatalyst) {
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = sculkCatalyst.getBlockPos(); // CraftBukkit - SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
         sculkCatalyst.catalystListener.getSculkSpreader().updateCursors(level, pos, level.getRandom(), true);
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = null; // CraftBukkit
     }
 
     @Override
@@ -86,6 +_,13 @@
         public boolean handleGameEvent(ServerLevel level, Holder<GameEvent> gameEvent, GameEvent.Context context, Vec3 pos) {
             if (gameEvent.is(GameEvent.ENTITY_DIE) && context.sourceEntity() instanceof LivingEntity livingEntity) {
                 if (!livingEntity.wasExperienceConsumed()) {
+                    // Paper start - add game event events
+                    // TODO (future) add a sub event to capture more info about this happening, xp amount, amount to spread, etc.
+                    io.papermc.paper.event.ReceiveGameEvent blockEvent = net.minecraft.world.level.gameevent.vibrations.VibrationSystem.User.createBlockEvent(level, gameEvent, context, this.positionSource.getPosition(level).orElseThrow());
+                    if (!blockEvent.callEvent()) {
+                        return false;
+                    }
+                    // Paper end - add game event events
                     DamageSource lastDamageSource = livingEntity.getLastDamageSource();
                     int experienceReward = livingEntity.getExperienceReward(level, Optionull.map(lastDamageSource, DamageSource::getEntity));
                     if (livingEntity.shouldDropExperience() && experienceReward > 0) {
