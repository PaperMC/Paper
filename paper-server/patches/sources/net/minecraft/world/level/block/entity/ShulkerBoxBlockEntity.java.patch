--- a/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
@@ -49,6 +_,37 @@
     @Nullable
     private final DyeColor color;
 
+    // CraftBukkit start - add fields and methods
+    public List<org.bukkit.entity.HumanEntity> transaction = new java.util.ArrayList<>();
+    private int maxStack = MAX_STACK;
+    // public boolean opened; // Paper - replace with new Lidded API
+
+    public List<ItemStack> getContents() {
+        return this.itemStacks;
+    }
+
+    public void onOpen(org.bukkit.craftbukkit.entity.CraftHumanEntity player) {
+        this.transaction.add(player);
+    }
+
+    public void onClose(org.bukkit.craftbukkit.entity.CraftHumanEntity player) {
+        this.transaction.remove(player);
+    }
+
+    public List<org.bukkit.entity.HumanEntity> getViewers() {
+        return this.transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return this.maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        this.maxStack = size;
+    }
+    // CraftBukkit end
+
     public ShulkerBoxBlockEntity(@Nullable DyeColor color, BlockPos pos, BlockState blockState) {
         super(BlockEntityType.SHULKER_BOX, pos, blockState);
         this.color = color;
@@ -139,6 +_,7 @@
     @Override
     public boolean triggerEvent(int id, int type) {
         if (id == 1) {
+            if (apiLidMode != io.papermc.paper.block.LidMode.FORCED_CLOSED && apiLidMode != io.papermc.paper.block.LidMode.CLOSED_UNTIL_NOT_VIEWED) this.openCount = type; // Paper - Skip mutate when forced closed by lidded api
             this.openCount = type;
             if (type == 0) {
                 this.animationStatus = ShulkerBoxBlockEntity.AnimationStatus.CLOSING;
@@ -159,6 +_,71 @@
         level.updateNeighborsAt(pos, state.getBlock());
     }
 
+    // Paper start - add Improved Lidded API
+    private io.papermc.paper.block.LidMode apiLidMode = io.papermc.paper.block.LidMode.DEFAULT;
+
+    public void startForceLiddedLidOpen() {
+        this.openCount++;
+        this.level.blockEvent(this.worldPosition, this.getBlockState().getBlock(), 1, this.openCount);
+        if (this.openCount == 1) {
+            this.level.gameEvent(null, GameEvent.CONTAINER_OPEN, this.worldPosition);
+            this.level.playSound(null, this.worldPosition, SoundEvents.SHULKER_BOX_OPEN, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
+        }
+    }
+
+    public void stopForceLiddedLidOpen() {
+        this.openCount--;
+        this.level.blockEvent(this.worldPosition, this.getBlockState().getBlock(), 1, this.openCount);
+        if (this.openCount <= 0) {
+            this.level.gameEvent(null, GameEvent.CONTAINER_CLOSE, this.worldPosition);
+            this.level.playSound(null, this.worldPosition, SoundEvents.SHULKER_BOX_CLOSE, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
+        }
+        apiLidMode = io.papermc.paper.block.LidMode.DEFAULT;
+    }
+
+    public void startForceLiddedLidClose() {
+        if (this.getTrueLidState() == io.papermc.paper.block.LidState.OPEN) {
+            this.level.gameEvent(null, GameEvent.CONTAINER_CLOSE, this.worldPosition);
+            this.level.playSound(null, this.worldPosition, SoundEvents.SHULKER_BOX_CLOSE, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
+        }
+        this.level.blockEvent(this.worldPosition, this.getBlockState().getBlock(), 1, 0);
+    }
+
+    public void stopForceLiddedLidClose() {
+        if (this.getTrueLidState() == io.papermc.paper.block.LidState.OPEN) {
+            this.level.gameEvent(null, GameEvent.CONTAINER_OPEN, this.worldPosition);
+            this.level.playSound(null, this.worldPosition, SoundEvents.SHULKER_BOX_OPEN, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
+        }
+        this.level.blockEvent(this.worldPosition, this.getBlockState().getBlock(), 1, this.openCount);
+    }
+
+    public io.papermc.paper.block.LidMode getLidMode() {
+        return apiLidMode;
+    }
+
+    public void setLidMode(final io.papermc.paper.block.LidMode lidMode) {
+        this.apiLidMode = lidMode;
+    }
+
+    public io.papermc.paper.block.LidState getEffectiveLidState() {
+        return switch (apiLidMode) {
+            case OPEN_UNTIL_VIEWED, FORCED_OPEN -> io.papermc.paper.block.LidState.OPEN;
+            case CLOSED_UNTIL_NOT_VIEWED, FORCED_CLOSED -> io.papermc.paper.block.LidState.CLOSED;
+            default -> getTrueLidState();
+        };
+    }
+
+    public io.papermc.paper.block.LidState getTrueLidState() {
+        boolean virtualViewerPresent = (apiLidMode == io.papermc.paper.block.LidMode.FORCED_OPEN || apiLidMode == io.papermc.paper.block.LidMode.OPEN_UNTIL_VIEWED);
+        int trueOpenCount = this.openCount - (virtualViewerPresent ? 1 : 0);
+        // ensure trueOpenCount is never negative, throw
+        if (trueOpenCount < 0) {
+            throw new IllegalStateException("trueOpenCount is negative: " + trueOpenCount + " openCount: " + openCount + " virtualViewerPresent: " + virtualViewerPresent);
+        }
+        return trueOpenCount > 0 ? io.papermc.paper.block.LidState.OPEN : io.papermc.paper.block.LidState.CLOSED;
+    }
+    // Paper end - add Improved Lidded API
+
     @Override
     public void startOpen(Player player) {
         if (!this.remove && !player.isSpectator()) {
@@ -166,13 +_,36 @@
                 this.openCount = 0;
             }
 
+            // Paper start - add Improved Lidded API
+            if (this.openCount == 0) {
+                if (apiLidMode == io.papermc.paper.block.LidMode.CLOSED_UNTIL_NOT_VIEWED) {
+                    apiLidMode = io.papermc.paper.block.LidMode.DEFAULT;
+                    stopForceLiddedLidClose();
+                }
+            }
+            // Paper end - add Improved Lidded API
+
             this.openCount++;
+
+            // Paper start - replace with Improved Lidded API
+            // if (this.opened) return; // CraftBukkit - only animate if the ShulkerBox hasn't been forced open already by an API call
+            if (this.apiLidMode == io.papermc.paper.block.LidMode.FORCED_CLOSED || this.apiLidMode == io.papermc.paper.block.LidMode.CLOSED_UNTIL_NOT_VIEWED) return;
+            // Paper end - replace with Improved Lidded API
+
             this.level.blockEvent(this.worldPosition, this.getBlockState().getBlock(), 1, this.openCount);
             if (this.openCount == 1) {
                 this.level.gameEvent(player, GameEvent.CONTAINER_OPEN, this.worldPosition);
                 this.level
                     .playSound(null, this.worldPosition, SoundEvents.SHULKER_BOX_OPEN, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
             }
+
+            // Paper start - add Improved Lidded API
+            if (apiLidMode == io.papermc.paper.block.LidMode.OPEN_UNTIL_VIEWED) {
+            // reset to default
+            apiLidMode = io.papermc.paper.block.LidMode.DEFAULT;
+            stopForceLiddedLidOpen();
+            }
+            // Paper end - add Improved Lidded API
         }
     }
 
@@ -180,6 +_,19 @@
     public void stopOpen(Player player) {
         if (!this.remove && !player.isSpectator()) {
             this.openCount--;
+
+            // Paper start - add Improved Lidded API
+            // if (this.opened) return; // CraftBukkit - only animate if the ShulkerBox hasn't been forced open already by an API call.
+            if (this.apiLidMode == io.papermc.paper.block.LidMode.FORCED_CLOSED || this.apiLidMode == io.papermc.paper.block.LidMode.CLOSED_UNTIL_NOT_VIEWED) {
+                if (this.openCount <= 0 && this.apiLidMode == io.papermc.paper.block.LidMode.CLOSED_UNTIL_NOT_VIEWED) {
+                    this.openCount = 0;
+                    this.apiLidMode = io.papermc.paper.block.LidMode.DEFAULT;
+                    this.stopForceLiddedLidClose();
+                }
+                return;
+            }
+            // Paper end - add Improved Lidded API
+
             this.level.blockEvent(this.worldPosition, this.getBlockState().getBlock(), 1, this.openCount);
             if (this.openCount <= 0) {
                 this.level.gameEvent(player, GameEvent.CONTAINER_CLOSE, this.worldPosition);
