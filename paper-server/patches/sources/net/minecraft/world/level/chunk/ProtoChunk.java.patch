--- a/net/minecraft/world/level/chunk/ProtoChunk.java
+++ b/net/minecraft/world/level/chunk/ProtoChunk.java
@@ -93,14 +_,31 @@
         return new ChunkAccess.PackedTicks(this.blockTicks.pack(gameTime), this.fluidTicks.pack(gameTime));
     }
 
+    // Paper start - If loaded util
+    @Override
+    public final FluidState getFluidIfLoaded(BlockPos pos) {
+        return this.getFluidState(pos);
+    }
+
+    @Override
+    public final BlockState getBlockStateIfLoaded(BlockPos pos) {
+        return this.getBlockState(pos);
+    }
+    // Paper end
+
     @Override
     public BlockState getBlockState(BlockPos pos) {
-        int y = pos.getY();
+        // Paper start
+        return this.getBlockState(pos.getX(), pos.getY(), pos.getZ());
+    }
+
+    public BlockState getBlockState(final int x, final int y, final int z) {
+        // Paper end
         if (this.isOutsideBuildHeight(y)) {
             return Blocks.VOID_AIR.defaultBlockState();
         } else {
             LevelChunkSection section = this.getSection(this.getSectionIndex(y));
-            return section.hasOnlyAir() ? Blocks.AIR.defaultBlockState() : section.getBlockState(pos.getX() & 15, y & 15, pos.getZ() & 15);
+            return section.hasOnlyAir() ? Blocks.AIR.defaultBlockState() : section.getBlockState(x & 15, y & 15, z & 15); // Paper
         }
     }
 
