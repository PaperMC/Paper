--- a/net/minecraft/world/level/chunk/storage/SimpleRegionStorage.java
+++ b/net/minecraft/world/level/chunk/storage/SimpleRegionStorage.java
@@ -51,19 +_,47 @@
     }
 
     public CompletableFuture<Void> write(ChunkPos chunkPos, Supplier<CompoundTag> data) {
+        // Paper start - guard against possible chunk pos desync
+        final Supplier<CompoundTag> guardedPosCheck = () -> {
+            CompoundTag nbt = data.get();
+            final boolean chunkStorage = this.dataFixType == net.minecraft.util.datafix.DataFixTypes.CHUNK;
+            if (chunkStorage && nbt != null && !chunkPos.equals(SerializableChunkData.getChunkCoordinate(nbt))) {
+                final String world = (SimpleRegionStorage.this instanceof net.minecraft.server.level.ChunkMap) ? ((net.minecraft.server.level.ChunkMap) SimpleRegionStorage.this).level.getWorld().getName() : null;
+                throw new IllegalArgumentException("Chunk coordinate and serialized data do not have matching coordinates, trying to serialize coordinate " + chunkPos
+                    + " but compound says coordinate is " + SerializableChunkData.getChunkCoordinate(nbt) + (world == null ? " for an unknown world" : (" for world: " + world)));
+            }
+            return nbt;
+        };
+        // Paper end - guard against possible chunk pos desync
         this.markChunkDone(chunkPos);
-        return this.worker.store(chunkPos, data);
+        return this.worker.store(chunkPos, guardedPosCheck); // Paper - guard against possible chunk pos desync
     }
 
-    public CompoundTag upgradeChunkTag(CompoundTag tag, int fallbackVersion, @Nullable CompoundTag contextTag) {
+    public CompoundTag upgradeChunkTag(CompoundTag tag, int fallbackVersion, @Nullable CompoundTag contextTag, @Nullable net.minecraft.world.level.LevelAccessor levelAccessor) { // CraftBukkit
         int dataVersion = NbtUtils.getDataVersion(tag, fallbackVersion);
         if (dataVersion == SharedConstants.getCurrentVersion().dataVersion().version()) {
             return tag;
         } else {
             try {
                 tag = this.legacyFixer.get().applyFix(tag);
+                // Spigot start - SPIGOT-6806: Quick and dirty way to prevent below zero generation in old chunks, by setting the status to heightmap instead of empty
+                boolean stopBelowZero = false;
+                final boolean chunkStorage = this.dataFixType == net.minecraft.util.datafix.DataFixTypes.CHUNK;
+                if (chunkStorage) {
+                    boolean belowZeroGenerationInExistingChunks = (levelAccessor != null) ? ((net.minecraft.server.level.ServerLevel) levelAccessor).spigotConfig.belowZeroGenerationInExistingChunks : org.spigotmc.SpigotConfig.belowZeroGenerationInExistingChunks;
+
+                    if (dataVersion <= 2730 && !belowZeroGenerationInExistingChunks) {
+                        stopBelowZero = "full".equals(tag.getCompound("Level").flatMap(l -> l.getString("Status")).orElse(null));
+                    }
+                }
+                // Spigot end
                 injectDatafixingContext(tag, contextTag);
                 tag = this.dataFixType.updateToCurrentVersion(this.fixerUpper, tag, Math.max(this.legacyFixer.get().targetDataVersion(), dataVersion));
+                // Spigot start
+                if (stopBelowZero) {
+                    tag.putString("Status", net.minecraft.core.registries.BuiltInRegistries.CHUNK_STATUS.getKey(net.minecraft.world.level.chunk.status.ChunkStatus.SPAWN).toString());
+                }
+                // Spigot end
                 removeDatafixingContext(tag);
                 NbtUtils.addCurrentDataVersion(tag);
                 return tag;
@@ -77,11 +_,11 @@
     }
 
     public CompoundTag upgradeChunkTag(CompoundTag tag, int version) {
-        return this.upgradeChunkTag(tag, version, null);
+        return this.upgradeChunkTag(tag, version, null, null); // CraftBukkit
     }
 
     public Dynamic<Tag> upgradeChunkTag(Dynamic<Tag> tag, int version) {
-        return new Dynamic<>(tag.getOps(), this.upgradeChunkTag((CompoundTag)tag.getValue(), version, null));
+        return new Dynamic<>(tag.getOps(), this.upgradeChunkTag((CompoundTag)tag.getValue(), version, null, null)); // CraftBukkit
     }
 
     public static void injectDatafixingContext(CompoundTag tag, @Nullable CompoundTag contextTag) {
