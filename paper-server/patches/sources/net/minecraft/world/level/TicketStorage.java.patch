--- a/net/minecraft/world/level/TicketStorage.java
+++ b/net/minecraft/world/level/TicketStorage.java
@@ -161,7 +_,7 @@
     }
 
     private static boolean isTicketSameTypeAndLevel(Ticket first, Ticket second) {
-        return second.getType() == first.getType() && second.getTicketLevel() == first.getTicketLevel();
+        return second.getType() == first.getType() && second.getTicketLevel() == first.getTicketLevel() && java.util.Objects.equals(second.getIdentifier(), first.getIdentifier()); // Paper - add identifier
     }
 
     public int getTicketLevelAt(long chunkPos, boolean requireSimulation) {
@@ -264,7 +_,7 @@
     }
 
     public void deactivateTicketsOnClosing() {
-        this.removeTicketIf(ticket -> ticket.getType() != TicketType.UNKNOWN, this.deactivatedTickets);
+        this.removeTicketIf(ticket -> ticket.getType() != TicketType.UNKNOWN && ticket.getType() != TicketType.CHUNK_LOAD && ticket.getType() != TicketType.FUTURE_AWAIT, this.deactivatedTickets);
     }
 
     public void removeTicketIf(Predicate<Ticket> predicate, @Nullable Long2ObjectOpenHashMap<List<Ticket>> tickets) {
@@ -369,4 +_,19 @@
     public interface ChunkUpdated {
         void update(long chunkPos, int i, boolean ticketLevel);
     }
+    // Paper start
+    public boolean addPluginRegionTicket(final ChunkPos pos, final org.bukkit.plugin.Plugin value) {
+        // Keep inline with force loading
+        return addTicket(pos.toLong(), new Ticket(TicketType.PLUGIN_TICKET, ChunkMap.FORCED_TICKET_LEVEL, value));
+    }
+
+    public boolean removePluginRegionTicket(final ChunkPos pos, final org.bukkit.plugin.Plugin value) {
+        // Keep inline with force loading
+        return removeTicket(pos.toLong(), new Ticket(TicketType.PLUGIN_TICKET, ChunkMap.FORCED_TICKET_LEVEL, value));
+    }
+
+    public void removeAllPluginRegionTickets(TicketType ticketType, int ticketLevel, org.bukkit.plugin.Plugin ticketIdentifier) {
+        removeTicketIf(ticket -> ticket.getType() == ticketType && ticket.getTicketLevel() == ticketLevel && ticket.getIdentifier() == ticketIdentifier, null);
+    }
+    // Paper end
 }
