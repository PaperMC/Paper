--- a/net/minecraft/world/level/levelgen/SurfaceRules.java
+++ b/net/minecraft/world/level/levelgen/SurfaceRules.java
@@ -87,6 +_,12 @@
         return new SurfaceRules.VerticalGradientConditionSource(ResourceLocation.parse(randomName), trueAtAndBelow, falseAtAndAbove);
     }
 
+    // Paper start - Data generator
+    public static SurfaceRules.ConditionSource optionallyFlatBedrock(String randomName, VerticalAnchor trueAtAndBelow, VerticalAnchor falseAtAndAbove, boolean isRoof) {
+        return new io.papermc.paper.world.worldgen.OptionallyFlatBedrockConditionSource(ResourceLocation.parse(randomName), trueAtAndBelow, falseAtAndAbove, isRoof);
+    }
+    // Paper end - Data generator
+
     public static SurfaceRules.ConditionSource steep() {
         return SurfaceRules.Steep.INSTANCE;
     }
@@ -248,7 +_,8 @@
             SurfaceRules.register(registry, "not", SurfaceRules.NotConditionSource.CODEC);
             SurfaceRules.register(registry, "hole", SurfaceRules.Hole.CODEC);
             SurfaceRules.register(registry, "above_preliminary_surface", SurfaceRules.AbovePreliminarySurface.CODEC);
-            return SurfaceRules.register(registry, "stone_depth", SurfaceRules.StoneDepthCheck.CODEC);
+            SurfaceRules.register(registry, "stone_depth", SurfaceRules.StoneDepthCheck.CODEC);
+            return Registry.register(registry, ResourceLocation.fromNamespaceAndPath(ResourceLocation.PAPER_NAMESPACE, "optionally_flat_bedrock_condition_source"), io.papermc.paper.world.worldgen.OptionallyFlatBedrockConditionSource.CODEC.codec()); // Paper - Data generator
         }
 
         KeyDispatchDataCodec<? extends SurfaceRules.ConditionSource> codec();
