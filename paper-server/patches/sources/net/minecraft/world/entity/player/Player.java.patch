--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -159,7 +_,7 @@
     public static final int CLIENT_LOADED_TIMEOUT_TIME = 60;
     private long timeEntitySatOnShoulder;
     final Inventory inventory = new Inventory(this);
-    protected PlayerEnderChestContainer enderChestInventory = new PlayerEnderChestContainer();
+    protected PlayerEnderChestContainer enderChestInventory = new PlayerEnderChestContainer(this); // CraftBukkit - add "this" to constructor
     public final InventoryMenu inventoryMenu;
     public AbstractContainerMenu containerMenu;
     protected FoodData foodData = new FoodData();
@@ -191,13 +_,25 @@
     private Optional<GlobalPos> lastDeathLocation = Optional.empty();
     @Nullable
     public FishingHook fishing;
-    protected float hurtDir;
+    public float hurtDir; // Paper - protected -> public
     @Nullable
     public Vec3 currentImpulseImpactPos;
     @Nullable
     public Entity currentExplosionCause;
     private boolean ignoreFallDamageFromCurrentImpulse;
     private int currentImpulseContextResetGraceTime;
+    public boolean affectsSpawning = true; // Paper - Affects Spawning API
+    public net.kyori.adventure.util.TriState flyingFallDamage = net.kyori.adventure.util.TriState.NOT_SET; // Paper - flying fall damage
+
+    // CraftBukkit start
+    public boolean fauxSleeping;
+    public int oldLevel = -1;
+
+    @Override
+    public org.bukkit.craftbukkit.entity.CraftHumanEntity getBukkitEntity() {
+        return (org.bukkit.craftbukkit.entity.CraftHumanEntity) super.getBukkitEntity();
+    }
+    // CraftBukkit end
 
     public Player(Level level, BlockPos pos, float yRot, GameProfile gameProfile) {
         super(EntityType.PLAYER, level);
@@ -261,6 +_,13 @@
 
         if (this.isSleeping()) {
             this.sleepCounter++;
+            // Paper start - Add PlayerDeepSleepEvent
+            if (this.sleepCounter == SLEEP_DURATION) {
+                if (!new io.papermc.paper.event.player.PlayerDeepSleepEvent((org.bukkit.entity.Player) getBukkitEntity()).callEvent()) {
+                    this.sleepCounter = Integer.MIN_VALUE;
+                }
+            }
+            // Paper end - Add PlayerDeepSleepEvent
             if (this.sleepCounter > 100) {
                 this.sleepCounter = 100;
             }
@@ -278,7 +_,7 @@
         this.updateIsUnderwater();
         super.tick();
         if (!this.level().isClientSide && this.containerMenu != null && !this.containerMenu.stillValid(this)) {
-            this.closeContainer();
+            this.closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.CANT_USE); // Paper - Inventory close reason
             this.containerMenu = this.inventoryMenu;
         }
 
@@ -365,7 +_,7 @@
     }
 
     private void turtleHelmetTick() {
-        this.addEffect(new MobEffectInstance(MobEffects.WATER_BREATHING, 200, 0, false, false, true));
+        this.addEffect(new MobEffectInstance(MobEffects.WATER_BREATHING, 200, 0, false, false, true), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TURTLE_HELMET); // CraftBukkit
     }
 
     private boolean isEquipped(Item item) {
@@ -512,6 +_,18 @@
         }
     }
 
+    // Paper start - Inventory close reason; unused code, but to keep signatures aligned
+    public void closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
+        this.closeContainer();
+        this.containerMenu = this.inventoryMenu;
+    }
+    // Paper end - Inventory close reason
+    // Paper start - special close for unloaded inventory
+    public void closeUnloadedInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
+        this.containerMenu = this.inventoryMenu;
+    }
+    // Paper end - special close for unloaded inventory
+
     public void closeContainer() {
         this.containerMenu = this.inventoryMenu;
     }
@@ -523,8 +_,14 @@
     public void rideTick() {
         if (!this.level().isClientSide && this.wantsToStopRiding() && this.isPassenger()) {
             this.stopRiding();
-            this.setShiftKeyDown(false);
-        } else {
+            // CraftBukkit start - SPIGOT-7316: no longer passenger, dismount and return
+            if (!this.isPassenger()) {
+                this.setShiftKeyDown(false);
+                return;
+            }
+        }
+        {
+            // CraftBukkit end
             super.rideTick();
             this.oBob = this.bob;
             this.bob = 0.0F;
@@ -588,6 +_,7 @@
         this.playShoulderEntityAmbientSound(this.getShoulderEntityLeft());
         this.playShoulderEntityAmbientSound(this.getShoulderEntityRight());
         if (!this.level().isClientSide && (this.fallDistance > 0.5F || this.isInWater()) || this.abilities.flying || this.isSleeping() || this.isInPowderSnow) {
+            if (!this.level().paperConfig().entities.behavior.parrotsAreUnaffectedByPlayerMovement) // Paper - Add option to make parrots stay
             this.removeEntitiesOnShoulder();
         }
     }
@@ -717,6 +_,18 @@
 
     @Nullable
     public ItemEntity drop(ItemStack droppedItem, boolean dropAround, boolean includeThrowerName) {
+        // CraftBukkit start - SPIGOT-2942: Add boolean to call event
+        return this.drop(droppedItem, dropAround, includeThrowerName, true, null);
+    }
+
+    @Nullable
+    public ItemEntity drop(ItemStack droppedItem, boolean dropAround, boolean includeThrowerName, boolean callEvent) {
+        return this.drop(droppedItem, dropAround, includeThrowerName, callEvent, null);
+    }
+
+    @Nullable
+    public ItemEntity drop(ItemStack droppedItem, boolean dropAround, boolean includeThrowerName, boolean callEvent, @Nullable java.util.function.Consumer<org.bukkit.entity.Item> entityOperation) {
+        // CraftBukkit end
         if (!droppedItem.isEmpty() && this.level().isClientSide) {
             this.swing(InteractionHand.MAIN_HAND);
         }
@@ -867,10 +_,10 @@
             if (this.isDeadOrDying()) {
                 return false;
             } else {
-                this.removeEntitiesOnShoulder();
+                // this.removeEntitiesOnShoulder(); // CraftBukkit - moved down
                 if (damageSource.scalesWithDifficulty()) {
                     if (level.getDifficulty() == Difficulty.PEACEFUL) {
-                        amount = 0.0F;
+                        return false; // CraftBukkit - f = 0.0f -> return false
                     }
 
                     if (level.getDifficulty() == Difficulty.EASY) {
@@ -882,7 +_,14 @@
                     }
                 }
 
-                return amount != 0.0F && super.hurtServer(level, damageSource, amount);
+                // return amount != 0.0F && super.hurtServer(level, damageSource, amount);
+                // CraftBukkit start - Don't filter out 0 damage
+                boolean damaged = super.hurtServer(level, damageSource, amount);
+                if (damaged) {
+                    this.removeEntitiesOnShoulder();
+                }
+                return damaged;
+                // CraftBukkit end
             }
         }
     }
@@ -892,7 +_,7 @@
         super.blockUsingShield(entity);
         ItemStack itemBlockingWith = this.getItemBlockingWith();
         if (entity.canDisableShield() && itemBlockingWith != null) {
-            this.disableShield(itemBlockingWith);
+            this.disableShield(itemBlockingWith, entity); // Paper - Add PlayerShieldDisableEvent
         }
     }
 
@@ -902,9 +_,29 @@
     }
 
     public boolean canHarmPlayer(Player other) {
-        Team team = this.getTeam();
-        Team team1 = other.getTeam();
-        return team == null || !team.isAlliedTo(team1) || team.isAllowFriendlyFire();
+        // CraftBukkit start - Change to check OTHER player's scoreboard team according to API
+        // To summarize this method's logic, it's "Can parameter hurt this"
+        org.bukkit.scoreboard.Team team;
+        if (other instanceof ServerPlayer) {
+            ServerPlayer thatPlayer = (ServerPlayer) other;
+            team = thatPlayer.getBukkitEntity().getScoreboard().getPlayerTeam(thatPlayer.getBukkitEntity());
+            if (team == null || team.allowFriendlyFire()) {
+                return true;
+            }
+        } else {
+            // This should never be called, but is implemented anyway
+            org.bukkit.OfflinePlayer thisPlayer = other.level().getCraftServer().getOfflinePlayer(other.getScoreboardName());
+            team = other.level().getCraftServer().getScoreboardManager().getMainScoreboard().getPlayerTeam(thisPlayer);
+            if (team == null || team.allowFriendlyFire()) {
+                return true;
+            }
+        }
+
+        if (this instanceof ServerPlayer) {
+            return !team.hasPlayer(((ServerPlayer) this).getBukkitEntity());
+        }
+        return !team.hasPlayer(this.level().getCraftServer().getOfflinePlayer(this.getScoreboardName()));
+        // CraftBukkit end
     }
 
     @Override
@@ -943,7 +_,12 @@
     }
 
     @Override
-    protected void actuallyHurt(ServerLevel level, DamageSource damageSource, float amount) {
+    // CraftBukkit start
+    protected boolean actuallyHurt(ServerLevel level, DamageSource damageSource, float amount, org.bukkit.event.entity.EntityDamageEvent event) { // void -> boolean
+        if (true) {
+            return super.actuallyHurt(level, damageSource, amount, event);
+        }
+        // CraftBukkit end
         if (!this.isInvulnerableTo(level, damageSource)) {
             amount = this.getDamageAfterArmorAbsorb(damageSource, amount);
             amount = this.getDamageAfterMagicAbsorb(damageSource, amount);
@@ -955,7 +_,7 @@
             }
 
             if (var8 != 0.0F) {
-                this.causeFoodExhaustion(damageSource.getFoodExhaustion());
+                this.causeFoodExhaustion(damageSource.getFoodExhaustion(), org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.DAMAGED); // CraftBukkit - EntityExhaustionEvent
                 this.getCombatTracker().recordDamage(damageSource, var8);
                 this.setHealth(this.getHealth() - var8);
                 if (var8 < 3.4028235E37F) {
@@ -965,6 +_,7 @@
                 this.gameEvent(GameEvent.ENTITY_DAMAGE);
             }
         }
+        return false; // CraftBukkit
     }
 
     public boolean isTextFilteringEnabled() {
@@ -1040,13 +_,19 @@
 
     @Override
     public void removeVehicle() {
-        super.removeVehicle();
+        // Paper start - Force entity dismount during teleportation
+        this.removeVehicle(false);
+    }
+    @Override
+    public void removeVehicle(boolean suppressCancellation) {
+        super.removeVehicle(suppressCancellation);
+        // Paper end - Force entity dismount during teleportation
         this.boardingCooldown = 0;
     }
 
     @Override
     protected boolean isImmobile() {
-        return super.isImmobile() || this.isSleeping();
+        return super.isImmobile() || this.isSleeping() || this.isRemoved() || !valid; // Paper - player's who are dead or not in a world shouldn't move...
     }
 
     @Override
@@ -1125,8 +_,17 @@
     }
 
     public void attack(Entity target) {
-        if (target.isAttackable()) {
-            if (!target.skipAttackInteraction(this)) {
+        // Paper start - PlayerAttackEntityEvent
+        boolean willAttack = target.isAttackable() && !target.skipAttackInteraction(this); // Vanilla logic
+        io.papermc.paper.event.player.PrePlayerAttackEntityEvent playerAttackEntityEvent = new io.papermc.paper.event.player.PrePlayerAttackEntityEvent(
+            (org.bukkit.entity.Player) this.getBukkitEntity(),
+            target.getBukkitEntity(),
+            willAttack
+        );
+
+        if (playerAttackEntityEvent.callEvent() && willAttack) { // Logic moved to willAttack local variable.
+            {
+        // Paper end - PlayerAttackEntityEvent
                 float f = this.isAutoSpinAttack() ? this.autoSpinAttackDmg : (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
                 ItemStack weaponItem = this.getWeaponItem();
                 DamageSource damageSource = Optional.ofNullable(weaponItem.getItem().getDamageSource(this)).orElse(this.damageSources().playerAttack(this));
@@ -1134,18 +_,25 @@
                 float attackStrengthScale = this.getAttackStrengthScale(0.5F);
                 f *= 0.2F + attackStrengthScale * attackStrengthScale * 0.8F;
                 f1 *= attackStrengthScale;
-                this.resetAttackStrengthTicker();
+                // this.resetAttackStrengthTicker(); // CraftBukkit - Moved to EntityLiving to reset the cooldown after the damage is dealt
                 if (target.getType().is(EntityTypeTags.REDIRECTABLE_PROJECTILE)
-                    && target instanceof Projectile projectile
-                    && projectile.deflect(ProjectileDeflection.AIM_DEFLECT, this, this, true)) {
-                    this.level().playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_NODAMAGE, this.getSoundSource());
-                } else {
+                    && target instanceof Projectile projectile) {
+                        // CraftBukkit start
+                        if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(target, damageSource, f1, false)) {
+                            return;
+                        }
+                        if (projectile.deflect(ProjectileDeflection.AIM_DEFLECT, this, this, true)) {
+                            this.level().playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_NODAMAGE, this.getSoundSource());
+                            return;
+                        }
+                }
+                {
+                    // CraftBukkit end
                     if (f > 0.0F || f1 > 0.0F) {
                         boolean flag = attackStrengthScale > 0.9F;
                         boolean flag1;
                         if (this.isSprinting() && flag) {
-                            this.level()
-                                .playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_KNOCKBACK, this.getSoundSource(), 1.0F, 1.0F);
+                            this.sendSoundEffect(this, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_KNOCKBACK, this.getSoundSource(), 1.0F, 1.0F); // Paper - send while respecting visibility
                             flag1 = true;
                         } else {
                             flag1 = false;
@@ -1161,7 +_,9 @@
                             && !this.isPassenger()
                             && target instanceof LivingEntity
                             && !this.isSprinting();
+                        flag2 = flag2 && !this.level().paperConfig().entities.behavior.disablePlayerCrits; // Paper - Toggleable player crits
                         if (flag2) {
+                            damageSource = damageSource.critical(true); // Paper start - critical damage API
                             f *= 1.5F;
                         }
 
@@ -1188,17 +_,23 @@
                                 if (target instanceof LivingEntity livingEntity1) {
                                     livingEntity1.knockback(
                                         f4 * 0.5F, Mth.sin(this.getYRot() * (float) (Math.PI / 180.0)), -Mth.cos(this.getYRot() * (float) (Math.PI / 180.0))
+                                        , this, io.papermc.paper.event.entity.EntityKnockbackEvent.Cause.ENTITY_ATTACK // Paper - knockback events
                                     );
                                 } else {
                                     target.push(
                                         -Mth.sin(this.getYRot() * (float) (Math.PI / 180.0)) * f4 * 0.5F,
                                         0.1,
                                         Mth.cos(this.getYRot() * (float) (Math.PI / 180.0)) * f4 * 0.5F
+                                        , this // Paper - Add EntityKnockbackByEntityEvent and EntityPushedByEntityAttackEvent
                                     );
                                 }
 
                                 this.setDeltaMovement(this.getDeltaMovement().multiply(0.6, 1.0, 0.6));
+                                // Paper start - Configurable sprint interruption on attack
+                                if (!this.level().paperConfig().misc.disableSprintInterruptionOnAttack) {
                                 this.setSprinting(false);
+                                }
+                                // Paper end - Configurable sprint interruption on attack
                             }
 
                             if (flag3) {
@@ -1212,43 +_,62 @@
                                         && (!(livingEntity2 instanceof ArmorStand) || !((ArmorStand)livingEntity2).isMarker())
                                         && this.distanceToSqr(livingEntity2) < 9.0) {
                                         float f6 = this.getEnchantedDamage(livingEntity2, f5, damageSource) * attackStrengthScale;
+                                        // CraftBukkit start - Only apply knockback if the damage hits
+                                        if (!livingEntity2.hurtServer((ServerLevel) this.level(), this.damageSources().playerAttack(this).sweep().critical(flag2), f6)) { // Paper - add critical damage API
+                                            continue;
+                                        }
+                                        // CraftBukkit end
                                         livingEntity2.knockback(
                                             0.4F, Mth.sin(this.getYRot() * (float) (Math.PI / 180.0)), -Mth.cos(this.getYRot() * (float) (Math.PI / 180.0))
+                                            , this, io.papermc.paper.event.entity.EntityKnockbackEvent.Cause.SWEEP_ATTACK // CraftBukkit // Paper - knockback events
                                         );
-                                        livingEntity2.hurt(damageSource, f6);
+                                        // CraftBukkit - moved up
                                         if (this.level() instanceof ServerLevel serverLevel) {
                                             EnchantmentHelper.doPostAttackEffects(serverLevel, livingEntity2, damageSource);
                                         }
                                     }
                                 }
 
-                                this.level()
-                                    .playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_SWEEP, this.getSoundSource(), 1.0F, 1.0F);
+                                this.sendSoundEffect(this, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_SWEEP, this.getSoundSource(), 1.0F, 1.0F); // Paper - send while respecting visibility
                                 this.sweepAttack();
                             }
 
                             if (target instanceof ServerPlayer && target.hurtMarked) {
+                                // CraftBukkit start - Add Velocity Event
+                                boolean cancelled = false;
+                                org.bukkit.entity.Player player = (org.bukkit.entity.Player) target.getBukkitEntity();
+                                org.bukkit.util.Vector velocity = org.bukkit.craftbukkit.util.CraftVector.toBukkit(deltaMovement);
+
+                                org.bukkit.event.player.PlayerVelocityEvent event = new org.bukkit.event.player.PlayerVelocityEvent(player, velocity.clone());
+                                this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                                if (event.isCancelled()) {
+                                    cancelled = true;
+                                } else if (!velocity.equals(event.getVelocity())) {
+                                    player.setVelocity(event.getVelocity());
+                                }
+
+                                if (!cancelled) {
                                 ((ServerPlayer)target).connection.send(new ClientboundSetEntityMotionPacket(target));
                                 target.hurtMarked = false;
                                 target.setDeltaMovement(deltaMovement);
+                                }
+                                // CraftBukkit end
                             }
 
                             if (flag2) {
-                                this.level()
-                                    .playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_CRIT, this.getSoundSource(), 1.0F, 1.0F);
+                                this.sendSoundEffect(this, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_CRIT, this.getSoundSource(), 1.0F, 1.0F); // Paper - send while respecting visibility
                                 this.crit(target);
                             }
 
                             if (!flag2 && !flag3) {
                                 if (flag) {
-                                    this.level()
-                                        .playSound(
-                                            null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_STRONG, this.getSoundSource(), 1.0F, 1.0F
+                                    this.sendSoundEffect(
+                                            this, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_STRONG, this.getSoundSource(), 1.0F, 1.0F // Paper - send while respecting visibility
                                         );
                                 } else {
-                                    this.level()
-                                        .playSound(
-                                            null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_WEAK, this.getSoundSource(), 1.0F, 1.0F
+                                    this.sendSoundEffect(
+                                            this, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_WEAK, this.getSoundSource(), 1.0F, 1.0F // Paper - send while respecting visibility
                                         );
                                 }
                             }
@@ -1296,10 +_,14 @@
                                 }
                             }
 
-                            this.causeFoodExhaustion(0.1F);
+                            this.causeFoodExhaustion(this.level().spigotConfig.combatExhaustion, org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.ATTACK); // CraftBukkit - EntityExhaustionEvent // Spigot - Change to use configurable value
                         } else {
-                            this.level()
-                                .playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_NODAMAGE, this.getSoundSource(), 1.0F, 1.0F);
+                            this.sendSoundEffect(this, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_NODAMAGE, this.getSoundSource(), 1.0F, 1.0F); // Paper - send while respecting visibility
+                            // CraftBukkit start - resync on cancelled event
+                            if (this instanceof ServerPlayer) {
+                                ((ServerPlayer) this).getBukkitEntity().updateInventory();
+                            }
+                            // CraftBukkit end
                         }
                     }
                 }
@@ -1316,8 +_,21 @@
         this.attack(target);
     }
 
+    @io.papermc.paper.annotation.DoNotUse @Deprecated // Paper - Add PlayerShieldDisableEvent
     public void disableShield(ItemStack stack) {
-        this.getCooldowns().addCooldown(stack, 100);
+        // Paper start - Add PlayerShieldDisableEvent
+        this.disableShield(stack, null);
+    }
+    public void disableShield(ItemStack stack, @Nullable LivingEntity attacker) {
+        final org.bukkit.entity.Entity finalAttacker = attacker != null ? attacker.getBukkitEntity() : null;
+        if (finalAttacker != null) {
+            final io.papermc.paper.event.player.PlayerShieldDisableEvent shieldDisableEvent = new io.papermc.paper.event.player.PlayerShieldDisableEvent((org.bukkit.entity.Player) getBukkitEntity(), finalAttacker, 100);
+            if (!shieldDisableEvent.callEvent()) return;
+            this.getCooldowns().addCooldown(stack, shieldDisableEvent.getCooldown());
+        } else {
+            this.getCooldowns().addCooldown(stack, 100);
+        }
+        // Paper end - Add PlayerShieldDisableEvent
         this.stopUsingItem();
         this.level().broadcastEntityEvent(this, (byte)30);
     }
@@ -1341,7 +_,14 @@
 
     @Override
     public void remove(Entity.RemovalReason reason) {
-        super.remove(reason);
+        // CraftBukkit start - add Bukkit remove cause
+        this.remove(reason, null);
+    }
+
+    @Override
+    public void remove(Entity.RemovalReason reason, org.bukkit.event.entity.EntityRemoveEvent.Cause eventCause) {
+        super.remove(reason, eventCause);
+        // CraftBukkit end
         this.inventoryMenu.removed(this);
         if (this.containerMenu != null && this.hasContainerOpen()) {
             this.doCloseContainer();
@@ -1381,6 +_,12 @@
     }
 
     public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos bedPos) {
+        // CraftBukkit start
+        return this.startSleepInBed(bedPos, false);
+    }
+
+    public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos bedPos, boolean force) {
+        // CraftBukkit end
         this.startSleeping(bedPos);
         this.sleepCounter = 0;
         return Either.right(Unit.INSTANCE);
@@ -1492,7 +_,7 @@
 
     @Override
     public boolean causeFallDamage(float fallDistance, float multiplier, DamageSource source) {
-        if (this.abilities.mayfly) {
+        if (this.abilities.mayfly && !this.flyingFallDamage.toBooleanOrElse(false)) { // Paper - flying fall damage
             return false;
         } else {
             if (fallDistance >= 2.0F) {
@@ -1532,12 +_,24 @@
     }
 
     public void startFallFlying() {
-        this.setSharedFlag(7, true);
+        // CraftBukkit start
+        if (!org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, true).isCancelled()) {
+            this.setSharedFlag(7, true);
+        } else {
+            // SPIGOT-5542: must toggle like below
+            this.setSharedFlag(7, true);
+            this.setSharedFlag(7, false);
+        }
+        // CraftBukkit end
     }
 
     public void stopFallFlying() {
+        // CraftBukkit start
+        if (!org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
         this.setSharedFlag(7, true);
         this.setSharedFlag(7, false);
+        }
+        // CraftBukkit end
     }
 
     @Override
@@ -1643,15 +_,35 @@
     public int getXpNeededForNextLevel() {
         if (this.experienceLevel >= 30) {
             return 112 + (this.experienceLevel - 30) * 9;
-        } else {
+        } else { // Paper - diff on change; calculateTotalExperiencePoints
             return this.experienceLevel >= 15 ? 37 + (this.experienceLevel - 15) * 5 : 7 + this.experienceLevel * 2;
         }
     }
 
+    // Paper start - send while respecting visibility
+    private static void sendSoundEffect(Player fromEntity, double x, double y, double z, SoundEvent soundEffect, SoundSource soundCategory, float volume, float pitch) {
+        fromEntity.level().playSound(fromEntity, x, y, z, soundEffect, soundCategory, volume, pitch); // This will not send the effect to the entity itself
+        if (fromEntity instanceof ServerPlayer serverPlayer) {
+            serverPlayer.connection.send(new net.minecraft.network.protocol.game.ClientboundSoundPacket(net.minecraft.core.registries.BuiltInRegistries.SOUND_EVENT.wrapAsHolder(soundEffect), soundCategory, x, y, z, volume, pitch, fromEntity.random.nextLong()));
+        }
+    }
+    // Paper end - send while respecting visibility
+
     public void causeFoodExhaustion(float exhaustion) {
+        // CraftBukkit start
+        this.causeFoodExhaustion(exhaustion, org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.UNKNOWN);
+    }
+
+    public void causeFoodExhaustion(float exhaustion, org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason reason) {
+        // CraftBukkit end
         if (!this.abilities.invulnerable) {
             if (!this.level().isClientSide) {
-                this.foodData.addExhaustion(exhaustion);
+                // CraftBukkit start
+                org.bukkit.event.entity.EntityExhaustionEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerExhaustionEvent(this, reason, exhaustion);
+                if (!event.isCancelled()) {
+                    this.foodData.addExhaustion(event.getExhaustion());
+                }
+                // CraftBukkit end
             }
         }
     }
@@ -1736,13 +_,20 @@
 
     @Override
     public void setItemSlot(EquipmentSlot slot, ItemStack stack) {
+        // CraftBukkit start
+        this.setItemSlot(slot, stack, false);
+    }
+
+    @Override
+    public void setItemSlot(EquipmentSlot slot, ItemStack stack, boolean silent) {
+        // CraftBukkit end
         this.verifyEquippedItem(stack);
         if (slot == EquipmentSlot.MAINHAND) {
-            this.onEquipItem(slot, this.inventory.items.set(this.inventory.selected, stack), stack);
+            this.onEquipItem(slot, this.inventory.items.set(this.inventory.selected, stack), stack, silent); // CraftBukkit
         } else if (slot == EquipmentSlot.OFFHAND) {
-            this.onEquipItem(slot, this.inventory.offhand.set(0, stack), stack);
+            this.onEquipItem(slot, this.inventory.offhand.set(0, stack), stack, silent); // CraftBukkit
         } else if (slot.getType() == EquipmentSlot.Type.HUMANOID_ARMOR) {
-            this.onEquipItem(slot, this.inventory.armor.set(slot.getIndex(), stack), stack);
+            this.onEquipItem(slot, this.inventory.armor.set(slot.getIndex(), stack), stack, silent); // CraftBukkit
         }
     }
 
@@ -1783,24 +_,53 @@
 
     public void removeEntitiesOnShoulder() {
         if (this.timeEntitySatOnShoulder + 20L < this.level().getGameTime()) {
-            this.respawnEntityOnShoulder(this.getShoulderEntityLeft());
+            // CraftBukkit start
+            if (this.respawnEntityOnShoulder(this.getShoulderEntityLeft())) {
+                this.setShoulderEntityLeft(new CompoundTag());
+            }
+            if (this.respawnEntityOnShoulder(this.getShoulderEntityRight())) {
+                this.setShoulderEntityRight(new CompoundTag());
+            }
+            // CraftBukkit end
+        }
+    }
+
+    // Paper start - release entity api
+    public Entity releaseLeftShoulderEntity() {
+        Entity entity = this.respawnEntityOnShoulder0(this.getShoulderEntityLeft());
+        if (entity != null) {
             this.setShoulderEntityLeft(new CompoundTag());
-            this.respawnEntityOnShoulder(this.getShoulderEntityRight());
+        }
+        return entity;
+    }
+
+    public Entity releaseRightShoulderEntity() {
+        Entity entity = this.respawnEntityOnShoulder0(this.getShoulderEntityRight());
+        if (entity != null) {
             this.setShoulderEntityRight(new CompoundTag());
         }
+        return entity;
     }
+    // Paper end - release entity api
 
-    private void respawnEntityOnShoulder(CompoundTag entityCompound) {
+    private boolean respawnEntityOnShoulder(CompoundTag entityCompound) { // CraftBukkit void->boolean
+    // Paper start - release entity api - return entity - overload
+        return this.respawnEntityOnShoulder0(entityCompound) != null;
+    }
+    @Nullable
+    private Entity respawnEntityOnShoulder0(CompoundTag entityCompound) { // CraftBukkit void->boolean
+    // Paper end - release entity api - return entity - overload
         if (!this.level().isClientSide && !entityCompound.isEmpty()) {
-            EntityType.create(entityCompound, this.level(), EntitySpawnReason.LOAD).ifPresent(entity -> {
+            return EntityType.create(entityCompound, this.level(), EntitySpawnReason.LOAD).map((entity) -> { // CraftBukkit
                 if (entity instanceof TamableAnimal) {
                     ((TamableAnimal)entity).setOwnerUUID(this.uuid);
                 }
 
                 entity.setPos(this.getX(), this.getY() + 0.7F, this.getZ());
-                ((ServerLevel)this.level()).addWithUUID(entity);
-            });
+                return ((ServerLevel)this.level()).addWithUUID(entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SHOULDER_ENTITY) ? entity : null; // CraftBukkit // Paper start - release entity api - return entity
+            }).orElse(null); // CraftBukkit // Paper end - release entity api - return entity
         }
+        return null; // Paper - return null
     }
 
     @Override
@@ -1988,17 +_,28 @@
         return ImmutableList.of(Pose.STANDING, Pose.CROUCHING, Pose.SWIMMING);
     }
 
+    // Paper start - PlayerReadyArrowEvent
+    protected boolean tryReadyArrow(ItemStack bow, ItemStack itemstack) {
+        return !(this instanceof ServerPlayer) ||
+                new com.destroystokyo.paper.event.player.PlayerReadyArrowEvent(
+                    ((ServerPlayer) this).getBukkitEntity(),
+                    org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(bow),
+                    org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(itemstack)
+                ).callEvent();
+    }
+    // Paper end - PlayerReadyArrowEvent
+
     @Override
     public ItemStack getProjectile(ItemStack shootable) {
         if (!(shootable.getItem() instanceof ProjectileWeaponItem)) {
             return ItemStack.EMPTY;
         } else {
-            Predicate<ItemStack> supportedHeldProjectiles = ((ProjectileWeaponItem)shootable.getItem()).getSupportedHeldProjectiles();
+            Predicate<ItemStack> supportedHeldProjectiles = ((ProjectileWeaponItem)shootable.getItem()).getSupportedHeldProjectiles().and(item -> this.tryReadyArrow(shootable, item)); // Paper - PlayerReadyArrowEvent
             ItemStack heldProjectile = ProjectileWeaponItem.getHeldProjectile(this, supportedHeldProjectiles);
             if (!heldProjectile.isEmpty()) {
                 return heldProjectile;
             } else {
-                supportedHeldProjectiles = ((ProjectileWeaponItem)shootable.getItem()).getAllSupportedProjectiles();
+                supportedHeldProjectiles = ((ProjectileWeaponItem)shootable.getItem()).getAllSupportedProjectiles().and(item -> this.tryReadyArrow(shootable, item)); // Paper - PlayerReadyArrowEvent
 
                 for (int i = 0; i < this.inventory.getContainerSize(); i++) {
                     ItemStack item = this.inventory.getItem(i);
