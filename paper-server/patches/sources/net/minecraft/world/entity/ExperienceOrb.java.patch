--- a/net/minecraft/world/entity/ExperienceOrb.java
+++ b/net/minecraft/world/entity/ExperienceOrb.java
@@ -44,13 +_,59 @@
     @Nullable
     private Player followingPlayer;
     private final InterpolationHandler interpolation = new InterpolationHandler(this);
+    // Paper start
+    @Nullable
+    public java.util.UUID sourceEntityId;
+    @Nullable
+    public java.util.UUID triggerEntityId;
+    public org.bukkit.entity.ExperienceOrb.SpawnReason spawnReason = org.bukkit.entity.ExperienceOrb.SpawnReason.UNKNOWN;
 
+    private void loadPaperNBT(ValueInput input) {
+        input.read("Paper.ExpData", net.minecraft.nbt.CompoundTag.CODEC).ifPresent(expData -> {
+            this.sourceEntityId = expData.read("source", net.minecraft.core.UUIDUtil.CODEC).orElse(null);
+            this.triggerEntityId = expData.read("trigger", net.minecraft.core.UUIDUtil.CODEC).orElse(null);
+            expData.getString("reason").ifPresent(reason -> {
+                try {
+                    this.spawnReason = org.bukkit.entity.ExperienceOrb.SpawnReason.valueOf(reason);
+                } catch (Exception e) {
+                    this.level().getCraftServer().getLogger().warning("Invalid spawnReason set for experience orb: " + e.getMessage() + " - " + reason);
+                }
+            });
+        });
+    }
+    private void savePaperNBT(ValueOutput output) {
+        net.minecraft.nbt.CompoundTag expData = new net.minecraft.nbt.CompoundTag();
+        expData.storeNullable("source", net.minecraft.core.UUIDUtil.CODEC, this.sourceEntityId);
+        expData.storeNullable("trigger", net.minecraft.core.UUIDUtil.CODEC, this.triggerEntityId);
+        if (this.spawnReason != org.bukkit.entity.ExperienceOrb.SpawnReason.UNKNOWN) {
+            expData.putString("reason", this.spawnReason.name());
+        }
+        output.store("Paper.ExpData", net.minecraft.nbt.CompoundTag.CODEC, expData);
+    }
+    // Paper end
+    @Deprecated @io.papermc.paper.annotation.DoNotUse // Paper - overload ctor
     public ExperienceOrb(Level level, double x, double y, double z, int value) {
-        this(level, new Vec3(x, y, z), Vec3.ZERO, value);
+    // Paper start - add reasons for orbs
+        this(level, x, y, z, value, null, null, null);
+    }
+    public ExperienceOrb(Level level, double x, double y, double z, int value, @Nullable org.bukkit.entity.ExperienceOrb.SpawnReason reason, @Nullable Entity triggerId, @Nullable Entity sourceId) {
+        this(level, new Vec3(x, y, z), Vec3.ZERO, value, reason, triggerId, sourceId);
+    // Paper end - add reasons for orbs
     }
 
+    @Deprecated @io.papermc.paper.annotation.DoNotUse // Paper - overload ctor
     public ExperienceOrb(Level level, Vec3 pos, Vec3 direction, int value) {
+    // Paper start - add reasons for orbs
+        this(level, pos, direction, value, null, null, null);
+    }
+    public ExperienceOrb(Level level, Vec3 pos, Vec3 direction, int value, @Nullable org.bukkit.entity.ExperienceOrb.SpawnReason reason, @Nullable Entity triggerId, @Nullable Entity sourceId) {
+    // Paper end - add reasons for orbs
         this(EntityType.EXPERIENCE_ORB, level);
+        // Paper start - add reasons for orbs
+        this.sourceEntityId = sourceId != null ? sourceId.getUUID() : null;
+        this.triggerEntityId = triggerId != null ? triggerId.getUUID() : null;
+        this.spawnReason = reason != null ? reason : org.bukkit.entity.ExperienceOrb.SpawnReason.UNKNOWN;
+        // Paper end - add reasons for orbs
         this.setPos(pos);
         if (!level.isClientSide) {
             this.setYRot(this.random.nextFloat() * 360.0F);
@@ -147,12 +_,13 @@
 
             this.age++;
             if (this.age >= 6000) {
-                this.discard();
+                this.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
             }
         }
     }
 
     private void followNearbyPlayer() {
+        Player prevTarget = this.followingPlayer; // CraftBukkit - store old target
         if (this.followingPlayer == null || this.followingPlayer.isSpectator() || this.followingPlayer.distanceToSqr(this) > 64.0) {
             Player nearestPlayer = this.level().getNearestPlayer(this, 8.0);
             if (nearestPlayer != null && !nearestPlayer.isSpectator() && !nearestPlayer.isDeadOrDying()) {
@@ -162,7 +_,24 @@
             }
         }
 
-        if (this.followingPlayer != null) {
+        // CraftBukkit start
+        boolean cancelled = false;
+        if (this.followingPlayer != prevTarget) {
+            org.bukkit.event.entity.EntityTargetLivingEntityEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTargetLivingEvent(
+                this, this.followingPlayer, (this.followingPlayer != null) ? org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_PLAYER : org.bukkit.event.entity.EntityTargetEvent.TargetReason.FORGOT_TARGET
+            );
+            LivingEntity target = (event.getTarget() == null) ? null : ((org.bukkit.craftbukkit.entity.CraftLivingEntity) event.getTarget()).getHandle();
+            cancelled = event.isCancelled();
+
+            if (cancelled) {
+                this.followingPlayer = prevTarget;
+            } else {
+                this.followingPlayer = (target instanceof Player) ? (Player) target : null;
+            }
+        }
+
+        if (this.followingPlayer != null && !cancelled) {
+            // CraftBukkit end
             Vec3 vec3 = new Vec3(
                 this.followingPlayer.getX() - this.getX(),
                 this.followingPlayer.getY() + this.followingPlayer.getEyeHeight() / 2.0 - this.getY(),
@@ -193,18 +_,24 @@
     }
 
     public static void awardWithDirection(ServerLevel level, Vec3 pos, Vec3 direction, int amount) {
+    // Paper start - add reason to orbs
+        awardWithDirection(level, pos, direction, amount, null, null, null);
+    }
+    public static void awardWithDirection(ServerLevel level, Vec3 pos, Vec3 direction, int amount, @Nullable org.bukkit.entity.ExperienceOrb.SpawnReason reason, @Nullable Entity triggerId, @Nullable Entity sourceId) {
+    // Paper end - add reason to orbs
         while (amount > 0) {
             int experienceValue = getExperienceValue(amount);
             amount -= experienceValue;
             if (!tryMergeToExisting(level, pos, experienceValue)) {
-                level.addFreshEntity(new ExperienceOrb(level, pos, direction, experienceValue));
+                level.addFreshEntity(new ExperienceOrb(level, pos, direction, experienceValue, reason, triggerId, sourceId)); // Paper - add reason to orbs
             }
         }
     }
 
     private static boolean tryMergeToExisting(ServerLevel level, Vec3 pos, int amount) {
+        // Paper - TODO some other event for this kind of merge
         AABB aabb = AABB.ofSize(pos, 1.0, 1.0, 1.0);
-        int randomInt = level.getRandom().nextInt(40);
+        int randomInt = level.getRandom().nextInt(io.papermc.paper.configuration.GlobalConfiguration.get().misc.xpOrbGroupsPerArea.or(ORB_GROUPS_PER_AREA)); // Paper - Configure how many orb groups per area
         List<ExperienceOrb> entities = level.getEntities(
             EntityTypeTest.forClass(ExperienceOrb.class), aabb, experienceOrb1 -> canMerge(experienceOrb1, randomInt, amount)
         );
@@ -223,13 +_,18 @@
     }
 
     private static boolean canMerge(ExperienceOrb orb, int amount, int other) {
-        return !orb.isRemoved() && (orb.getId() - amount) % 40 == 0 && orb.getValue() == other;
+        return !orb.isRemoved() && (orb.getId() - amount) % io.papermc.paper.configuration.GlobalConfiguration.get().misc.xpOrbGroupsPerArea.or(ORB_GROUPS_PER_AREA) == 0 && orb.getValue() == other; // Paper - Configure how many orbs will merge together
     }
 
     private void merge(ExperienceOrb orb) {
+        // Paper start - call orb merge event
+        if (!new com.destroystokyo.paper.event.entity.ExperienceOrbMergeEvent((org.bukkit.entity.ExperienceOrb) this.getBukkitEntity(), (org.bukkit.entity.ExperienceOrb) orb.getBukkitEntity()).callEvent()) {
+            return;
+        }
+        // Paper end - call orb merge event
         this.count = this.count + orb.count;
         this.age = Math.min(this.age, orb.age);
-        orb.discard();
+        orb.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.MERGE); // CraftBukkit - add Bukkit remove cause
     }
 
     private void setUnderwaterMovement() {
@@ -254,7 +_,7 @@
             this.markHurt();
             this.health = (int)(this.health - amount);
             if (this.health <= 0) {
-                this.discard();
+                this.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.DEATH); // CraftBukkit - add Bukkit remove cause
             }
 
             return true;
@@ -265,32 +_,34 @@
     protected void addAdditionalSaveData(ValueOutput output) {
         output.putShort("Health", (short)this.health);
         output.putShort("Age", (short)this.age);
-        output.putShort("Value", (short)this.getValue());
+        output.putInt("Value", this.getValue()); // Paper - save as Integer
         output.putInt("Count", this.count);
+        this.savePaperNBT(output); // Paper
     }
 
     @Override
     protected void readAdditionalSaveData(ValueInput input) {
         this.health = input.getShortOr("Health", (short)5);
         this.age = input.getShortOr("Age", (short)0);
-        this.setValue(input.getShortOr("Value", (short)0));
+        this.setValue(input.getIntOr("Value", 0)); // Paper - load as Integer
         this.count = input.read("Count", ExtraCodecs.POSITIVE_INT).orElse(1);
+        this.loadPaperNBT(input); // Paper
     }
 
     @Override
     public void playerTouch(Player entity) {
         if (entity instanceof ServerPlayer serverPlayer) {
-            if (entity.takeXpDelay == 0) {
-                entity.takeXpDelay = 2;
+            if (entity.takeXpDelay == 0 && new com.destroystokyo.paper.event.player.PlayerPickupExperienceEvent(serverPlayer.getBukkitEntity(), (org.bukkit.entity.ExperienceOrb) this.getBukkitEntity()).callEvent()) { // Paper - PlayerPickupExperienceEvent
+                entity.takeXpDelay = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerXpCooldownEvent(entity, 2, org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason.PICKUP_ORB).getNewCooldown(); // CraftBukkit - entityhuman.takeXpDelay = 2;
                 entity.take(this, 1);
                 int i = this.repairPlayerItems(serverPlayer, this.getValue());
                 if (i > 0) {
-                    entity.giveExperiencePoints(i);
+                    entity.giveExperiencePoints(org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerExpChangeEvent(entity, this).getAmount()); // CraftBukkit - this.value -> event.getAmount() // Paper - supply experience orb object
                 }
 
                 this.count--;
                 if (this.count == 0) {
-                    this.discard();
+                    this.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.PICKUP); // CraftBukkit - add Bukkit remove cause
                 }
             }
         }
@@ -304,9 +_,19 @@
             ItemStack itemStack = randomItemWith.get().itemStack();
             int i = EnchantmentHelper.modifyDurabilityToRepairFromXp(player.level(), itemStack, value);
             int min = Math.min(i, itemStack.getDamageValue());
+            // CraftBukkit start
+            // Paper start - mending event
+            final int consumedExperience = min > 0 ? min * value / i : 0;
+            org.bukkit.event.player.PlayerItemMendEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerItemMendEvent(player, this, itemStack, randomItemWith.get().inSlot(), min, consumedExperience);
+            // Paper end - mending event
+            min = event.getRepairAmount();
+            if (event.isCancelled()) {
+                return value;
+            }
+            // CraftBukkit end
             itemStack.setDamageValue(itemStack.getDamageValue() - min);
             if (min > 0) {
-                int i1 = value - min * value / i;
+                int i1 = value - min * value / i; // Paper - diff on change - expand PlayerMendEvents
                 if (i1 > 0) {
                     return this.repairPlayerItems(player, i1);
                 }
@@ -352,6 +_,24 @@
     }
 
     public static int getExperienceValue(int expValue) {
+        // CraftBukkit start
+        if (expValue > 162670129) return expValue - 100000;
+        if (expValue > 81335063) return 81335063;
+        if (expValue > 40667527) return 40667527;
+        if (expValue > 20333759) return 20333759;
+        if (expValue > 10166857) return 10166857;
+        if (expValue > 5083423) return 5083423;
+        if (expValue > 2541701) return 2541701;
+        if (expValue > 1270849) return 1270849;
+        if (expValue > 635413) return 635413;
+        if (expValue > 317701) return 317701;
+        if (expValue > 158849) return 158849;
+        if (expValue > 79423) return 79423;
+        if (expValue > 39709) return 39709;
+        if (expValue > 19853) return 19853;
+        if (expValue > 9923) return 9923;
+        if (expValue > 4957) return 4957;
+        // CraftBukkit end
         if (expValue >= 2477) {
             return 2477;
         } else if (expValue >= 1237) {
