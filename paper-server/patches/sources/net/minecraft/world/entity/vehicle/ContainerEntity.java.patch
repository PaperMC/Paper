--- a/net/minecraft/world/entity/vehicle/ContainerEntity.java
+++ b/net/minecraft/world/entity/vehicle/ContainerEntity.java
@@ -60,12 +_,12 @@
     default void addChestVehicleSaveData(ValueOutput output) {
         if (this.getContainerLootTable() != null) {
             output.putString("LootTable", this.getContainerLootTable().location().toString());
+            this.lootableData().saveNbt(output); // Paper
             if (this.getContainerLootTableSeed() != 0L) {
                 output.putLong("LootTableSeed", this.getContainerLootTableSeed());
             }
-        } else {
-            ContainerHelper.saveAllItems(output, this.getItemStacks());
         }
+        ContainerHelper.saveAllItems(output, this.getItemStacks()); // Paper - always save the items, table may still remain
     }
 
     default void readChestVehicleSaveData(ValueInput input) {
@@ -73,7 +_,12 @@
         ResourceKey<LootTable> resourceKey = input.read("LootTable", LootTable.KEY_CODEC).orElse(null);
         this.setContainerLootTable(resourceKey);
         this.setContainerLootTableSeed(input.getLongOr("LootTableSeed", 0L));
-        if (resourceKey == null) {
+        // Paper start - LootTable API
+        if (this.getContainerLootTable() != null) {
+            this.lootableData().loadNbt(input);
+        }
+        // Paper end - LootTable API
+        if (true || resourceKey == null) { // Paper - always read the items, table may still remain
             ContainerHelper.loadAllItems(input, this.getItemStacks());
         }
     }
@@ -89,19 +_,27 @@
     }
 
     default InteractionResult interactWithContainerVehicle(Player player) {
-        player.openMenu(this);
+        // Paper start - Fix InventoryOpenEvent cancellation
+        if (player.openMenu(this).isEmpty()) {
+            return InteractionResult.PASS;
+        }
+        // Paper end - Fix InventoryOpenEvent cancellation
         return InteractionResult.SUCCESS;
     }
 
     default void unpackChestVehicleLootTable(@Nullable Player player) {
         MinecraftServer server = this.level().getServer();
-        if (this.getContainerLootTable() != null && server != null) {
+        if (server != null && this.lootableData().shouldReplenish(this, com.destroystokyo.paper.loottable.PaperLootableInventoryData.ENTITY, player)) { // Paper - LootTable API
             LootTable lootTable = server.reloadableRegistries().getLootTable(this.getContainerLootTable());
             if (player != null) {
                 CriteriaTriggers.GENERATE_LOOT.trigger((ServerPlayer)player, this.getContainerLootTable());
             }
 
-            this.setContainerLootTable(null);
+            // Paper start - LootTable API
+            if (this.lootableData().shouldClearLootTable(this, com.destroystokyo.paper.loottable.PaperLootableInventoryData.ENTITY, player)) {
+                this.setContainerLootTable(null);
+            }
+            // Paper end - LootTable API
             LootParams.Builder builder = new LootParams.Builder((ServerLevel)this.level()).withParameter(LootContextParams.ORIGIN, this.position());
             if (player != null) {
                 builder.withLuck(player.getLuck()).withParameter(LootContextParams.THIS_ENTITY, player);
@@ -171,4 +_,14 @@
     default boolean isChestVehicleStillValid(Player player) {
         return !this.isRemoved() && player.canInteractWithEntity(this.getBoundingBox(), 4.0);
     }
+
+    // Paper start - LootTable API
+    default com.destroystokyo.paper.loottable.PaperLootableInventoryData lootableData() {
+        throw new UnsupportedOperationException("Implement this method");
+    }
+
+    default com.destroystokyo.paper.loottable.PaperLootableInventory getLootableInventory() {
+        return ((com.destroystokyo.paper.loottable.PaperLootableInventory) ((Entity) this).getBukkitEntity());
+    }
+    // Paper end - LootTable API
 }
