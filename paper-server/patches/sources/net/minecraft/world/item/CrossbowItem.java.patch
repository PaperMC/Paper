--- a/net/minecraft/world/item/CrossbowItem.java
+++ b/net/minecraft/world/item/CrossbowItem.java
@@ -88,8 +_,15 @@
         return getPowerForTime(i, stack, entity) >= 1.0F && isCharged(stack);
     }
 
+    @Deprecated @io.papermc.paper.annotation.DoNotUse // Paper - Add EntityLoadCrossbowEvent
     private static boolean tryLoadProjectiles(LivingEntity shooter, ItemStack crossbowStack) {
-        List<ItemStack> list = draw(crossbowStack, shooter.getProjectile(crossbowStack), shooter);
+        // Paper start - Add EntityLoadCrossbowEvent
+        return tryLoadProjectiles(shooter, crossbowStack, true);
+    }
+
+    private static boolean tryLoadProjectiles(LivingEntity shooter, ItemStack crossbowStack, boolean consume) {
+        List<ItemStack> list = draw(crossbowStack, shooter.getProjectile(crossbowStack), shooter, consume);
+        // Paper end - Add EntityLoadCrossbowEvent
         if (!list.isEmpty()) {
             crossbowStack.set(DataComponents.CHARGED_PROJECTILES, ChargedProjectiles.of(list));
             return true;
@@ -141,7 +_,11 @@
     @Override
     protected Projectile createProjectile(Level level, LivingEntity shooter, ItemStack weapon, ItemStack ammo, boolean isCrit) {
         if (ammo.is(Items.FIREWORK_ROCKET)) {
-            return new FireworkRocketEntity(level, ammo, shooter, shooter.getX(), shooter.getEyeY() - 0.15F, shooter.getZ(), true);
+            // Paper start
+            FireworkRocketEntity entity =  new FireworkRocketEntity(level, ammo, shooter, shooter.getX(), shooter.getEyeY() - 0.15F, shooter.getZ(), true);
+            entity.spawningEntity = shooter.getUUID(); // Paper
+            return entity;
+            // Paper end
         } else {
             Projectile projectile = super.createProjectile(level, shooter, weapon, ammo, isCrit);
             if (projectile instanceof AbstractArrow abstractArrow) {
@@ -163,7 +_,7 @@
         if (level instanceof ServerLevel serverLevel) {
             ChargedProjectiles chargedProjectiles = weapon.set(DataComponents.CHARGED_PROJECTILES, ChargedProjectiles.EMPTY);
             if (chargedProjectiles != null && !chargedProjectiles.isEmpty()) {
-                this.shoot(serverLevel, shooter, hand, weapon, chargedProjectiles.getItems(), velocity, inaccuracy, shooter instanceof Player, target);
+                this.shoot(serverLevel, shooter, hand, weapon, chargedProjectiles.getItems(), velocity, inaccuracy, shooter instanceof Player, target, 1); // Paper - Pass draw strength
                 if (shooter instanceof ServerPlayer serverPlayer) {
                     CriteriaTriggers.SHOT_CROSSBOW.trigger(serverPlayer, weapon);
                     serverPlayer.awardStat(Stats.ITEM_USED.get(weapon.getItem()));
@@ -190,45 +_,69 @@
                 this.startSoundPlayed = false;
                 this.midLoadSoundPlayed = false;
             }
-
             if (f >= 0.2F && !this.startSoundPlayed) {
                 this.startSoundPlayed = true;
                 chargingSounds.start()
-                    .ifPresent(
-                        holder -> level.playSound(
-                            null, livingEntity.getX(), livingEntity.getY(), livingEntity.getZ(), holder.value(), SoundSource.PLAYERS, 0.5F, 1.0F
-                        )
-                    );
+                    .ifPresent(holder -> level.playSound(
+                        null,
+                        livingEntity.getX(),
+                        livingEntity.getY(),
+                        livingEntity.getZ(),
+                        holder.value(),
+                        SoundSource.PLAYERS,
+                        0.5F,
+                        1.0F
+                    ));
             }
-
             if (f >= 0.5F && !this.midLoadSoundPlayed) {
                 this.midLoadSoundPlayed = true;
                 chargingSounds.mid()
-                    .ifPresent(
-                        sound -> level.playSound(
-                            null, livingEntity.getX(), livingEntity.getY(), livingEntity.getZ(), sound.value(), SoundSource.PLAYERS, 0.5F, 1.0F
-                        )
-                    );
+                    .ifPresent(sound -> level.playSound(
+                        null,
+                        livingEntity.getX(),
+                        livingEntity.getY(),
+                        livingEntity.getZ(),
+                        sound.value(),
+                        SoundSource.PLAYERS,
+                        0.5F,
+                        1.0F
+                    ));
             }
-
-            if (f >= 1.0F && !isCharged(stack) && tryLoadProjectiles(livingEntity, stack)) {
+            if (f == 1.0F && !isCharged(stack)) {
+                // Paper start - Add EntityCrossbowLoadEvent
+                final io.papermc.paper.event.entity.EntityLoadCrossbowEvent event =
+                    new io.papermc.paper.event.entity.EntityLoadCrossbowEvent(
+                        livingEntity.getBukkitLivingEntity(),
+                        stack.asBukkitMirror(),
+                        org.bukkit.craftbukkit.CraftEquipmentSlot.getHand(livingEntity.getUsedItemHand())
+                    );
+                if (!event.callEvent()
+                    || !tryLoadProjectiles(livingEntity, stack, event.shouldConsumeItem())
+                    || !event.shouldConsumeItem()
+                    // Paper end
+                ) {
+                    if (livingEntity instanceof net.minecraft.server.level.ServerPlayer serverPlayer) {
+                        // fix loading of crossbow when event is cancelled
+                        serverPlayer.containerMenu.sendAllDataToRemote();
+                        serverPlayer.stopUsingItem();
+                        serverPlayer.connection.send(new net.minecraft.network.protocol.game.ClientboundEntityEventPacket(serverPlayer, (byte)4));
+                    }
+                    return;
+                }
                 chargingSounds.end()
-                    .ifPresent(
-                        sound -> level.playSound(
-                            null,
-                            livingEntity.getX(),
-                            livingEntity.getY(),
-                            livingEntity.getZ(),
-                            sound.value(),
-                            livingEntity.getSoundSource(),
-                            1.0F,
-                            1.0F / (level.getRandom().nextFloat() * 0.5F + 1.0F) + 0.2F
-                        )
-                    );
+                    .ifPresent(sound -> level.playSound(
+                        null,
+                        livingEntity.getX(),
+                        livingEntity.getY(),
+                        livingEntity.getZ(),
+                        sound.value(),
+                        livingEntity.getSoundSource(),
+                        1.0F,
+                        1.0F / (level.getRandom().nextFloat() * 0.5F + 1.0F) + 0.2F
+                    ));
             }
         }
     }
-
     @Override
     public int getUseDuration(ItemStack stack, LivingEntity entity) {
         return 72000;
