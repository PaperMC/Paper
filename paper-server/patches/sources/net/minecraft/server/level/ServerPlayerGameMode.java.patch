--- a/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -41,28 +_,50 @@
     private BlockPos delayedDestroyPos = BlockPos.ZERO;
     private int delayedTickStart;
     private int lastSentState = -1;
+    public boolean captureSentBlockEntities = false; // Paper - Send block entities after destroy prediction
+    public boolean capturedBlockEntity = false; // Paper - Send block entities after destroy prediction
 
     public ServerPlayerGameMode(ServerPlayer player) {
         this.player = player;
         this.level = player.serverLevel();
     }
 
+    @Deprecated @io.papermc.paper.annotation.DoNotUse // Paper
     public boolean changeGameModeForPlayer(GameType gameModeForPlayer) {
+        // Paper start - Expand PlayerGameModeChangeEvent
+        org.bukkit.event.player.PlayerGameModeChangeEvent event = this.changeGameModeForPlayer(gameModeForPlayer, org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.UNKNOWN, null);
+        return event != null && event.isCancelled();
+    }
+
+    @Nullable
+    public org.bukkit.event.player.PlayerGameModeChangeEvent changeGameModeForPlayer(GameType gameModeForPlayer, org.bukkit.event.player.PlayerGameModeChangeEvent.Cause playerGameModeChangeCause, @Nullable net.kyori.adventure.text.Component cancelMessage) {
+        // Paper end - Expand PlayerGameModeChangeEvent
         if (gameModeForPlayer == this.gameModeForPlayer) {
-            return false;
+            return null; // Paper - Expand PlayerGameModeChangeEvent
         } else {
-            this.setGameModeForPlayer(gameModeForPlayer, this.previousGameModeForPlayer);
+            // CraftBukkit start
+            org.bukkit.event.player.PlayerGameModeChangeEvent event = new org.bukkit.event.player.PlayerGameModeChangeEvent(
+                this.player.getBukkitEntity(),
+                org.bukkit.GameMode.getByValue(gameModeForPlayer.getId()),
+                playerGameModeChangeCause, // Paper
+                cancelMessage
+            );
+            if (!event.callEvent()) {
+                return event; // Paper - Expand PlayerGameModeChangeEvent
+            }
+            // CraftBukkit end
+            this.setGameModeForPlayer(gameModeForPlayer, this.gameModeForPlayer); // Paper - Fix MC-259571
             this.player.onUpdateAbilities();
             this.player
                 .server
                 .getPlayerList()
-                .broadcastAll(new ClientboundPlayerInfoUpdatePacket(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_GAME_MODE, this.player));
+                .broadcastAll(new ClientboundPlayerInfoUpdatePacket(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_GAME_MODE, this.player), this.player); // CraftBukkit
             this.level.updateSleepingPlayerList();
             if (gameModeForPlayer == GameType.CREATIVE) {
                 this.player.resetCurrentImpulseContext();
             }
 
-            return true;
+            return event; // Paper - Expand PlayerGameModeChangeEvent
         }
     }
 
@@ -90,10 +_,11 @@
     }
 
     public void tick() {
-        this.gameTicks++;
+        // this.gameTicks = net.minecraft.server.MinecraftServer.currentTick; // CraftBukkit
+        this.gameTicks = (int) this.level.getLagCompensationTick(); // Paper - lag compensate eating
         if (this.hasDelayedDestroy) {
-            BlockState blockState = this.level.getBlockState(this.delayedDestroyPos);
-            if (blockState.isAir()) {
+            BlockState blockState = this.level.getBlockStateIfLoaded(this.delayedDestroyPos); // Paper - Don't allow digging into unloaded chunks
+            if (blockState == null || blockState.isAir()) { // Paper - Don't allow digging into unloaded chunks
                 this.hasDelayedDestroy = false;
             } else {
                 float f = this.incrementDestroyProgress(blockState, this.delayedDestroyPos, this.delayedTickStart);
@@ -103,7 +_,13 @@
                 }
             }
         } else if (this.isDestroyingBlock) {
-            BlockState blockState = this.level.getBlockState(this.destroyPos);
+            // Paper start - Don't allow digging into unloaded chunks; don't want to do same logic as above, return instead
+            BlockState blockState = this.level.getBlockStateIfLoaded(this.destroyPos);
+            if (blockState == null) {
+                this.isDestroyingBlock = false;
+                return;
+            }
+            // Paper end - Don't allow digging into unloaded chunks
             if (blockState.isAir()) {
                 this.level.destroyBlockProgress(this.player.getId(), this.destroyPos, -1);
                 this.lastSentState = -1;
@@ -131,6 +_,7 @@
 
     public void handleBlockBreakAction(BlockPos pos, ServerboundPlayerActionPacket.Action action, Direction face, int maxBuildHeight, int sequence) {
         if (!this.player.canInteractWithBlock(pos, 1.0)) {
+            if (true) return; // Paper - Don't allow digging into unloaded chunks; Don't notify if unreasonably far away
             this.debugLogging(pos, false, sequence, "too far");
         } else if (pos.getY() > maxBuildHeight) {
             this.player.connection.send(new ClientboundBlockUpdatePacket(pos, this.level.getBlockState(pos)));
@@ -138,16 +_,35 @@
         } else {
             if (action == ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK) {
                 if (!this.level.mayInteract(this.player, pos)) {
+                    // CraftBukkit start - fire PlayerInteractEvent
+                    org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent(this.player, org.bukkit.event.block.Action.LEFT_CLICK_BLOCK, pos, face, this.player.getInventory().getSelectedItem(), InteractionHand.MAIN_HAND);
                     this.player.connection.send(new ClientboundBlockUpdatePacket(pos, this.level.getBlockState(pos)));
                     this.debugLogging(pos, false, sequence, "may not interact");
-                    return;
-                }
+                    this.capturedBlockEntity = true; // Paper - Send block entities after destroy prediction
+                    // CraftBukkit end
+                    return;
+                }
+
+                // CraftBukkit start
+                org.bukkit.event.player.PlayerInteractEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent(this.player, org.bukkit.event.block.Action.LEFT_CLICK_BLOCK, pos, face, this.player.getInventory().getSelectedItem(), InteractionHand.MAIN_HAND);
+                if (event.isCancelled()) {
+                    this.capturedBlockEntity = true; // Paper - Send block entities after destroy prediction
+                    return;
+                }
+                // CraftBukkit end
 
                 if (this.player.getAbilities().instabuild) {
                     this.destroyAndAck(pos, sequence, "creative destroy");
                     return;
                 }
 
+                // Spigot start - handle debug stick left click for non-creative
+                if (this.player.getMainHandItem().is(net.minecraft.world.item.Items.DEBUG_STICK)
+                    && ((net.minecraft.world.item.DebugStickItem) net.minecraft.world.item.Items.DEBUG_STICK).handleInteraction(this.player, this.level.getBlockState(pos), this.level, pos, false, this.player.getMainHandItem())) {
+                    return;
+                }
+                // Spigot end
+
                 if (this.player.blockActionRestricted(this.level, pos, this.gameModeForPlayer)) {
                     this.player.connection.send(new ClientboundBlockUpdatePacket(pos, this.level.getBlockState(pos)));
                     this.debugLogging(pos, false, sequence, "block action restricted");
@@ -157,7 +_,7 @@
                 this.destroyProgressStart = this.gameTicks;
                 float f = 1.0F;
                 BlockState blockState = this.level.getBlockState(pos);
-                if (!blockState.isAir()) {
+                if (event.useInteractedBlock() != org.bukkit.event.Event.Result.DENY && !blockState.isAir()) { // Paper
                     EnchantmentHelper.onHitBlock(
                         this.level,
                         this.player.getMainHandItem(),
@@ -172,6 +_,23 @@
                     f = blockState.getDestroyProgress(this.player, this.player.level(), pos);
                 }
 
+                // CraftBukkit start
+                // Note that we don't need to resync blocks, block acks will handle it properly for everything but block entities already
+                if (event.useItemInHand() == org.bukkit.event.Event.Result.DENY) {
+                    return;
+                }
+
+                org.bukkit.event.block.BlockDamageEvent blockEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockDamageEvent(this.player, pos, face, this.player.getInventory().getSelectedItem(), f >= 1.0f); // Paper - Add BlockFace to BlockDamageEvent
+
+                if (blockEvent.isCancelled()) {
+                    return;
+                }
+
+                if (blockEvent.getInstaBreak()) {
+                    f = 2.0f;
+                }
+                // CraftBukkit end
+
                 if (!blockState.isAir() && f >= 1.0F) {
                     this.destroyAndAck(pos, sequence, "insta mine");
                 } else {
@@ -212,14 +_,22 @@
                 this.debugLogging(pos, true, sequence, "stopped destroying");
             } else if (action == ServerboundPlayerActionPacket.Action.ABORT_DESTROY_BLOCK) {
                 this.isDestroyingBlock = false;
-                if (!Objects.equals(this.destroyPos, pos)) {
-                    LOGGER.warn("Mismatch in destroy block pos: {} {}", this.destroyPos, pos);
+                // Paper start - Don't allow digging into unloaded chunks
+                if (!Objects.equals(this.destroyPos, pos) && !BlockPos.ZERO.equals(this.destroyPos)) { // Paper
+                    ServerPlayerGameMode.LOGGER.debug("Mismatch in destroy block pos: {} {}", this.destroyPos, pos); // CraftBukkit - SPIGOT-5457 sent by client when interact event cancelled
+                    BlockState type = this.level.getBlockStateIfLoaded(this.destroyPos); // Don't load unloaded chunks for stale records here
+                    if (type != null) {
                     this.level.destroyBlockProgress(this.player.getId(), this.destroyPos, -1);
                     this.debugLogging(pos, true, sequence, "aborted mismatched destroying");
+                    }
+                    this.destroyPos = BlockPos.ZERO;
+                    // Paper end - Don't allow digging into unloaded chunks
                 }
 
                 this.level.destroyBlockProgress(this.player.getId(), pos, -1);
                 this.debugLogging(pos, true, sequence, "aborted destroying");
+
+                org.bukkit.craftbukkit.event.CraftEventFactory.callBlockDamageAbortEvent(this.player, pos, this.player.getInventory().getSelectedItem()); // CraftBukkit
             }
         }
     }
@@ -235,36 +_,108 @@
 
     public boolean destroyBlock(BlockPos pos) {
         BlockState blockState = this.level.getBlockState(pos);
-        if (!this.player.getMainHandItem().canDestroyBlock(blockState, this.level, pos, this.player)) {
+        // CraftBukkit start - fire BlockBreakEvent
+        org.bukkit.block.Block bblock = org.bukkit.craftbukkit.block.CraftBlock.at(this.level, pos);
+        org.bukkit.event.block.BlockBreakEvent event = null;
+        if (this.player instanceof ServerPlayer) {
+            // Sword + Creative mode pre-cancel
+            boolean canAttackBlock = !this.player.getMainHandItem().canDestroyBlock(blockState, this.level, pos, this.player);
+            event = new org.bukkit.event.block.BlockBreakEvent(bblock, this.player.getBukkitEntity());
+
+            // Sword + Creative mode pre-cancel
+            event.setCancelled(canAttackBlock);
+
+            // Calculate default block experience
+            BlockState updatedBlockState = this.level.getBlockState(pos);
+            Block block = updatedBlockState.getBlock();
+
+            if (!event.isCancelled() && !this.isCreative() && this.player.hasCorrectToolForDrops(block.defaultBlockState())) {
+                ItemStack itemInHand = this.player.getItemBySlot(EquipmentSlot.MAINHAND);
+                event.setExpToDrop(block.getExpDrop(updatedBlockState, this.level, pos, itemInHand, true));
+            }
+
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                if (canAttackBlock) {
+                    return false;
+                }
+
+                // Block entity data is not reset by the block acks, send after destroy prediction
+                if (!this.captureSentBlockEntities) {
+                    BlockEntity blockEntity = this.level.getBlockEntity(pos);
+                    if (blockEntity != null) {
+                        this.player.connection.send(blockEntity.getUpdatePacket());
+                    }
+                } else {
+                    this.capturedBlockEntity = true;
+                }
+                return false;
+            }
+        }
+        // CraftBukkit end
+
+        if (false && !this.player.getMainHandItem().canDestroyBlock(blockState, this.level, pos, this.player)) { // CraftBukkit - false
             return false;
         } else {
+            blockState = this.level.getBlockState(pos); // CraftBukkit - update state from plugins
+            if (blockState.isAir()) return false; // CraftBukkit - A plugin set block to air without cancelling
             BlockEntity blockEntity = this.level.getBlockEntity(pos);
             Block block = blockState.getBlock();
-            if (block instanceof GameMasterBlock && !this.player.canUseGameMasterBlocks()) {
+            if (block instanceof GameMasterBlock && !this.player.canUseGameMasterBlocks() && !(block instanceof net.minecraft.world.level.block.CommandBlock && (this.player.isCreative() && this.player.getBukkitEntity().hasPermission("minecraft.commandblock")))) { // Paper - command block permission
                 this.level.sendBlockUpdated(pos, blockState, blockState, 3);
                 return false;
             } else if (this.player.blockActionRestricted(this.level, pos, this.gameModeForPlayer)) {
                 return false;
             } else {
+                // CraftBukkit start
+                org.bukkit.block.BlockState state = bblock.getState();
+                this.level.captureDrops = new java.util.ArrayList<>();
+                // CraftBukkit end
                 BlockState blockState1 = block.playerWillDestroy(this.level, pos, blockState, this.player);
                 boolean flag = this.level.removeBlock(pos, false);
                 if (flag) {
                     block.destroy(this.level, pos, blockState1);
                 }
 
+                ItemStack mainHandStack = null; // Paper - Trigger bee_nest_destroyed trigger in the correct place
+                boolean isCorrectTool = false; // Paper - Trigger bee_nest_destroyed trigger in the correct place
                 if (this.player.preventsBlockDrops()) {
-                    return true;
+                    // return true; // CraftBukkit
                 } else {
                     ItemStack mainHandItem = this.player.getMainHandItem();
                     ItemStack itemStack = mainHandItem.copy();
                     boolean hasCorrectToolForDrops = this.player.hasCorrectToolForDrops(blockState1);
+                    mainHandStack = itemStack; // Paper - Trigger bee_nest_destroyed trigger in the correct place
+                    isCorrectTool = hasCorrectToolForDrops; // Paper - Trigger bee_nest_destroyed trigger in the correct place
                     mainHandItem.mineBlock(this.level, blockState1, pos, this.player);
-                    if (flag && hasCorrectToolForDrops) {
-                        block.playerDestroy(this.level, this.player, pos, blockState1, blockEntity, itemStack);
-                    }
-
-                    return true;
-                }
+                    if (flag && hasCorrectToolForDrops) { // CraftBukkit - Check if block should drop items // Paper - fix drops not preventing stats/food exhaustion
+                        block.playerDestroy(this.level, this.player, pos, blockState1, blockEntity, itemStack, event.isDropItems(), false); // Paper - fix drops not preventing stats/food exhaustion
+                    }
+
+                    // return true; // CraftBukkit
+                }
+                // CraftBukkit start
+                java.util.List<net.minecraft.world.entity.item.ItemEntity> itemsToDrop = this.level.captureDrops; // Paper - capture all item additions to the world
+                this.level.captureDrops = null; // Paper - capture all item additions to the world; Remove this earlier so that we can actually drop stuff
+                if (event.isDropItems()) {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockDropItemEvent(bblock, state, this.player, itemsToDrop); // Paper - capture all item additions to the world
+                }
+
+                // Drop event experience
+                if (flag) {
+                    blockState.getBlock().popExperience(this.level, pos, event.getExpToDrop(), this.player); // Paper
+                }
+                // Paper start - Trigger bee_nest_destroyed trigger in the correct place (check impls of block#playerDestroy)
+                if (mainHandStack != null) {
+                    if (flag && isCorrectTool && event.isDropItems() && block instanceof net.minecraft.world.level.block.BeehiveBlock && blockEntity instanceof net.minecraft.world.level.block.entity.BeehiveBlockEntity beehiveBlockEntity) { // simulates the guard on block#playerDestroy above
+                        CriteriaTriggers.BEE_NEST_DESTROYED.trigger(player, blockState, mainHandStack, beehiveBlockEntity.getOccupantCount());
+                    }
+                }
+                // Paper end - Trigger bee_nest_destroyed trigger in the correct place
+
+                return true;
+                // CraftBukkit end
             }
         }
     }
@@ -307,15 +_,47 @@
         }
     }
 
+    // CraftBukkit start - whole method
+    public boolean interactResult = false;
+    public boolean firedInteract = false;
+    public BlockPos interactPosition;
+    public InteractionHand interactHand;
+    public ItemStack interactItemStack;
     public InteractionResult useItemOn(ServerPlayer player, Level level, ItemStack stack, InteractionHand hand, BlockHitResult hitResult) {
         BlockPos blockPos = hitResult.getBlockPos();
         BlockState blockState = level.getBlockState(blockPos);
+        boolean cancelledBlock = false;
+        boolean cancelledItem = false; // Paper - correctly handle items on cooldown
         if (!blockState.getBlock().isEnabled(level.enabledFeatures())) {
             return InteractionResult.FAIL;
         } else if (this.gameModeForPlayer == GameType.SPECTATOR) {
             MenuProvider menuProvider = blockState.getMenuProvider(level, blockPos);
-            if (menuProvider != null) {
-                player.openMenu(menuProvider);
+            cancelledBlock = !(menuProvider instanceof MenuProvider);
+        }
+
+        if (player.getCooldowns().isOnCooldown(stack)) {
+            cancelledItem = true; // Paper - correctly handle items on cooldown
+        }
+        org.bukkit.event.player.PlayerInteractEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent(player, org.bukkit.event.block.Action.RIGHT_CLICK_BLOCK, blockPos, hitResult.getDirection(), stack, cancelledBlock, cancelledItem, hand, hitResult.getLocation()); // Paper - correctly handle items on cooldown
+        this.firedInteract = true;
+        this.interactResult = event.useItemInHand() == org.bukkit.event.Event.Result.DENY;
+        this.interactPosition = blockPos.immutable();
+        this.interactHand = hand;
+        this.interactItemStack = stack.copy();
+
+        if (event.useInteractedBlock() == org.bukkit.event.Event.Result.DENY) {
+            // Block acks will take care of most of it, just handle some special cases here
+            if (blockState.getBlock() instanceof net.minecraft.world.level.block.CakeBlock) {
+                player.getBukkitEntity().sendHealthUpdate(); // SPIGOT-1341 - reset health for cake
+            } else if (blockState.is(net.minecraft.world.level.block.Blocks.JIGSAW) || blockState.is(net.minecraft.world.level.block.Blocks.STRUCTURE_BLOCK) || blockState.getBlock() instanceof net.minecraft.world.level.block.CommandBlock) {
+                player.connection.send(new net.minecraft.network.protocol.game.ClientboundContainerClosePacket(this.player.containerMenu.containerId));
+            }
+            player.getBukkitEntity().updateInventory(); // SPIGOT-2867
+            this.player.resyncUsingItem(this.player); // Paper - Properly cancel usable items
+            return (event.useItemInHand() != org.bukkit.event.Event.Result.ALLOW) ? InteractionResult.SUCCESS : InteractionResult.PASS;
+        } else if (this.gameModeForPlayer == GameType.SPECTATOR) {
+            MenuProvider menuProvider = blockState.getMenuProvider(level, blockPos);
+            if (menuProvider != null && player.openMenu(menuProvider).isPresent()) { // Paper - Fix InventoryOpenEvent cancellation
                 return InteractionResult.CONSUME;
             } else {
                 return InteractionResult.PASS;
@@ -340,7 +_,7 @@
                 }
             }
 
-            if (!stack.isEmpty() && !player.getCooldowns().isOnCooldown(stack)) {
+            if (!stack.isEmpty() && !this.interactResult) { // add !interactResult SPIGOT-764
                 UseOnContext useOnContext = new UseOnContext(player, hand, hitResult);
                 InteractionResult interactionResult1;
                 if (player.hasInfiniteMaterials()) {
@@ -357,6 +_,11 @@
 
                 return interactionResult1;
             } else {
+                // Paper start - Properly cancel usable items; Cancel only if cancelled + if the interact result is different from default response
+                if (this.interactResult && this.interactResult != cancelledItem) {
+                    this.player.resyncUsingItem(this.player);
+                }
+                // Paper end - Properly cancel usable items
                 return InteractionResult.PASS;
             }
         }
