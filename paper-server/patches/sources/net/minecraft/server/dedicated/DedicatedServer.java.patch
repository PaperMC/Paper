--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -78,10 +_,10 @@
     static final Logger LOGGER = LogUtils.getLogger();
     private static final int CONVERSION_RETRY_DELAY_MS = 5000;
     private static final int CONVERSION_RETRIES = 2;
-    private final List<ConsoleInput> consoleInput = Collections.synchronizedList(Lists.newArrayList());
+    private final java.util.Queue<ConsoleInput> serverCommandQueue = new java.util.concurrent.ConcurrentLinkedQueue<>(); // Paper - Perf: use a proper queue
     @Nullable
     private QueryThreadGs4 queryThreadGs4;
-    private final RconConsoleSource rconConsoleSource;
+    // private final RconConsoleSource rconConsoleSource; // CraftBukkit - remove field
     @Nullable
     private RconThread rconThread;
     public DedicatedServerSettings settings;
@@ -99,6 +_,7 @@
     private long lastHeartbeat;
 
     public DedicatedServer(
+        joptsimple.OptionSet options, net.minecraft.server.WorldLoader.DataLoadContext worldLoader, // CraftBukkit - Signature changed
         Thread serverThread,
         LevelStorageSource.LevelStorageAccess storageSource,
         PackRepository packRepository,
@@ -107,9 +_,10 @@
         DataFixer fixerUpper,
         Services services
     ) {
-        super(serverThread, storageSource, packRepository, worldStem, Proxy.NO_PROXY, fixerUpper, services, LoggingLevelLoadListener.forDedicatedServer());
+        super(options, worldLoader, serverThread, storageSource, packRepository, worldStem, Proxy.NO_PROXY, fixerUpper, services, LoggingLevelLoadListener.forDedicatedServer()); // CraftBukkit - Signature changed
         this.settings = settings;
-        this.rconConsoleSource = new RconConsoleSource(this);
+        this.setMotd(settings.getProperties().motd.get()); // Paper - set field from initial properties
+        //this.rconConsoleSource = new RconConsoleSource(this); // CraftBukkit - remove field
         this.serverTextFilter = ServerTextFilter.createFromConfig(settings.getProperties());
         this.serverLinks = createServerLinks(settings);
         if (settings.getProperties().codeOfConduct) {
@@ -194,6 +_,10 @@
         Thread thread = new Thread("Server console handler") {
             @Override
             public void run() {
+                if (!org.bukkit.craftbukkit.Main.useConsole) return; // CraftBukkit
+                // Paper start - Use TerminalConsoleAppender
+                new com.destroystokyo.paper.console.PaperConsole(DedicatedServer.this).start();
+                /*
                 BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
 
                 String string3;
@@ -203,17 +_,41 @@
                     }
                 } catch (IOException var4) {
                     DedicatedServer.LOGGER.error("Exception handling console input", (Throwable)var4);
-                }
+                }*/
+                // Paper end - Use TerminalConsoleAppender
             }
         };
+        // CraftBukkit start - TODO: handle command-line logging arguments
+        java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+        global.setUseParentHandlers(false);
+        for (java.util.logging.Handler handler : global.getHandlers()) {
+            global.removeHandler(handler);
+        }
+        global.addHandler(new org.bukkit.craftbukkit.util.ForwardLogHandler());
+
+        final org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getRootLogger();
+
+        System.setOut(org.apache.logging.log4j.io.IoBuilder.forLogger(logger).setLevel(org.apache.logging.log4j.Level.INFO).buildPrintStream());
+        System.setErr(org.apache.logging.log4j.io.IoBuilder.forLogger(logger).setLevel(org.apache.logging.log4j.Level.WARN).buildPrintStream());
+        // CraftBukkit end
         thread.setDaemon(true);
         thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
-        thread.start();
+        // thread.start(); // Paper - Enhance console tab completions for brigadier commands; moved down
         LOGGER.info("Starting minecraft server version {}", SharedConstants.getCurrentVersion().name());
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
             LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
         }
 
+        // Paper start - detect running as root
+        if (io.papermc.paper.util.ServerEnvironment.userIsRootOrAdmin()) {
+            LOGGER.warn("****************************");
+            LOGGER.warn("YOU ARE RUNNING THIS SERVER AS AN ADMINISTRATIVE OR ROOT USER. THIS IS NOT ADVISED.");
+            LOGGER.warn("YOU ARE OPENING YOURSELF UP TO POTENTIAL RISKS WHEN DOING THIS.");
+            LOGGER.warn("FOR MORE INFORMATION, SEE https://madelinemiller.dev/blog/root-minecraft-server/");
+            LOGGER.warn("****************************");
+        }
+        // Paper end - detect running as root
+
         LOGGER.info("Loading properties");
         DedicatedServerProperties properties = this.settings.getProperties();
         if (this.isSingleplayer()) {
@@ -224,8 +_,46 @@
             this.setLocalIp(properties.serverIp);
         }
 
-        this.worldData.setGameType(properties.gameMode.get());
+        // Spigot start
+        this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage));
+        org.spigotmc.SpigotConfig.init((java.io.File) this.options.valueOf("spigot-settings"));
+        org.spigotmc.SpigotConfig.registerCommands();
+        // Spigot end
+        io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // Paper - load mappings for stacktrace deobf and etc.
+        // Paper start - initialize global and world-defaults configuration
+        this.paperConfigurations.initializeGlobalConfiguration(this.registryAccess());
+        this.paperConfigurations.initializeWorldDefaultsConfiguration(this.registryAccess());
+        // Paper end - initialize global and world-defaults configuration
+        this.server.spark.enableEarlyIfRequested(); // Paper - spark
+        // Paper start - fix converting txt to json file; convert old users earlier after PlayerList creation but before file load/save
+        if (this.convertOldUsers()) {
+            this.services().nameToIdCache().save(false); // Paper
+        }
+        this.getPlayerList().loadAndSaveFiles(); // Must be after convertNames
+        // Paper end - fix converting txt to json file
+        org.spigotmc.WatchdogThread.doStart(org.spigotmc.SpigotConfig.timeoutTime, org.spigotmc.SpigotConfig.restartOnCrash); // Paper - start watchdog thread
+        thread.start(); // Paper - Enhance console tab completions for brigadier commands; start console thread after MinecraftServer.console & PaperConfig are initialized
+        io.papermc.paper.command.PaperCommands.registerCommands(this); // Paper - setup /paper command
+        this.server.spark.registerCommandBeforePlugins(this.server); // Paper - spark
+        com.destroystokyo.paper.Metrics.PaperMetrics.startMetrics(); // Paper - start metrics
+        com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // Paper - load version history now
+
+        // this.worldData.setGameType(properties.gameMode.get()); // CraftBukkit - moved to world loading
         LOGGER.info("Default game type: {}", properties.gameMode.get());
+        // Paper start - Unix domain socket support
+        java.net.SocketAddress bindAddress;
+        if (this.getLocalIp().startsWith("unix:")) {
+            if (!io.netty.channel.epoll.Epoll.isAvailable()) {
+                LOGGER.error("**** INVALID CONFIGURATION!");
+                LOGGER.error("You are trying to use a Unix domain socket but you're not on a supported OS.");
+                return false;
+            } else if (!io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled && !org.spigotmc.SpigotConfig.bungee) {
+                LOGGER.error("**** INVALID CONFIGURATION!");
+                LOGGER.error("Unix domain sockets require IPs to be forwarded from a proxy.");
+                return false;
+            }
+            bindAddress = new io.netty.channel.unix.DomainSocketAddress(this.getLocalIp().substring("unix:".length()));
+        } else {
         InetAddress inetAddress = null;
         if (!this.getLocalIp().isEmpty()) {
             inetAddress = InetAddress.getByName(this.getLocalIp());
@@ -234,46 +_,72 @@
         if (this.getPort() < 0) {
             this.setPort(properties.serverPort);
         }
+        bindAddress = new java.net.InetSocketAddress(inetAddress, this.getPort());
+        }
+        // Paper end - Unix domain socket support
 
         this.initializeKeyPair();
         LOGGER.info("Starting Minecraft server on {}:{}", this.getLocalIp().isEmpty() ? "*" : this.getLocalIp(), this.getPort());
 
         try {
-            this.getConnection().startTcpServerListener(inetAddress, this.getPort());
+            this.getConnection().startTcpServerListener(bindAddress); // Paper - Unix domain socket support
         } catch (IOException var11) {
             LOGGER.warn("**** FAILED TO BIND TO PORT!");
             LOGGER.warn("The exception was: {}", var11.toString());
             LOGGER.warn("Perhaps a server is already running on that port?");
+            if (true) throw new IllegalStateException("Failed to bind to port", var11); // Paper - Propagate failed to bind to port error
             return false;
         }
 
+        // CraftBukkit start
+        this.server.loadPlugins();
+        this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+        // CraftBukkit end
+
+        // Paper start - Add Velocity IP Forwarding Support
+        boolean usingProxy = org.spigotmc.SpigotConfig.bungee || io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled;
+        String proxyFlavor = (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled) ? "Velocity" : "BungeeCord";
+        String proxyLink = (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled) ? "https://docs.papermc.io/velocity/security" : "http://www.spigotmc.org/wiki/firewall-guide/";
+        // Paper end - Add Velocity IP Forwarding Support
         if (!this.usesAuthentication()) {
             LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
             LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
-            LOGGER.warn(
-                "While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose."
-            );
+            // Spigot start
+            // Paper start - Add Velocity IP Forwarding Support
+            if (usingProxy) {
+                LOGGER.warn("Whilst this makes it possible to use {}, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.", proxyFlavor);
+                LOGGER.warn("Please see {} for further information.", proxyLink);
+                // Paper end - Add Velocity IP Forwarding Support
+            } else {
+                LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+            }
+            // Spigot end
             LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
         }
 
+        // CraftBukkit start
+        /*
         if (this.convertOldUsers()) {
             this.services.nameToIdCache().save();
         }
+        */
+        // CraftBukkit end
 
         if (!OldUsersConverter.serverReadyAfterUserconversion(this)) {
             return false;
         } else {
-            this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage));
+            // this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage)); // CraftBukkit - moved up
             this.tickTimeLogger = new RemoteSampleLogger(TpsDebugDimensions.values().length, this.debugSubscribers(), RemoteDebugSampleType.TICK_TIME);
             long nanos = Util.getNanos();
             this.services.nameToIdCache().resolveOfflineUsers(!this.usesAuthentication());
             LOGGER.info("Preparing level \"{}\"", this.getLevelIdName());
-            this.loadLevel();
+            this.loadLevel(this.storageSource.getLevelId()); // CraftBukkit
             long l = Util.getNanos() - nanos;
             String string2 = String.format(Locale.ROOT, "%.3fs", l / 1.0E9);
-            LOGGER.info("Done ({})! For help, type \"help\"", string2);
+            LOGGER.info("Done preparing level \"{}\" ({})", this.getLevelIdName(), string2); // Paper - Improve startup message, add total time
+            this.initPostWorld(); // Paper - don't include plugins in world preparation time
             if (properties.announcePlayerAchievements != null) {
-                this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS).set(properties.announcePlayerAchievements, this);
+                this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS).set(properties.announcePlayerAchievements, this.overworld()); // CraftBukkit - per-world
             }
 
             if (properties.enableQuery) {
@@ -286,7 +_,7 @@
                 this.rconThread = RconThread.create(this);
             }
 
-            if (this.getMaxTickLength() > 0L) {
+            if (false && this.getMaxTickLength() > 0L) { // Spigot - disable
                 Thread thread1 = new Thread(new ServerWatchdog(this));
                 thread1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(LOGGER));
                 thread1.setName("Server Watchdog");
@@ -304,6 +_,12 @@
         }
     }
 
+    // Paper start
+    public java.io.File getPluginsFolder() {
+        return (java.io.File) this.options.valueOf("plugins");
+    }
+    // Paper end
+
     @Override
     public boolean isEnforceWhitelist() {
         return this.settings.getProperties().enforceWhitelist.get();
@@ -321,6 +_,7 @@
 
     @Override
     public void setUsingWhitelist(boolean usingWhitelist) {
+        new com.destroystokyo.paper.event.server.WhitelistToggleEvent(usingWhitelist).callEvent(); // Paper - WhitelistToggleEvent
         this.settings.update(dedicatedServerProperties -> dedicatedServerProperties.whiteList.update(this.registryAccess(), usingWhitelist));
     }
 
@@ -371,7 +_,7 @@
 
     @Override
     public void forceDifficulty() {
-        this.setDifficulty(this.getProperties().difficulty.get(), true);
+        // this.setDifficulty(this.getProperties().difficulty.get(), true); // Paper - per level difficulty; Don't overwrite level.dat's difficulty, keep current
     }
 
     public int viewDistance() {
@@ -427,11 +_,11 @@
         }
 
         if (this.rconThread != null) {
-            this.rconThread.stop();
+            this.rconThread.stopNonBlocking(); // Paper - don't wait for remote connections
         }
 
         if (this.queryThreadGs4 != null) {
-            this.queryThreadGs4.stop();
+            // this.remoteStatusListener.stop(); // Paper - don't wait for remote connections
         }
 
         if (this.jsonRpcServer != null) {
@@ -441,6 +_,9 @@
                 LOGGER.error("Interrupted while stopping the management server", (Throwable)var2);
             }
         }
+
+        this.hasFullyShutdown = true; // Paper - Improved watchdog support
+        System.exit(this.abnormalExit ? 70 : 0); // CraftBukkit // Paper - Improved watchdog support
     }
 
     @Override
@@ -450,12 +_,20 @@
     }
 
     public void handleConsoleInput(String msg, CommandSourceStack source) {
-        this.consoleInput.add(new ConsoleInput(msg, source));
+        this.serverCommandQueue.add(new ConsoleInput(msg, source)); // Paper - Perf: use proper queue
     }
 
     public void handleConsoleInputs() {
-        while (!this.consoleInput.isEmpty()) {
-            ConsoleInput consoleInput = this.consoleInput.remove(0);
+        // Paper start - Perf: use proper queue
+        ConsoleInput consoleInput;
+        while ((consoleInput = this.serverCommandQueue.poll()) != null) {
+            // Paper end - Perf: use proper queue
+            // CraftBukkit start - ServerCommand for preprocessing
+            org.bukkit.event.server.ServerCommandEvent event = new org.bukkit.event.server.ServerCommandEvent(this.console, consoleInput.msg);
+            this.server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) continue;
+            consoleInput = new ConsoleInput(event.getCommand(), consoleInput.source);
+            // CraftBukkit end
             this.getCommands().performPrefixedCommand(consoleInput.source, consoleInput.msg);
         }
     }
@@ -601,12 +_,15 @@
 
     @Override
     public String getMotd() {
-        return this.settings.getProperties().motd.get();
+        return super.getMotd(); // Paper
     }
 
     @Override
     public void setMotd(String motd) {
-        this.settings.update(dedicatedServerProperties -> dedicatedServerProperties.motd.update(this.registryAccess(), motd));
+        // Paper start
+        super.setMotd(motd);
+        this.settings.update(dedicatedServerProperties -> dedicatedServerProperties.motd.update(this.registryAccess(), this.getMotd()));
+        // Paper end
     }
 
     @Override
@@ -632,7 +_,11 @@
     @Override
     public boolean enforceSecureProfile() {
         DedicatedServerProperties properties = this.getProperties();
-        return properties.enforceSecureProfile && properties.onlineMode && this.services.canValidateProfileKeys();
+        // Paper start - Add setting for proxy online mode status
+        return properties.enforceSecureProfile
+            && io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode()
+            && this.services.canValidateProfileKeys();
+        // Paper end - Add setting for proxy online mode status
     }
 
     @Override
@@ -717,21 +_,60 @@
 
     @Override
     public String getPluginNames() {
-        return "";
+        // CraftBukkit start - Whole method
+        StringBuilder result = new StringBuilder();
+        org.bukkit.plugin.Plugin[] plugins = this.server.getPluginManager().getPlugins();
+
+        result.append(this.server.getName());
+        result.append(" on Bukkit ");
+        result.append(this.server.getBukkitVersion());
+
+        if (plugins.length > 0 && this.server.getQueryPlugins()) {
+            result.append(": ");
+
+            for (int i = 0; i < plugins.length; i++) {
+                if (i > 0) {
+                    result.append("; ");
+                }
+
+                result.append(plugins[i].getDescription().getName());
+                result.append(" ");
+                result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+            }
+        }
+
+        return result.toString();
+        // CraftBukkit end
     }
 
     @Override
     public String runCommand(String command) {
-        this.rconConsoleSource.prepareForCommand();
-        this.executeBlocking(() -> this.getCommands().performPrefixedCommand(this.rconConsoleSource.createCommandSourceStack(), command));
-        return this.rconConsoleSource.getCommandResponse();
+        // CraftBukkit start - fire RemoteServerCommandEvent
+        throw new UnsupportedOperationException("Not supported - remote source required.");
+    }
+
+    public String runCommand(RconConsoleSource rconConsoleSource, String s) {
+        if (s.isBlank()) return ""; // Paper - Do not process empty rcon commands
+
+        rconConsoleSource.prepareForCommand();
+        this.executeBlocking(() -> {
+            CommandSourceStack wrapper = rconConsoleSource.createCommandSourceStack();
+            org.bukkit.event.server.RemoteServerCommandEvent event = new org.bukkit.event.server.RemoteServerCommandEvent(rconConsoleSource.getBukkitSender(wrapper), s);
+            this.server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return;
+            }
+            this.getCommands().performPrefixedCommand(wrapper, event.getCommand());
+        });
+        return rconConsoleSource.getCommandResponse();
+        // CraftBukkit end
     }
 
     @Override
     public void stopServer() {
         this.notificationManager().serverShuttingDown();
         super.stopServer();
-        Util.shutdownExecutors();
+        //Util.shutdownExecutors(); // Paper - Improved watchdog support; moved into super
     }
 
     @Override
@@ -863,4 +_,15 @@
     public Map<String, String> getCodeOfConducts() {
         return this.codeOfConductTexts;
     }
+
+    // CraftBukkit start
+    public boolean isDebugging() {
+        return this.getProperties().debug;
+    }
+
+    @Override
+    public org.bukkit.command.CommandSender getBukkitSender(CommandSourceStack wrapper) {
+        return this.console;
+    }
+    // CraftBukkit end
 }
