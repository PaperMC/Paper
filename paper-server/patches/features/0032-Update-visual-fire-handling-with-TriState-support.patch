From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: david <mrminecraft00@gmail.com>
Date: Sun, 16 Mar 2025 11:13:25 +0100
Subject: [PATCH] Update visual fire handling with TriState support

Replaced the Boolean-based visual fire system with TriState for improved clarity and flexibility, enabling three distinct states: TRUE, FALSE, and NOT_SET. Deprecated older methods in favor of new ones and updated internal handling to reflect these changes. Adjusted serialization and deserialization logic to accommodate the new TriState implementation.

diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index b2b61203438bb1fad1ee807729781718d2467155..e0e82d2aab03ef281068f3cfcadfcf228c036551 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -303,7 +303,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     private boolean onGroundNoBlocks = false;
     private float crystalSoundIntensity;
     private int lastCrystalSoundPlayTick;
-    public boolean hasVisualFire;
+    public net.kyori.adventure.util.TriState visualFire = net.kyori.adventure.util.TriState.NOT_SET;
     @Nullable
     private BlockState inBlockState = null;
     private final List<Entity.Movement> movementThisTick = new ArrayList<>();
@@ -895,7 +895,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
 
     public void setSharedFlagOnFire(boolean isOnFire) {
-        this.setSharedFlag(0, isOnFire || this.hasVisualFire);
+        this.setSharedFlag(0, this.visualFire.toBooleanOrElse(isOnFire));
     }
 
     public void checkBelowWorld() {
@@ -2465,8 +2465,10 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 compound.putInt("TicksFrozen", this.getTicksFrozen());
             }
 
-            if (this.hasVisualFire) {
-                compound.putBoolean("HasVisualFire", this.hasVisualFire);
+            if (!this.visualFire.equals(net.kyori.adventure.util.TriState.NOT_SET)) {
+                compound.putBoolean("HasVisualFire", this.visualFire.equals(net.kyori.adventure.util.TriState.TRUE));
+            } else {
+                compound.remove("HasVisualFire");
             }
 
             if (!this.tags.isEmpty()) {
@@ -2590,7 +2592,9 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 this.setNoGravity(compound.getBoolean("NoGravity"));
                 this.setGlowingTag(compound.getBoolean("Glowing"));
                 this.setTicksFrozen(compound.getInt("TicksFrozen"));
-                this.hasVisualFire = compound.getBoolean("HasVisualFire");
+                this.visualFire = compound.contains("HasVisualFire")
+                    ? net.kyori.adventure.util.TriState.byBoolean(compound.getBoolean("HasVisualFire"))
+                    : net.kyori.adventure.util.TriState.NOT_SET;
                 if (compound.contains("Tags", 9)) {
                     this.tags.clear();
                     ListTag list3 = compound.getList("Tags", 8);
