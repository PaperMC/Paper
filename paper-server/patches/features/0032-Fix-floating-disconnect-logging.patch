From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Pedro <43187922+pedroagrs@users.noreply.github.com>
Date: Tue, 1 Apr 2025 08:11:49 -0300
Subject: [PATCH] Fix floating disconnect logging


diff --git a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
index af75f1ca60dc01045f27cb550ac9e3deacf1a1cf..fcc597697795d48424f2912ea5cd70fce510548f 100644
--- a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -25,6 +25,7 @@ import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ClientInformation;
 import net.minecraft.util.VisibleForDebug;
 import net.minecraft.util.profiling.Profiler;
+import org.bukkit.event.player.PlayerKickEvent.Cause;
 import org.slf4j.Logger;
 
 public abstract class ServerCommonPacketListenerImpl implements ServerCommonPacketListener, org.bukkit.craftbukkit.entity.CraftPlayer.TransferCookieConnection { // CraftBukkit
@@ -367,6 +368,15 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
             // Do not kick the player
             return;
         }
+
+        // Paper start - Fix floating logging when the kick event is canceled
+        if (cause == Cause.FLYING_PLAYER) {
+            LOGGER.warn("{} was kicked for floating too long!", this.player.getName().getString());
+        } else if (cause == Cause.FLYING_VEHICLE) {
+            LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getName().getString());
+        }
+        // Paper end - Fix floating logging when the kick event is canceled
+
         // Send the possibly modified leave message
         this.disconnect0(new DisconnectionDetails(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.reason()), disconnectionDetails.report(), disconnectionDetails.bugReportLink()), event.leaveMessage()); // Paper - Adventure & use kick event leave message
     }
diff --git a/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 876d207996724727ca26b139af759eab2e6f4131..4af7834c7f108e9057ce4aa9ca2b1407d92e09ca 100644
--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -345,7 +345,7 @@ public class ServerGamePacketListenerImpl
         this.knownMovePacketCount = this.receivedMovePacketCount;
         if (this.clientIsFloating && !this.player.isSleeping() && !this.player.isPassenger() && !this.player.isDeadOrDying()) {
             if (++this.aboveGroundTickCount > this.getMaximumFlyingTicks(this.player)) {
-                LOGGER.warn("{} was kicked for floating too long!", this.player.getName().getString());
+                // LOGGER.warn("{} was kicked for floating too long!", this.player.getName().getString()); // Paper - Logging moved to disconnect method
                 this.disconnect(io.papermc.paper.configuration.GlobalConfiguration.get().messages.kick.flyingPlayer, org.bukkit.event.player.PlayerKickEvent.Cause.FLYING_PLAYER); // Paper - use configurable kick message & kick event cause
                 return;
             }
@@ -364,7 +364,7 @@ public class ServerGamePacketListenerImpl
             this.vehicleLastGoodZ = this.lastVehicle.getZ();
             if (this.clientVehicleIsFloating && this.lastVehicle.getControllingPassenger() == this.player) {
                 if (++this.aboveGroundVehicleTickCount > this.getMaximumFlyingTicks(this.lastVehicle)) {
-                    LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getName().getString());
+                    // LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getName().getString()); // Paper - Logging moved to disconnect method
                     this.disconnect(io.papermc.paper.configuration.GlobalConfiguration.get().messages.kick.flyingVehicle, org.bukkit.event.player.PlayerKickEvent.Cause.FLYING_VEHICLE); // Paper - use configurable kick message & kick event cause
                     return;
                 }
